// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// The current device availability (registered, available and maxmimum) for iPhones, iPads, iPods and Watches from Apple Developer Portal
public struct AvailabilityOfDevicesResponse: Codable {
  /// ...
  public var iphones: Iphones
  /// ...
  public var ipads: Ipads
  /// ...
  public var ipods: Ipods
  /// ...
  public var watches: Watches

  /// ...
  public struct Iphones: Codable {
    public var registered: Double
    public var available: Double
    public var maximum: Double

    public init(registered: Double, available: Double, maximum: Double) {
      self.registered = registered
      self.available = available
      self.maximum = maximum
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.registered = try values.decode(Double.self, forKey: "registered")
      self.available = try values.decode(Double.self, forKey: "available")
      self.maximum = try values.decode(Double.self, forKey: "maximum")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(registered, forKey: "registered")
      try values.encode(available, forKey: "available")
      try values.encode(maximum, forKey: "maximum")
    }
  }

  /// ...
  public struct Ipads: Codable {
    public var registered: Double
    public var available: Double
    public var maximum: Double

    public init(registered: Double, available: Double, maximum: Double) {
      self.registered = registered
      self.available = available
      self.maximum = maximum
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.registered = try values.decode(Double.self, forKey: "registered")
      self.available = try values.decode(Double.self, forKey: "available")
      self.maximum = try values.decode(Double.self, forKey: "maximum")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(registered, forKey: "registered")
      try values.encode(available, forKey: "available")
      try values.encode(maximum, forKey: "maximum")
    }
  }

  /// ...
  public struct Ipods: Codable {
    public var registered: Double
    public var available: Double
    public var maximum: Double

    public init(registered: Double, available: Double, maximum: Double) {
      self.registered = registered
      self.available = available
      self.maximum = maximum
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.registered = try values.decode(Double.self, forKey: "registered")
      self.available = try values.decode(Double.self, forKey: "available")
      self.maximum = try values.decode(Double.self, forKey: "maximum")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(registered, forKey: "registered")
      try values.encode(available, forKey: "available")
      try values.encode(maximum, forKey: "maximum")
    }
  }

  /// ...
  public struct Watches: Codable {
    public var registered: Double
    public var available: Double
    public var maximum: Double

    public init(registered: Double, available: Double, maximum: Double) {
      self.registered = registered
      self.available = available
      self.maximum = maximum
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.registered = try values.decode(Double.self, forKey: "registered")
      self.available = try values.decode(Double.self, forKey: "available")
      self.maximum = try values.decode(Double.self, forKey: "maximum")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(registered, forKey: "registered")
      try values.encode(available, forKey: "available")
      try values.encode(maximum, forKey: "maximum")
    }
  }

  public init(iphones: Iphones, ipads: Ipads, ipods: Ipods, watches: Watches) {
    self.iphones = iphones
    self.ipads = ipads
    self.ipods = ipods
    self.watches = watches
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.iphones = try values.decode(Iphones.self, forKey: "iphones")
    self.ipads = try values.decode(Ipads.self, forKey: "ipads")
    self.ipods = try values.decode(Ipods.self, forKey: "ipods")
    self.watches = try values.decode(Watches.self, forKey: "watches")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(iphones, forKey: "iphones")
    try values.encode(ipads, forKey: "ipads")
    try values.encode(ipods, forKey: "ipods")
    try values.encode(watches, forKey: "watches")
  }
}
