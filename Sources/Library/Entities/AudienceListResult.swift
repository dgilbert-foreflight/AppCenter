// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// List of audiences.
public struct AudienceListResult: Codable {
  /// List of audiences.
  public var values: [Value]
  public var nextLink: String?

  /// Audience definition.
  public struct Value: Codable {
    /// Audience name.
    public var name: String?
    /// Audience description.
    public var description: String?
    /// Estimated audience size.
    public var estimatedCount: Int64?
    /// Audience definition in OData format.
    public var definition: String?
    /// Audience state.
    public var state: State?

    /// Audience state.
    public enum State: String, Codable, CaseIterable {
      case calculating = "Calculating"
      case ready = "Ready"
      case disabled = "Disabled"
    }

    public init(name: String? = nil, description: String? = nil, estimatedCount: Int64? = nil, definition: String? = nil, state: State? = nil) {
      self.name = name
      self.description = description
      self.estimatedCount = estimatedCount
      self.definition = definition
      self.state = state
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.name = try values.decodeIfPresent(String.self, forKey: "name")
      self.description = try values.decodeIfPresent(String.self, forKey: "description")
      self.estimatedCount = try values.decodeIfPresent(Int64.self, forKey: "estimated_count")
      self.definition = try values.decodeIfPresent(String.self, forKey: "definition")
      self.state = try values.decodeIfPresent(State.self, forKey: "state")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(name, forKey: "name")
      try values.encodeIfPresent(description, forKey: "description")
      try values.encodeIfPresent(estimatedCount, forKey: "estimated_count")
      try values.encodeIfPresent(definition, forKey: "definition")
      try values.encodeIfPresent(state, forKey: "state")
    }
  }

  public init(values: [Value], nextLink: String? = nil) {
    self.values = values
    self.nextLink = nextLink
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.values = try values.decode([Value].self, forKey: "values")
    self.nextLink = try values.decodeIfPresent(String.self, forKey: "nextLink")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(self.values, forKey: "values")
    try values.encodeIfPresent(nextLink, forKey: "nextLink")
  }
}
