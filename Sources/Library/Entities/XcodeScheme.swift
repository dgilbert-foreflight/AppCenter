// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct XcodeScheme: Codable {
  /// Scheme name
  public var name: String
  /// Does scheme have a test action?
  public var hasTestAction: Bool
  /// Build configuration set in Archive action
  public var archiveConfiguration: String?
  public var archiveProject: ArchiveProject?

  public struct ArchiveProject: Codable {
    /// The Id of the target to archive
    public var archiveTargetID: String
    /// The project to archive container name
    public var projectName: String
    /// Full path of the target project
    public var projectPath: String?

    public init(archiveTargetID: String, projectName: String, projectPath: String? = nil) {
      self.archiveTargetID = archiveTargetID
      self.projectName = projectName
      self.projectPath = projectPath
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.archiveTargetID = try values.decode(String.self, forKey: "archiveTargetId")
      self.projectName = try values.decode(String.self, forKey: "projectName")
      self.projectPath = try values.decodeIfPresent(String.self, forKey: "projectPath")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(archiveTargetID, forKey: "archiveTargetId")
      try values.encode(projectName, forKey: "projectName")
      try values.encodeIfPresent(projectPath, forKey: "projectPath")
    }
  }

  public init(name: String, hasTestAction: Bool, archiveConfiguration: String? = nil, archiveProject: ArchiveProject? = nil) {
    self.name = name
    self.hasTestAction = hasTestAction
    self.archiveConfiguration = archiveConfiguration
    self.archiveProject = archiveProject
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.name = try values.decode(String.self, forKey: "name")
    self.hasTestAction = try values.decode(Bool.self, forKey: "hasTestAction")
    self.archiveConfiguration = try values.decodeIfPresent(String.self, forKey: "archiveConfiguration")
    self.archiveProject = try values.decodeIfPresent(ArchiveProject.self, forKey: "archiveProject")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(name, forKey: "name")
    try values.encode(hasTestAction, forKey: "hasTestAction")
    try values.encodeIfPresent(archiveConfiguration, forKey: "archiveConfiguration")
    try values.encodeIfPresent(archiveProject, forKey: "archiveProject")
  }
}
