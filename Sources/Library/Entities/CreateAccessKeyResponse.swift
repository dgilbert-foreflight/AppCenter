// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateAccessKeyResponse: Codable {
  public var accessKey: AccessKey?

  public struct AccessKey: Codable, Identifiable {
    /// Key of access key
    public var name: String?
    /// Account name of creator.
    public var createdBy: String?
    /// Description of access key
    public var description: String?
    /// Friendly name of access key
    public var friendlyName: String?
    /// Created time of access key
    public var createdTime: Double?
    /// Time of expiry of access key
    public var expires: Double?
    /// Id of accessKey
    public var id: String?
    /// Legacy property which indicate if accessKey was created from session
    public var isSession: Bool?

    public init(name: String? = nil, createdBy: String? = nil, description: String? = nil, friendlyName: String? = nil, createdTime: Double? = nil, expires: Double? = nil, id: String? = nil, isSession: Bool? = nil) {
      self.name = name
      self.createdBy = createdBy
      self.description = description
      self.friendlyName = friendlyName
      self.createdTime = createdTime
      self.expires = expires
      self.id = id
      self.isSession = isSession
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.name = try values.decodeIfPresent(String.self, forKey: "name")
      self.createdBy = try values.decodeIfPresent(String.self, forKey: "createdBy")
      self.description = try values.decodeIfPresent(String.self, forKey: "description")
      self.friendlyName = try values.decodeIfPresent(String.self, forKey: "friendlyName")
      self.createdTime = try values.decodeIfPresent(Double.self, forKey: "createdTime")
      self.expires = try values.decodeIfPresent(Double.self, forKey: "expires")
      self.id = try values.decodeIfPresent(String.self, forKey: "id")
      self.isSession = try values.decodeIfPresent(Bool.self, forKey: "isSession")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(name, forKey: "name")
      try values.encodeIfPresent(createdBy, forKey: "createdBy")
      try values.encodeIfPresent(description, forKey: "description")
      try values.encodeIfPresent(friendlyName, forKey: "friendlyName")
      try values.encodeIfPresent(createdTime, forKey: "createdTime")
      try values.encodeIfPresent(expires, forKey: "expires")
      try values.encodeIfPresent(id, forKey: "id")
      try values.encodeIfPresent(isSession, forKey: "isSession")
    }
  }

  public init(accessKey: AccessKey? = nil) {
    self.accessKey = accessKey
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.accessKey = try values.decodeIfPresent(AccessKey.self, forKey: "accessKey")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(accessKey, forKey: "accessKey")
  }
}
