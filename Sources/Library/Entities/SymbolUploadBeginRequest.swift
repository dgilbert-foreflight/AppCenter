// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// A request containing information pertaining to starting a symbol upload process
public struct SymbolUploadBeginRequest: Codable {
  /// The type of the symbol for the current symbol upload
  public var symbolType: SymbolType
  /// The callback URL that the client can optionally provide to get status updates for the current symbol upload
  public var clientCallback: String?
  /// The file name for the symbol upload
  public var fileName: String?
  /// The build number. Optional for Apple. Required for Android.
  public var build: String?
  /// The version number. Optional for Apple. Required for Android.
  public var version: String?

  /// The type of the symbol for the current symbol upload
  public enum SymbolType: String, Codable, CaseIterable {
    case apple = "Apple"
    case javaScript = "JavaScript"
    case breakpad = "Breakpad"
    case androidProguard = "AndroidProguard"
    case uwp = "UWP"
  }

  public init(symbolType: SymbolType, clientCallback: String? = nil, fileName: String? = nil, build: String? = nil, version: String? = nil) {
    self.symbolType = symbolType
    self.clientCallback = clientCallback
    self.fileName = fileName
    self.build = build
    self.version = version
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.symbolType = try values.decode(SymbolType.self, forKey: "symbol_type")
    self.clientCallback = try values.decodeIfPresent(String.self, forKey: "client_callback")
    self.fileName = try values.decodeIfPresent(String.self, forKey: "file_name")
    self.build = try values.decodeIfPresent(String.self, forKey: "build")
    self.version = try values.decodeIfPresent(String.self, forKey: "version")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(symbolType, forKey: "symbol_type")
    try values.encodeIfPresent(clientCallback, forKey: "client_callback")
    try values.encodeIfPresent(fileName, forKey: "file_name")
    try values.encodeIfPresent(build, forKey: "build")
    try values.encodeIfPresent(version, forKey: "version")
  }
}
