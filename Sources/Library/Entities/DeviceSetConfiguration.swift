// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct DeviceSetConfiguration: Codable, Identifiable {
  /// The unique id of the device configuration
  public var id: UUID?
  public var image: Image?
  public var model: Model?
  public var os: String?
  public var osName: String?

  public struct Image: Codable {
    public var thumb: String?

    public init(thumb: String? = nil) {
      self.thumb = thumb
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.thumb = try values.decodeIfPresent(String.self, forKey: "thumb")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(thumb, forKey: "thumb")
    }
  }

  public struct Model: Codable {
    public var name: String?
    public var manufacturer: String?
    public var releaseDate: String?
    public var formFactor: String?

    public init(name: String? = nil, manufacturer: String? = nil, releaseDate: String? = nil, formFactor: String? = nil) {
      self.name = name
      self.manufacturer = manufacturer
      self.releaseDate = releaseDate
      self.formFactor = formFactor
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.name = try values.decodeIfPresent(String.self, forKey: "name")
      self.manufacturer = try values.decodeIfPresent(String.self, forKey: "manufacturer")
      self.releaseDate = try values.decodeIfPresent(String.self, forKey: "releaseDate")
      self.formFactor = try values.decodeIfPresent(String.self, forKey: "formFactor")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(name, forKey: "name")
      try values.encodeIfPresent(manufacturer, forKey: "manufacturer")
      try values.encodeIfPresent(releaseDate, forKey: "releaseDate")
      try values.encodeIfPresent(formFactor, forKey: "formFactor")
    }
  }

  public init(id: UUID? = nil, image: Image? = nil, model: Model? = nil, os: String? = nil, osName: String? = nil) {
    self.id = id
    self.image = image
    self.model = model
    self.os = os
    self.osName = osName
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decodeIfPresent(UUID.self, forKey: "id")
    self.image = try values.decodeIfPresent(Image.self, forKey: "image")
    self.model = try values.decodeIfPresent(Model.self, forKey: "model")
    self.os = try values.decodeIfPresent(String.self, forKey: "os")
    self.osName = try values.decodeIfPresent(String.self, forKey: "osName")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(id, forKey: "id")
    try values.encodeIfPresent(image, forKey: "image")
    try values.encodeIfPresent(model, forKey: "model")
    try values.encodeIfPresent(os, forKey: "os")
    try values.encodeIfPresent(osName, forKey: "osName")
  }
}
