// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Describes the migration schema for a provisioning profile defined in HockeyApp.
public struct ProvisioningProfileMigration: Codable {
  /// The name of the provisioning profile.
  public var name: String
  /// The bundle/application identifier.
  public var bundleID: String
  /// The team identifier.
  public var teamIdentifier: String
  /// The type of provisoning profile.
  public var type: Int
  /// A boolean value that indicates whether the provisioning profile represents an app extension.
  public var isAppex: Bool
  /// The provisioning profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z.
  public var expiredAt: String?
  /// A list of UDIDs of provisioned devices.
  public var udids: [String]?
  /// A provisioning profile URL that indicates where to download it from.
  public var url: String?

  public init(name: String, bundleID: String, teamIdentifier: String, type: Int, isAppex: Bool, expiredAt: String? = nil, udids: [String]? = nil, url: String? = nil) {
    self.name = name
    self.bundleID = bundleID
    self.teamIdentifier = teamIdentifier
    self.type = type
    self.isAppex = isAppex
    self.expiredAt = expiredAt
    self.udids = udids
    self.url = url
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.name = try values.decode(String.self, forKey: "name")
    self.bundleID = try values.decode(String.self, forKey: "bundle_id")
    self.teamIdentifier = try values.decode(String.self, forKey: "team_identifier")
    self.type = try values.decode(Int.self, forKey: "type")
    self.isAppex = try values.decode(Bool.self, forKey: "is_appex")
    self.expiredAt = try values.decodeIfPresent(String.self, forKey: "expired_at")
    self.udids = try values.decodeIfPresent([String].self, forKey: "udids")
    self.url = try values.decodeIfPresent(String.self, forKey: "url")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(name, forKey: "name")
    try values.encode(bundleID, forKey: "bundle_id")
    try values.encode(teamIdentifier, forKey: "team_identifier")
    try values.encode(type, forKey: "type")
    try values.encode(isAppex, forKey: "is_appex")
    try values.encodeIfPresent(expiredAt, forKey: "expired_at")
    try values.encodeIfPresent(udids, forKey: "udids")
    try values.encodeIfPresent(url, forKey: "url")
  }
}
