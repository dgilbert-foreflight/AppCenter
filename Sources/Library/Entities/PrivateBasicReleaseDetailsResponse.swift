// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Basic information on a release for private apis
public struct PrivateBasicReleaseDetailsResponse: Codable, Identifiable {
  /// ID identifying this unique release.
  public var id: Int?
  /// The release's version.<br>
  /// For iOS: CFBundleVersion from info.plist.<br>
  /// For Android: android:versionCode from AppManifest.xml.
  public var version: String?
  /// The release's origin
  public var origin: Origin?
  /// The release's short version.<br>
  /// For iOS: CFBundleShortVersionString from info.plist.<br>
  /// For Android: android:versionName from AppManifest.xml.
  public var shortVersion: String?
  /// UTC time in ISO 8601 format of the uploaded time.
  public var uploadedAt: String?
  /// The destination id of release where it is distributed.
  public var distributionGroupID: String?
  /// The destination type.<br>
  /// <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
  /// <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
  public var destinationType: DestinationType?
  /// Indicates if this is the latest release in the group.
  public var isLatest: Bool?
  /// A boolean which determines whether the release is a mandatory update or not.
  public var isMandatoryUpdate: Bool?
  /// The publishing status of the distributed release
  public var publishingStatus: String?
  /// This value determines if a release is external or not.
  public var isExternalBuild: Bool?

  /// The release's origin
  public enum Origin: String, Codable, CaseIterable {
    case hockeyapp
    case appcenter
  }

  /// The destination type.<br>
  /// <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
  /// <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
  public enum DestinationType: String, Codable, CaseIterable {
    case group
    case store
    case tester
  }

  public init(id: Int? = nil, version: String? = nil, origin: Origin? = nil, shortVersion: String? = nil, uploadedAt: String? = nil, distributionGroupID: String? = nil, destinationType: DestinationType? = nil, isLatest: Bool? = nil, isMandatoryUpdate: Bool? = nil, publishingStatus: String? = nil, isExternalBuild: Bool? = nil) {
    self.id = id
    self.version = version
    self.origin = origin
    self.shortVersion = shortVersion
    self.uploadedAt = uploadedAt
    self.distributionGroupID = distributionGroupID
    self.destinationType = destinationType
    self.isLatest = isLatest
    self.isMandatoryUpdate = isMandatoryUpdate
    self.publishingStatus = publishingStatus
    self.isExternalBuild = isExternalBuild
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decodeIfPresent(Int.self, forKey: "id")
    self.version = try values.decodeIfPresent(String.self, forKey: "version")
    self.origin = try values.decodeIfPresent(Origin.self, forKey: "origin")
    self.shortVersion = try values.decodeIfPresent(String.self, forKey: "short_version")
    self.uploadedAt = try values.decodeIfPresent(String.self, forKey: "uploaded_at")
    self.distributionGroupID = try values.decodeIfPresent(String.self, forKey: "distribution_group_id")
    self.destinationType = try values.decodeIfPresent(DestinationType.self, forKey: "destination_type")
    self.isLatest = try values.decodeIfPresent(Bool.self, forKey: "is_latest")
    self.isMandatoryUpdate = try values.decodeIfPresent(Bool.self, forKey: "mandatory_update")
    self.publishingStatus = try values.decodeIfPresent(String.self, forKey: "publishing_status")
    self.isExternalBuild = try values.decodeIfPresent(Bool.self, forKey: "is_external_build")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(id, forKey: "id")
    try values.encodeIfPresent(version, forKey: "version")
    try values.encodeIfPresent(origin, forKey: "origin")
    try values.encodeIfPresent(shortVersion, forKey: "short_version")
    try values.encodeIfPresent(uploadedAt, forKey: "uploaded_at")
    try values.encodeIfPresent(distributionGroupID, forKey: "distribution_group_id")
    try values.encodeIfPresent(destinationType, forKey: "destination_type")
    try values.encodeIfPresent(isLatest, forKey: "is_latest")
    try values.encodeIfPresent(isMandatoryUpdate, forKey: "mandatory_update")
    try values.encodeIfPresent(publishingStatus, forKey: "publishing_status")
    try values.encodeIfPresent(isExternalBuild, forKey: "is_external_build")
  }
}
