// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Report data for a single test (a.k.a. scenario)
public struct PerformanceReport: Codable {
  public var deviceSnapshotID: String?
  public var performanceData: PerformanceData?
  public var video: Video?

  public struct PerformanceData: Codable, Identifiable {
    public var steps: [Step]
    public var elapsedSecsEnd: Double
    public var elapsedSecsStart: Double
    public var elapsedSecs: Double
    public var id: String

    public struct Step: Codable, Identifiable {
      public var avgCpu: Double?
      public var avgMem: Double?
      public var samples: [Sample]?
      public var elapsedSecsEnd: Double?
      public var elapsedSecsStart: Double?
      public var elapsedSecs: Double?
      public var name: String?
      public var id: String?

      public struct Sample: Codable {
        public var cpu: Double?
        public var mem: Double?
        public var elapsedSecs: Double?

        public init(cpu: Double? = nil, mem: Double? = nil, elapsedSecs: Double? = nil) {
          self.cpu = cpu
          self.mem = mem
          self.elapsedSecs = elapsedSecs
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.cpu = try values.decodeIfPresent(Double.self, forKey: "cpu")
          self.mem = try values.decodeIfPresent(Double.self, forKey: "mem")
          self.elapsedSecs = try values.decodeIfPresent(Double.self, forKey: "elapsed-secs")
        }

        public func encode(to encoder: Encoder) throws {
          var values = encoder.container(keyedBy: StringCodingKey.self)
          try values.encodeIfPresent(cpu, forKey: "cpu")
          try values.encodeIfPresent(mem, forKey: "mem")
          try values.encodeIfPresent(elapsedSecs, forKey: "elapsed-secs")
        }
      }

      public init(avgCpu: Double? = nil, avgMem: Double? = nil, samples: [Sample]? = nil, elapsedSecsEnd: Double? = nil, elapsedSecsStart: Double? = nil, elapsedSecs: Double? = nil, name: String? = nil, id: String? = nil) {
        self.avgCpu = avgCpu
        self.avgMem = avgMem
        self.samples = samples
        self.elapsedSecsEnd = elapsedSecsEnd
        self.elapsedSecsStart = elapsedSecsStart
        self.elapsedSecs = elapsedSecs
        self.name = name
        self.id = id
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.avgCpu = try values.decodeIfPresent(Double.self, forKey: "avg-cpu")
        self.avgMem = try values.decodeIfPresent(Double.self, forKey: "avg-mem")
        self.samples = try values.decodeIfPresent([Sample].self, forKey: "samples")
        self.elapsedSecsEnd = try values.decodeIfPresent(Double.self, forKey: "elapsed-secs-end")
        self.elapsedSecsStart = try values.decodeIfPresent(Double.self, forKey: "elapsed-secs-start")
        self.elapsedSecs = try values.decodeIfPresent(Double.self, forKey: "elapsed-secs")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(avgCpu, forKey: "avg-cpu")
        try values.encodeIfPresent(avgMem, forKey: "avg-mem")
        try values.encodeIfPresent(samples, forKey: "samples")
        try values.encodeIfPresent(elapsedSecsEnd, forKey: "elapsed-secs-end")
        try values.encodeIfPresent(elapsedSecsStart, forKey: "elapsed-secs-start")
        try values.encodeIfPresent(elapsedSecs, forKey: "elapsed-secs")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(id, forKey: "id")
      }
    }

    public init(steps: [Step], elapsedSecsEnd: Double, elapsedSecsStart: Double, elapsedSecs: Double, id: String) {
      self.steps = steps
      self.elapsedSecsEnd = elapsedSecsEnd
      self.elapsedSecsStart = elapsedSecsStart
      self.elapsedSecs = elapsedSecs
      self.id = id
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.steps = try values.decode([Step].self, forKey: "steps")
      self.elapsedSecsEnd = try values.decode(Double.self, forKey: "elapsed-secs-end")
      self.elapsedSecsStart = try values.decode(Double.self, forKey: "elapsed-secs-start")
      self.elapsedSecs = try values.decode(Double.self, forKey: "elapsed-secs")
      self.id = try values.decode(String.self, forKey: "id")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(steps, forKey: "steps")
      try values.encode(elapsedSecsEnd, forKey: "elapsed-secs-end")
      try values.encode(elapsedSecsStart, forKey: "elapsed-secs-start")
      try values.encode(elapsedSecs, forKey: "elapsed-secs")
      try values.encode(id, forKey: "id")
    }
  }

  public struct Video: Codable {
    public var videoMetadata: VideoMetadata
    public var videoURL: String

    public struct VideoMetadata: Codable {
      public var events: [Event]?

      public struct Event: Codable, Identifiable {
        public var id: String?
        public var millis: Double?
        public var name: String?
        public var type: String?

        public init(id: String? = nil, millis: Double? = nil, name: String? = nil, type: String? = nil) {
          self.id = id
          self.millis = millis
          self.name = name
          self.type = type
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.id = try values.decodeIfPresent(String.self, forKey: "id")
          self.millis = try values.decodeIfPresent(Double.self, forKey: "millis")
          self.name = try values.decodeIfPresent(String.self, forKey: "name")
          self.type = try values.decodeIfPresent(String.self, forKey: "type")
        }

        public func encode(to encoder: Encoder) throws {
          var values = encoder.container(keyedBy: StringCodingKey.self)
          try values.encodeIfPresent(id, forKey: "id")
          try values.encodeIfPresent(millis, forKey: "millis")
          try values.encodeIfPresent(name, forKey: "name")
          try values.encodeIfPresent(type, forKey: "type")
        }
      }

      public init(events: [Event]? = nil) {
        self.events = events
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.events = try values.decodeIfPresent([Event].self, forKey: "events")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(events, forKey: "events")
      }
    }

    public init(videoMetadata: VideoMetadata, videoURL: String) {
      self.videoMetadata = videoMetadata
      self.videoURL = videoURL
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.videoMetadata = try values.decode(VideoMetadata.self, forKey: "video_metadata")
      self.videoURL = try values.decode(String.self, forKey: "video_url")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(videoMetadata, forKey: "video_metadata")
      try values.encode(videoURL, forKey: "video_url")
    }
  }

  public init(deviceSnapshotID: String? = nil, performanceData: PerformanceData? = nil, video: Video? = nil) {
    self.deviceSnapshotID = deviceSnapshotID
    self.performanceData = performanceData
    self.video = video
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.deviceSnapshotID = try values.decodeIfPresent(String.self, forKey: "device_snapshot_id")
    self.performanceData = try values.decodeIfPresent(PerformanceData.self, forKey: "performance_data")
    self.video = try values.decodeIfPresent(Video.self, forKey: "video")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(deviceSnapshotID, forKey: "device_snapshot_id")
    try values.encodeIfPresent(performanceData, forKey: "performance_data")
    try values.encodeIfPresent(video, forKey: "video")
  }
}
