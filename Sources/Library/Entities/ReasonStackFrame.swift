// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Frame belonging to the reason of the crash
public struct ReasonStackFrame: Codable {
  /// Name of the class
  public var className: String?
  /// Name of the method
  public var method: String?
  /// Is a class method
  public var isClassMethod: Bool?
  /// Name of the file
  public var file: String?
  /// Line number
  public var line: Int?
  /// This line isn't from any framework
  public var isAppCode: Bool?
  /// Name of the framework
  public var frameworkName: String?
  /// Formatted frame string
  public var codeFormatted: String?
  /// Unformatted Frame string
  public var codeRaw: String?
  /// Programming language of the frame
  public var language: Language?
  /// Parameters of the frames method
  public var methodParams: String?
  /// Exception type.
  public var exceptionType: String?
  /// OS exception type. (aka. SIGNAL)
  public var osExceptionType: String?

  /// Programming language of the frame
  public enum Language: String, Codable, CaseIterable {
    case javaScript = "JavaScript"
    case cSharp = "CSharp"
    case objectiveC = "Objective-C"
    case objectiveCpp = "Objective-Cpp"
    case cpp = "Cpp"
    case c = "C"
    case swift = "Swift"
    case java = "Java"
    case unknown = "Unknown"
  }

  public init(className: String? = nil, method: String? = nil, isClassMethod: Bool? = nil, file: String? = nil, line: Int? = nil, isAppCode: Bool? = nil, frameworkName: String? = nil, codeFormatted: String? = nil, codeRaw: String? = nil, language: Language? = nil, methodParams: String? = nil, exceptionType: String? = nil, osExceptionType: String? = nil) {
    self.className = className
    self.method = method
    self.isClassMethod = isClassMethod
    self.file = file
    self.line = line
    self.isAppCode = isAppCode
    self.frameworkName = frameworkName
    self.codeFormatted = codeFormatted
    self.codeRaw = codeRaw
    self.language = language
    self.methodParams = methodParams
    self.exceptionType = exceptionType
    self.osExceptionType = osExceptionType
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.className = try values.decodeIfPresent(String.self, forKey: "class_name")
    self.method = try values.decodeIfPresent(String.self, forKey: "method")
    self.isClassMethod = try values.decodeIfPresent(Bool.self, forKey: "class_method")
    self.file = try values.decodeIfPresent(String.self, forKey: "file")
    self.line = try values.decodeIfPresent(Int.self, forKey: "line")
    self.isAppCode = try values.decodeIfPresent(Bool.self, forKey: "app_code")
    self.frameworkName = try values.decodeIfPresent(String.self, forKey: "framework_name")
    self.codeFormatted = try values.decodeIfPresent(String.self, forKey: "code_formatted")
    self.codeRaw = try values.decodeIfPresent(String.self, forKey: "code_raw")
    self.language = try values.decodeIfPresent(Language.self, forKey: "language")
    self.methodParams = try values.decodeIfPresent(String.self, forKey: "method_params")
    self.exceptionType = try values.decodeIfPresent(String.self, forKey: "exception_type")
    self.osExceptionType = try values.decodeIfPresent(String.self, forKey: "os_exception_type")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(className, forKey: "class_name")
    try values.encodeIfPresent(method, forKey: "method")
    try values.encodeIfPresent(isClassMethod, forKey: "class_method")
    try values.encodeIfPresent(file, forKey: "file")
    try values.encodeIfPresent(line, forKey: "line")
    try values.encodeIfPresent(isAppCode, forKey: "app_code")
    try values.encodeIfPresent(frameworkName, forKey: "framework_name")
    try values.encodeIfPresent(codeFormatted, forKey: "code_formatted")
    try values.encodeIfPresent(codeRaw, forKey: "code_raw")
    try values.encodeIfPresent(language, forKey: "language")
    try values.encodeIfPresent(methodParams, forKey: "method_params")
    try values.encodeIfPresent(exceptionType, forKey: "exception_type")
    try values.encodeIfPresent(osExceptionType, forKey: "os_exception_type")
  }
}
