// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// List of alerting webhooks wrapped as operation result
public struct AlertWebhookListResult: Codable {
  public var values: [Value]

  /// Alerting webhook
  public struct Value: Codable, Identifiable {
    /// The unique id (UUID) of the webhook
    public var id: String?
    /// Display name of the webhook
    public var name: String
    /// Target url of the webhook
    public var url: String
    /// Allows eanble/disable webhook
    public var isEnabled: Bool?
    /// Event types enabled for webhook
    public var eventTypes: [EventType]

    /// Alerting EventTypes enum
    public enum EventType: String, Codable, CaseIterable {
      case newCrashGroupCreated
      case newAppReleased
    }

    public init(id: String? = nil, name: String, url: String, isEnabled: Bool? = nil, eventTypes: [EventType]) {
      self.id = id
      self.name = name
      self.url = url
      self.isEnabled = isEnabled
      self.eventTypes = eventTypes
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.id = try values.decodeIfPresent(String.self, forKey: "id")
      self.name = try values.decode(String.self, forKey: "name")
      self.url = try values.decode(String.self, forKey: "url")
      self.isEnabled = try values.decodeIfPresent(Bool.self, forKey: "enabled")
      self.eventTypes = try values.decode([EventType].self, forKey: "event_types")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(id, forKey: "id")
      try values.encode(name, forKey: "name")
      try values.encode(url, forKey: "url")
      try values.encodeIfPresent(isEnabled, forKey: "enabled")
      try values.encode(eventTypes, forKey: "event_types")
    }
  }

  public init(values: [Value]) {
    self.values = values
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.values = try values.decode([Value].self, forKey: "values")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(self.values, forKey: "values")
  }
}
