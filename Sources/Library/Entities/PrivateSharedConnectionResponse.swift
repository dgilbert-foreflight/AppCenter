// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// PrivateSharedConnectionResponse
public struct PrivateSharedConnectionResponse: Codable, Identifiable {
  /// Id of the shared connection
  public var id: String
  /// Display name of shared connection
  public var displayName: String?
  /// Service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate
  public var serviceType: ServiceType
  /// Whether the credentials are valid or not
  public var isValid: Bool?
  /// If the account is a 2FA account or not
  public var isIs2FA: Bool?

  /// Service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate
  public enum ServiceType: String, Codable, CaseIterable {
    case apple
    case jira
    case googleplay
    case gitlab
  }

  public init(id: String, displayName: String? = nil, serviceType: ServiceType, isValid: Bool? = nil, isIs2FA: Bool? = nil) {
    self.id = id
    self.displayName = displayName
    self.serviceType = serviceType
    self.isValid = isValid
    self.isIs2FA = isIs2FA
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decode(String.self, forKey: "id")
    self.displayName = try values.decodeIfPresent(String.self, forKey: "displayName")
    self.serviceType = try values.decode(ServiceType.self, forKey: "serviceType")
    self.isValid = try values.decodeIfPresent(Bool.self, forKey: "isValid")
    self.isIs2FA = try values.decodeIfPresent(Bool.self, forKey: "is2FA")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(id, forKey: "id")
    try values.encodeIfPresent(displayName, forKey: "displayName")
    try values.encode(serviceType, forKey: "serviceType")
    try values.encodeIfPresent(isValid, forKey: "isValid")
    try values.encodeIfPresent(isIs2FA, forKey: "is2FA")
  }
}
