// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct OrganizationInvitationDetailResponse: Codable, Identifiable {
  /// The unique ID (UUID) of the invitation
  public var id: UUID
  public var organization: Organization
  /// The email address of the invited user
  public var email: String
  public var invitedBy: InvitedBy
  /// Indicates whether the invited user already exists
  public var isExistingUser: Bool
  /// The role assigned to the invited user
  public var role: String?

  public struct Organization: Codable, Identifiable {
    /// The internal unique id (UUID) of the organization.
    public var id: UUID
    /// The display name of the organization
    public var displayName: String
    /// The slug name of the organization
    public var name: String
    /// The URL to a user-uploaded Avatar image
    public var avatarURL: String?
    /// The creation origin of this organization
    public var origin: Origin
    /// The creation date of this organization
    public var createdAt: String
    /// The date the organization was last updated at
    public var updatedAt: String

    /// The creation origin of this organization
    public enum Origin: String, Codable, CaseIterable {
      case appcenter
      case hockeyapp
    }

    public init(id: UUID, displayName: String, name: String, avatarURL: String? = nil, origin: Origin, createdAt: String, updatedAt: String) {
      self.id = id
      self.displayName = displayName
      self.name = name
      self.avatarURL = avatarURL
      self.origin = origin
      self.createdAt = createdAt
      self.updatedAt = updatedAt
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.id = try values.decode(UUID.self, forKey: "id")
      self.displayName = try values.decode(String.self, forKey: "display_name")
      self.name = try values.decode(String.self, forKey: "name")
      self.avatarURL = try values.decodeIfPresent(String.self, forKey: "avatar_url")
      self.origin = try values.decode(Origin.self, forKey: "origin")
      self.createdAt = try values.decode(String.self, forKey: "created_at")
      self.updatedAt = try values.decode(String.self, forKey: "updated_at")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(id, forKey: "id")
      try values.encode(displayName, forKey: "display_name")
      try values.encode(name, forKey: "name")
      try values.encodeIfPresent(avatarURL, forKey: "avatar_url")
      try values.encode(origin, forKey: "origin")
      try values.encode(createdAt, forKey: "created_at")
      try values.encode(updatedAt, forKey: "updated_at")
    }
  }

  public struct InvitedBy: Codable, Identifiable {
    /// The unique id (UUID) of the user
    public var id: UUID
    /// The avatar URL of the user
    public var avatarURL: String?
    /// User is required to send an old password in order to change the password.
    public var canChangePassword: Bool?
    /// The full name of the user. Might for example be first and last name
    public var displayName: String
    /// The email address of the user
    public var email: String
    /// The unique name that is used to identify the user.
    public var name: String
    /// The permissions the user has for the app
    public var permissions: [Permission]?
    /// The creation origin of this user
    public var origin: Origin

    public enum Permission: String, Codable, CaseIterable {
      case manager
      case developer
      case viewer
      case tester
    }

    /// The creation origin of this user
    public enum Origin: String, Codable, CaseIterable {
      case appcenter
      case hockeyapp
      case codepush
    }

    public init(id: UUID, avatarURL: String? = nil, canChangePassword: Bool? = nil, displayName: String, email: String, name: String, permissions: [Permission]? = nil, origin: Origin) {
      self.id = id
      self.avatarURL = avatarURL
      self.canChangePassword = canChangePassword
      self.displayName = displayName
      self.email = email
      self.name = name
      self.permissions = permissions
      self.origin = origin
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.id = try values.decode(UUID.self, forKey: "id")
      self.avatarURL = try values.decodeIfPresent(String.self, forKey: "avatar_url")
      self.canChangePassword = try values.decodeIfPresent(Bool.self, forKey: "can_change_password")
      self.displayName = try values.decode(String.self, forKey: "display_name")
      self.email = try values.decode(String.self, forKey: "email")
      self.name = try values.decode(String.self, forKey: "name")
      self.permissions = try values.decodeIfPresent([Permission].self, forKey: "permissions")
      self.origin = try values.decode(Origin.self, forKey: "origin")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(id, forKey: "id")
      try values.encodeIfPresent(avatarURL, forKey: "avatar_url")
      try values.encodeIfPresent(canChangePassword, forKey: "can_change_password")
      try values.encode(displayName, forKey: "display_name")
      try values.encode(email, forKey: "email")
      try values.encode(name, forKey: "name")
      try values.encodeIfPresent(permissions, forKey: "permissions")
      try values.encode(origin, forKey: "origin")
    }
  }

  public init(id: UUID, organization: Organization, email: String, invitedBy: InvitedBy, isExistingUser: Bool, role: String? = nil) {
    self.id = id
    self.organization = organization
    self.email = email
    self.invitedBy = invitedBy
    self.isExistingUser = isExistingUser
    self.role = role
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decode(UUID.self, forKey: "id")
    self.organization = try values.decode(Organization.self, forKey: "organization")
    self.email = try values.decode(String.self, forKey: "email")
    self.invitedBy = try values.decode(InvitedBy.self, forKey: "invited_by")
    self.isExistingUser = try values.decode(Bool.self, forKey: "is_existing_user")
    self.role = try values.decodeIfPresent(String.self, forKey: "role")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(id, forKey: "id")
    try values.encode(organization, forKey: "organization")
    try values.encode(email, forKey: "email")
    try values.encode(invitedBy, forKey: "invited_by")
    try values.encode(isExistingUser, forKey: "is_existing_user")
    try values.encodeIfPresent(role, forKey: "role")
  }
}
