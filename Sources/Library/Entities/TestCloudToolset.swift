// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct TestCloudToolset: Codable {
  /// The TestCloud projects detected
  public var projects: [Project]

  public struct Project: Codable {
    /// The path to the TestCloud project
    public var path: String
    public var frameworkType: FrameworkType
    public var frameworkProperties: FrameworkProperties?

    public enum FrameworkType: String, Codable, CaseIterable {
      case appium = "Appium"
      case calabash = "Calabash"
      case espresso = "Espresso"
      case uITest = "UITest"
      case generated = "Generated"
    }

    public struct FrameworkProperties: Codable {
      public var configurations: [String]?

      public init(configurations: [String]? = nil) {
        self.configurations = configurations
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.configurations = try values.decodeIfPresent([String].self, forKey: "configurations")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(configurations, forKey: "configurations")
      }
    }

    public init(path: String, frameworkType: FrameworkType, frameworkProperties: FrameworkProperties? = nil) {
      self.path = path
      self.frameworkType = frameworkType
      self.frameworkProperties = frameworkProperties
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.path = try values.decode(String.self, forKey: "path")
      self.frameworkType = try values.decode(FrameworkType.self, forKey: "frameworkType")
      self.frameworkProperties = try values.decodeIfPresent(FrameworkProperties.self, forKey: "frameworkProperties")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(path, forKey: "path")
      try values.encode(frameworkType, forKey: "frameworkType")
      try values.encodeIfPresent(frameworkProperties, forKey: "frameworkProperties")
    }
  }

  public init(projects: [Project]) {
    self.projects = projects
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.projects = try values.decode([Project].self, forKey: "projects")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(projects, forKey: "projects")
  }
}
