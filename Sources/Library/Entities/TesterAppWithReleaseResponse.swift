// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct TesterAppWithReleaseResponse: Codable, Identifiable {
  /// The unique ID (UUID) of the app
  public var id: String?
  public var release: Release?
  /// The app's name.
  public var name: String?
  /// The app's display name.
  public var displayName: String?
  /// The description of the app
  public var description: String?
  /// A URL to the app's icon.
  public var iconURL: String?
  /// The app's os.
  public var os: String?
  /// The information about the app's owner
  public var owner: Owner?

  public struct Release: Codable, Identifiable {
    /// ID identifying this unique release.
    public var id: Int
    /// The release's version.<br>
    /// For iOS: CFBundleVersion from info.plist.<br>
    /// For Android: android:versionCode from AppManifest.xml.
    public var version: String
    /// The release's origin
    public var origin: Origin?
    /// The release's short version.<br>
    /// For iOS: CFBundleShortVersionString from info.plist.<br>
    /// For Android: android:versionName from AppManifest.xml.
    public var shortVersion: String
    /// A boolean which determines whether the release is a mandatory update or not.
    public var isMandatoryUpdate: Bool
    /// UTC time in ISO 8601 format of the uploaded time.
    public var uploadedAt: String
    /// This value determines the whether a release currently is enabled or disabled.
    public var isEnabled: Bool
    /// This value determines if a release is external or not.
    public var isExternalBuild: Bool?
    /// The release's size in bytes.
    public var size: Int
    /// The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`
    public var installURL: String?
    /// The release's release notes.
    public var releaseNotes: String?

    /// The release's origin
    public enum Origin: String, Codable, CaseIterable {
      case hockeyapp
      case appcenter
    }

    public init(id: Int, version: String, origin: Origin? = nil, shortVersion: String, isMandatoryUpdate: Bool, uploadedAt: String, isEnabled: Bool, isExternalBuild: Bool? = nil, size: Int, installURL: String? = nil, releaseNotes: String? = nil) {
      self.id = id
      self.version = version
      self.origin = origin
      self.shortVersion = shortVersion
      self.isMandatoryUpdate = isMandatoryUpdate
      self.uploadedAt = uploadedAt
      self.isEnabled = isEnabled
      self.isExternalBuild = isExternalBuild
      self.size = size
      self.installURL = installURL
      self.releaseNotes = releaseNotes
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.id = try values.decode(Int.self, forKey: "id")
      self.version = try values.decode(String.self, forKey: "version")
      self.origin = try values.decodeIfPresent(Origin.self, forKey: "origin")
      self.shortVersion = try values.decode(String.self, forKey: "short_version")
      self.isMandatoryUpdate = try values.decode(Bool.self, forKey: "mandatory_update")
      self.uploadedAt = try values.decode(String.self, forKey: "uploaded_at")
      self.isEnabled = try values.decode(Bool.self, forKey: "enabled")
      self.isExternalBuild = try values.decodeIfPresent(Bool.self, forKey: "is_external_build")
      self.size = try values.decode(Int.self, forKey: "size")
      self.installURL = try values.decodeIfPresent(String.self, forKey: "install_url")
      self.releaseNotes = try values.decodeIfPresent(String.self, forKey: "release_notes")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(id, forKey: "id")
      try values.encode(version, forKey: "version")
      try values.encodeIfPresent(origin, forKey: "origin")
      try values.encode(shortVersion, forKey: "short_version")
      try values.encode(isMandatoryUpdate, forKey: "mandatory_update")
      try values.encode(uploadedAt, forKey: "uploaded_at")
      try values.encode(isEnabled, forKey: "enabled")
      try values.encodeIfPresent(isExternalBuild, forKey: "is_external_build")
      try values.encode(size, forKey: "size")
      try values.encodeIfPresent(installURL, forKey: "install_url")
      try values.encodeIfPresent(releaseNotes, forKey: "release_notes")
    }
  }

  /// The information about the app's owner
  public struct Owner: Codable, Identifiable {
    /// The unique id (UUID) of the owner
    public var id: String?
    /// The avatar URL of the owner
    public var avatarURL: String?
    /// The owner's display name
    public var displayName: String?
    /// The owner's email address
    public var email: String?
    /// The unique name that used to identify the owner
    public var name: String?
    /// The owner type. Can either be 'org' or 'user'
    public var type: `Type`?

    /// The owner type. Can either be 'org' or 'user'
    public enum `Type`: String, Codable, CaseIterable {
      case org
      case user
    }

    public init(id: String? = nil, avatarURL: String? = nil, displayName: String? = nil, email: String? = nil, name: String? = nil, type: `Type`? = nil) {
      self.id = id
      self.avatarURL = avatarURL
      self.displayName = displayName
      self.email = email
      self.name = name
      self.type = type
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.id = try values.decodeIfPresent(String.self, forKey: "id")
      self.avatarURL = try values.decodeIfPresent(String.self, forKey: "avatar_url")
      self.displayName = try values.decodeIfPresent(String.self, forKey: "display_name")
      self.email = try values.decodeIfPresent(String.self, forKey: "email")
      self.name = try values.decodeIfPresent(String.self, forKey: "name")
      self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(id, forKey: "id")
      try values.encodeIfPresent(avatarURL, forKey: "avatar_url")
      try values.encodeIfPresent(displayName, forKey: "display_name")
      try values.encodeIfPresent(email, forKey: "email")
      try values.encodeIfPresent(name, forKey: "name")
      try values.encodeIfPresent(type, forKey: "type")
    }
  }

  public init(id: String? = nil, release: Release? = nil, name: String? = nil, displayName: String? = nil, description: String? = nil, iconURL: String? = nil, os: String? = nil, owner: Owner? = nil) {
    self.id = id
    self.release = release
    self.name = name
    self.displayName = displayName
    self.description = description
    self.iconURL = iconURL
    self.os = os
    self.owner = owner
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decodeIfPresent(String.self, forKey: "id")
    self.release = try values.decodeIfPresent(Release.self, forKey: "release")
    self.name = try values.decodeIfPresent(String.self, forKey: "name")
    self.displayName = try values.decodeIfPresent(String.self, forKey: "display_name")
    self.description = try values.decodeIfPresent(String.self, forKey: "description")
    self.iconURL = try values.decodeIfPresent(String.self, forKey: "icon_url")
    self.os = try values.decodeIfPresent(String.self, forKey: "os")
    self.owner = try values.decodeIfPresent(Owner.self, forKey: "owner")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(id, forKey: "id")
    try values.encodeIfPresent(release, forKey: "release")
    try values.encodeIfPresent(name, forKey: "name")
    try values.encodeIfPresent(displayName, forKey: "display_name")
    try values.encodeIfPresent(description, forKey: "description")
    try values.encodeIfPresent(iconURL, forKey: "icon_url")
    try values.encodeIfPresent(os, forKey: "os")
    try values.encodeIfPresent(owner, forKey: "owner")
  }
}
