// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct HockeyAppCompatibilityReleaseResponse: Codable, Identifiable {
  public var id: Int?
  public var shortversion: String?
  public var version: String?
  public var uploadedAt: String?
  public var appsize: Int?
  public var notes: String?
  public var isMandatory: Bool?
  public var isExternal: Bool?
  public var deviceFamily: String?
  public var minimumOsVersion: String?
  public var installURL: String?
  public var bundleIdentifier: String?

  public init(id: Int? = nil, shortversion: String? = nil, version: String? = nil, uploadedAt: String? = nil, appsize: Int? = nil, notes: String? = nil, isMandatory: Bool? = nil, isExternal: Bool? = nil, deviceFamily: String? = nil, minimumOsVersion: String? = nil, installURL: String? = nil, bundleIdentifier: String? = nil) {
    self.id = id
    self.shortversion = shortversion
    self.version = version
    self.uploadedAt = uploadedAt
    self.appsize = appsize
    self.notes = notes
    self.isMandatory = isMandatory
    self.isExternal = isExternal
    self.deviceFamily = deviceFamily
    self.minimumOsVersion = minimumOsVersion
    self.installURL = installURL
    self.bundleIdentifier = bundleIdentifier
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decodeIfPresent(Int.self, forKey: "id")
    self.shortversion = try values.decodeIfPresent(String.self, forKey: "shortversion")
    self.version = try values.decodeIfPresent(String.self, forKey: "version")
    self.uploadedAt = try values.decodeIfPresent(String.self, forKey: "uploaded_at")
    self.appsize = try values.decodeIfPresent(Int.self, forKey: "appsize")
    self.notes = try values.decodeIfPresent(String.self, forKey: "notes")
    self.isMandatory = try values.decodeIfPresent(Bool.self, forKey: "mandatory")
    self.isExternal = try values.decodeIfPresent(Bool.self, forKey: "external")
    self.deviceFamily = try values.decodeIfPresent(String.self, forKey: "device_family")
    self.minimumOsVersion = try values.decodeIfPresent(String.self, forKey: "minimum_os_version")
    self.installURL = try values.decodeIfPresent(String.self, forKey: "install_url")
    self.bundleIdentifier = try values.decodeIfPresent(String.self, forKey: "bundle_identifier")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(id, forKey: "id")
    try values.encodeIfPresent(shortversion, forKey: "shortversion")
    try values.encodeIfPresent(version, forKey: "version")
    try values.encodeIfPresent(uploadedAt, forKey: "uploaded_at")
    try values.encodeIfPresent(appsize, forKey: "appsize")
    try values.encodeIfPresent(notes, forKey: "notes")
    try values.encodeIfPresent(isMandatory, forKey: "mandatory")
    try values.encodeIfPresent(isExternal, forKey: "external")
    try values.encodeIfPresent(deviceFamily, forKey: "device_family")
    try values.encodeIfPresent(minimumOsVersion, forKey: "minimum_os_version")
    try values.encodeIfPresent(installURL, forKey: "install_url")
    try values.encodeIfPresent(bundleIdentifier, forKey: "bundle_identifier")
  }
}
