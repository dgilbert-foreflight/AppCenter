// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct UserProfileResponseInternal: Codable, Identifiable {
  /// The unique id (UUID) of the user
  public var id: UUID
  /// The avatar URL of the user
  public var avatarURL: String?
  /// User is required to send an old password in order to change the password.
  public var canChangePassword: Bool?
  /// The full name of the user. Might for example be first and last name
  public var displayName: String
  /// The email address of the user
  public var email: String
  /// The unique name that is used to identify the user.
  public var name: String
  /// The permissions the user has for the app
  public var permissions: [Permission]?
  /// The creation origin of this user
  public var origin: Origin
  /// The feature flags that are enabled for this app
  public var featureFlags: [String]?
  /// The new admin_role
  public var adminRole: AdminRole?
  /// The user's settings
  public var settings: Settings?

  public enum Permission: String, Codable, CaseIterable {
    case manager
    case developer
    case viewer
    case tester
  }

  /// The creation origin of this user
  public enum Origin: String, Codable, CaseIterable {
    case appcenter
    case hockeyapp
    case codepush
  }

  /// The new admin_role
  public enum AdminRole: String, Codable, CaseIterable {
    case superAdmin
    case admin
    case devOps
    case customerSupport
    case notAdmin
  }

  /// The user's settings
  public struct Settings: Codable {
    /// The marketing opt-in setting
    public var marketingOptIn: String?

    public init(marketingOptIn: String? = nil) {
      self.marketingOptIn = marketingOptIn
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.marketingOptIn = try values.decodeIfPresent(String.self, forKey: "marketing_opt_in")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(marketingOptIn, forKey: "marketing_opt_in")
    }
  }

  public init(id: UUID, avatarURL: String? = nil, canChangePassword: Bool? = nil, displayName: String, email: String, name: String, permissions: [Permission]? = nil, origin: Origin, featureFlags: [String]? = nil, adminRole: AdminRole? = nil, settings: Settings? = nil) {
    self.id = id
    self.avatarURL = avatarURL
    self.canChangePassword = canChangePassword
    self.displayName = displayName
    self.email = email
    self.name = name
    self.permissions = permissions
    self.origin = origin
    self.featureFlags = featureFlags
    self.adminRole = adminRole
    self.settings = settings
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decode(UUID.self, forKey: "id")
    self.avatarURL = try values.decodeIfPresent(String.self, forKey: "avatar_url")
    self.canChangePassword = try values.decodeIfPresent(Bool.self, forKey: "can_change_password")
    self.displayName = try values.decode(String.self, forKey: "display_name")
    self.email = try values.decode(String.self, forKey: "email")
    self.name = try values.decode(String.self, forKey: "name")
    self.permissions = try values.decodeIfPresent([Permission].self, forKey: "permissions")
    self.origin = try values.decode(Origin.self, forKey: "origin")
    self.featureFlags = try values.decodeIfPresent([String].self, forKey: "feature_flags")
    self.adminRole = try values.decodeIfPresent(AdminRole.self, forKey: "admin_role")
    self.settings = try values.decodeIfPresent(Settings.self, forKey: "settings")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(id, forKey: "id")
    try values.encodeIfPresent(avatarURL, forKey: "avatar_url")
    try values.encodeIfPresent(canChangePassword, forKey: "can_change_password")
    try values.encode(displayName, forKey: "display_name")
    try values.encode(email, forKey: "email")
    try values.encode(name, forKey: "name")
    try values.encodeIfPresent(permissions, forKey: "permissions")
    try values.encode(origin, forKey: "origin")
    try values.encodeIfPresent(featureFlags, forKey: "feature_flags")
    try values.encodeIfPresent(adminRole, forKey: "admin_role")
    try values.encodeIfPresent(settings, forKey: "settings")
  }
}
