// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// VSTS project
public struct VSTSProject: Codable, Identifiable {
  /// Project id
  public var id: String?
  /// Project name
  public var name: String?
  /// Project description
  public var description: String?
  /// Project URL
  public var url: String?
  /// Project state
  public var state: String?
  /// Project visibility
  public var visibility: String?

  public init(id: String? = nil, name: String? = nil, description: String? = nil, url: String? = nil, state: String? = nil, visibility: String? = nil) {
    self.id = id
    self.name = name
    self.description = description
    self.url = url
    self.state = state
    self.visibility = visibility
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decodeIfPresent(String.self, forKey: "id")
    self.name = try values.decodeIfPresent(String.self, forKey: "name")
    self.description = try values.decodeIfPresent(String.self, forKey: "description")
    self.url = try values.decodeIfPresent(String.self, forKey: "url")
    self.state = try values.decodeIfPresent(String.self, forKey: "state")
    self.visibility = try values.decodeIfPresent(String.self, forKey: "visibility")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(id, forKey: "id")
    try values.encodeIfPresent(name, forKey: "name")
    try values.encodeIfPresent(description, forKey: "description")
    try values.encodeIfPresent(url, forKey: "url")
    try values.encodeIfPresent(state, forKey: "state")
    try values.encodeIfPresent(visibility, forKey: "visibility")
  }
}
