// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// The lite version of GitHub pull request
public struct GitHubPullRequestLite: Codable {
  /// The lite version of GitHub branch
  public var head: Head?
  /// The lite version of GitHub branch
  public var base: Base?

  /// The lite version of GitHub branch
  public struct Head: Codable {
    /// The repository name
    public var ref: String?
    /// The discription of repository
    public var sha: String?
    /// The lite version of GitHub repository
    public var repo: Repo?

    /// The lite version of GitHub repository
    public struct Repo: Codable, Identifiable {
      /// The repository id
      public var id: Double?

      public init(id: Double? = nil) {
        self.id = id
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(Double.self, forKey: "id")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
      }
    }

    public init(ref: String? = nil, sha: String? = nil, repo: Repo? = nil) {
      self.ref = ref
      self.sha = sha
      self.repo = repo
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.ref = try values.decodeIfPresent(String.self, forKey: "ref")
      self.sha = try values.decodeIfPresent(String.self, forKey: "sha")
      self.repo = try values.decodeIfPresent(Repo.self, forKey: "repo")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(ref, forKey: "ref")
      try values.encodeIfPresent(sha, forKey: "sha")
      try values.encodeIfPresent(repo, forKey: "repo")
    }
  }

  /// The lite version of GitHub branch
  public struct Base: Codable {
    /// The repository name
    public var ref: String?
    /// The discription of repository
    public var sha: String?
    /// The lite version of GitHub repository
    public var repo: Repo?

    /// The lite version of GitHub repository
    public struct Repo: Codable, Identifiable {
      /// The repository id
      public var id: Double?

      public init(id: Double? = nil) {
        self.id = id
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(Double.self, forKey: "id")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
      }
    }

    public init(ref: String? = nil, sha: String? = nil, repo: Repo? = nil) {
      self.ref = ref
      self.sha = sha
      self.repo = repo
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.ref = try values.decodeIfPresent(String.self, forKey: "ref")
      self.sha = try values.decodeIfPresent(String.self, forKey: "sha")
      self.repo = try values.decodeIfPresent(Repo.self, forKey: "repo")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(ref, forKey: "ref")
      try values.encodeIfPresent(sha, forKey: "sha")
      try values.encodeIfPresent(repo, forKey: "repo")
    }
  }

  public init(head: Head? = nil, base: Base? = nil) {
    self.head = head
    self.base = base
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.head = try values.decodeIfPresent(Head.self, forKey: "head")
    self.base = try values.decodeIfPresent(Base.self, forKey: "base")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(head, forKey: "head")
    try values.encodeIfPresent(base, forKey: "base")
  }
}
