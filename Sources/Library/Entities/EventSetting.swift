// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Event Setting
public struct EventSetting: Codable {
  /// Event Name
  public var eventType: EventType
  /// Frequency of event
  public var value: Value
  /// Default frequency of event
  public var defaultValue: DefaultValue?

  /// Event Name
  public enum EventType: String, Codable, CaseIterable {
    case crashNewCrashGroupCreated = "crash_newCrashGroupCreated"
  }

  /// Frequency of event
  public enum Value: String, Codable, CaseIterable {
    case disabled = "Disabled"
    case individual = "Individual"
    case daily = "Daily"
    case dailyAndIndividual = "DailyAndIndividual"
    case `default` = "Default"
  }

  /// Default frequency of event
  public enum DefaultValue: String, Codable, CaseIterable {
    case disabled = "Disabled"
    case individual = "Individual"
    case daily = "Daily"
    case dailyAndIndividual = "DailyAndIndividual"
  }

  public init(eventType: EventType, value: Value, defaultValue: DefaultValue? = nil) {
    self.eventType = eventType
    self.value = value
    self.defaultValue = defaultValue
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.eventType = try values.decode(EventType.self, forKey: "event_type")
    self.value = try values.decode(Value.self, forKey: "value")
    self.defaultValue = try values.decodeIfPresent(DefaultValue.self, forKey: "default_value")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(eventType, forKey: "event_type")
    try values.encode(value, forKey: "value")
    try values.encodeIfPresent(defaultValue, forKey: "default_value")
  }
}
