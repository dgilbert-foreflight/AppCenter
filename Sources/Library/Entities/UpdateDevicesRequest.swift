// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Information required to publish devices to the Apple Developer account and resign the application.
public struct UpdateDevicesRequest: Codable {
  /// When provided, will update the provided release with the new set of devices. By default the latest release of the distribution group is used when this property is omitted. If `release_id` is passed in the path, there is no need to pass in the body as well.
  public var releaseID: Double?
  /// The username for the Apple Developer account to publish the devices to.
  public var username: String?
  /// The password for the Apple Developer account to publish the devices to.
  public var password: String?
  /// The service_connection_id of the stored Apple credentials instead of username, password.
  public var accountServiceConnectionID: String?
  /// The certificate to use for resigning the application with the updated provisioning profiles.
  public var p12Base64: String?
  /// The service_connection_id of the stored Apple certificate instead of p12_base64 value.
  public var p12ServiceConnectionID: String?
  /// The password certificate if one is needed.
  public var p12Password: String?
  /// When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.
  public var isPublishAllDevices: Bool?
  /// Array of device UDID's to be published to the Apple Developer account.
  public var devices: [String]?
  /// Array of distribution groups that the devices should be provisioned from.
  public var destinations: [Destination]?

  public struct Destination: Codable {
    public var name: String?

    public init(name: String? = nil) {
      self.name = name
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.name = try values.decodeIfPresent(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(name, forKey: "name")
    }
  }

  public init(releaseID: Double? = nil, username: String? = nil, password: String? = nil, accountServiceConnectionID: String? = nil, p12Base64: String? = nil, p12ServiceConnectionID: String? = nil, p12Password: String? = nil, isPublishAllDevices: Bool? = nil, devices: [String]? = nil, destinations: [Destination]? = nil) {
    self.releaseID = releaseID
    self.username = username
    self.password = password
    self.accountServiceConnectionID = accountServiceConnectionID
    self.p12Base64 = p12Base64
    self.p12ServiceConnectionID = p12ServiceConnectionID
    self.p12Password = p12Password
    self.isPublishAllDevices = isPublishAllDevices
    self.devices = devices
    self.destinations = destinations
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.releaseID = try values.decodeIfPresent(Double.self, forKey: "release_id")
    self.username = try values.decodeIfPresent(String.self, forKey: "username")
    self.password = try values.decodeIfPresent(String.self, forKey: "password")
    self.accountServiceConnectionID = try values.decodeIfPresent(String.self, forKey: "account_service_connection_id")
    self.p12Base64 = try values.decodeIfPresent(String.self, forKey: "p12_base64")
    self.p12ServiceConnectionID = try values.decodeIfPresent(String.self, forKey: "p12_service_connection_id")
    self.p12Password = try values.decodeIfPresent(String.self, forKey: "p12_password")
    self.isPublishAllDevices = try values.decodeIfPresent(Bool.self, forKey: "publish_all_devices")
    self.devices = try values.decodeIfPresent([String].self, forKey: "devices")
    self.destinations = try values.decodeIfPresent([Destination].self, forKey: "destinations")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(releaseID, forKey: "release_id")
    try values.encodeIfPresent(username, forKey: "username")
    try values.encodeIfPresent(password, forKey: "password")
    try values.encodeIfPresent(accountServiceConnectionID, forKey: "account_service_connection_id")
    try values.encodeIfPresent(p12Base64, forKey: "p12_base64")
    try values.encodeIfPresent(p12ServiceConnectionID, forKey: "p12_service_connection_id")
    try values.encodeIfPresent(p12Password, forKey: "p12_password")
    try values.encodeIfPresent(isPublishAllDevices, forKey: "publish_all_devices")
    try values.encodeIfPresent(devices, forKey: "devices")
    try values.encodeIfPresent(destinations, forKey: "destinations")
  }
}
