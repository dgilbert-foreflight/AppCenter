// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SubmitDsrOperationRequest: Codable {
  public var request: Request?
  public var accountID: String?
  public var appID: String?
  /// The DSR operation ID provided by the GDPR coordinator. Used for tracking only.
  public var operationID: String?
  /// Request ID provided by the GDPR coordinator. Used for tracking.
  public var requestID: String?

  public enum Request: String, Codable, CaseIterable {
    case delete = "Delete"
    case purge = "Purge"
    case undoDelete = "UndoDelete"
    case export = "Export"
  }

  public init(request: Request? = nil, accountID: String? = nil, appID: String? = nil, operationID: String? = nil, requestID: String? = nil) {
    self.request = request
    self.accountID = accountID
    self.appID = appID
    self.operationID = operationID
    self.requestID = requestID
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.request = try values.decodeIfPresent(Request.self, forKey: "request")
    self.accountID = try values.decodeIfPresent(String.self, forKey: "accountId")
    self.appID = try values.decodeIfPresent(String.self, forKey: "appId")
    self.operationID = try values.decodeIfPresent(String.self, forKey: "operationId")
    self.requestID = try values.decodeIfPresent(String.self, forKey: "requestId")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(request, forKey: "request")
    try values.encodeIfPresent(accountID, forKey: "accountId")
    try values.encodeIfPresent(appID, forKey: "appId")
    try values.encodeIfPresent(operationID, forKey: "operationId")
    try values.encodeIfPresent(requestID, forKey: "requestId")
  }
}
