// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CodePushReleasePromote: Codable {
  public var targetBinaryRange: String?
  public var description: String?
  public var isDisabled: Bool?
  public var isMandatory: Bool?
  public var rollout: Int?
  public var label: String?

  public init(targetBinaryRange: String? = nil, description: String? = nil, isDisabled: Bool? = nil, isMandatory: Bool? = nil, rollout: Int? = nil, label: String? = nil) {
    self.targetBinaryRange = targetBinaryRange
    self.description = description
    self.isDisabled = isDisabled
    self.isMandatory = isMandatory
    self.rollout = rollout
    self.label = label
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.targetBinaryRange = try values.decodeIfPresent(String.self, forKey: "target_binary_range")
    self.description = try values.decodeIfPresent(String.self, forKey: "description")
    self.isDisabled = try values.decodeIfPresent(Bool.self, forKey: "is_disabled")
    self.isMandatory = try values.decodeIfPresent(Bool.self, forKey: "is_mandatory")
    self.rollout = try values.decodeIfPresent(Int.self, forKey: "rollout")
    self.label = try values.decodeIfPresent(String.self, forKey: "label")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(targetBinaryRange, forKey: "target_binary_range")
    try values.encodeIfPresent(description, forKey: "description")
    try values.encodeIfPresent(isDisabled, forKey: "is_disabled")
    try values.encodeIfPresent(isMandatory, forKey: "is_mandatory")
    try values.encodeIfPresent(rollout, forKey: "rollout")
    try values.encodeIfPresent(label, forKey: "label")
  }
}
