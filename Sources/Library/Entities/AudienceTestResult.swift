// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Audience test result.
public struct AudienceTestResult: Codable {
  /// Audience definition in OData format.
  public var definition: String?
  /// Custom properties used in the definition.
  public var customProperties: [String: CustomProperty]?
  /// Estimated audience size.
  public var estimatedCount: Int64?
  /// Estimated total audience size.
  public var estimatedTotalCount: Int64?

  public enum CustomProperty: String, Codable, CaseIterable {
    case string
    case number
    case boolean
    case dateTime = "date_time"
  }

  public init(definition: String? = nil, customProperties: [String: CustomProperty]? = nil, estimatedCount: Int64? = nil, estimatedTotalCount: Int64? = nil) {
    self.definition = definition
    self.customProperties = customProperties
    self.estimatedCount = estimatedCount
    self.estimatedTotalCount = estimatedTotalCount
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.definition = try values.decodeIfPresent(String.self, forKey: "definition")
    self.customProperties = try values.decodeIfPresent([String: CustomProperty].self, forKey: "custom_properties")
    self.estimatedCount = try values.decodeIfPresent(Int64.self, forKey: "estimated_count")
    self.estimatedTotalCount = try values.decodeIfPresent(Int64.self, forKey: "estimated_total_count")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(definition, forKey: "definition")
    try values.encodeIfPresent(customProperties, forKey: "custom_properties")
    try values.encodeIfPresent(estimatedCount, forKey: "estimated_count")
    try values.encodeIfPresent(estimatedTotalCount, forKey: "estimated_total_count")
  }
}
