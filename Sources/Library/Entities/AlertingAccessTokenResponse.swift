// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Access token details
public struct AlertingAccessTokenResponse: Codable {
  /// ID of the access token
  public var accessTokenID: String
  /// External provider name
  public var externalProviderName: ExternalProviderName
  /// The email of external user that used to authenticate aginst the external oauth provider
  public var externalUserEmail: String
  /// The account name of external user that used to authenticate against the external oauth provider or basic auth
  public var externalAccountName: String

  /// External provider name
  public enum ExternalProviderName: String, Codable, CaseIterable {
    case github
    case vsts
    case jira
  }

  public init(accessTokenID: String, externalProviderName: ExternalProviderName, externalUserEmail: String, externalAccountName: String) {
    self.accessTokenID = accessTokenID
    self.externalProviderName = externalProviderName
    self.externalUserEmail = externalUserEmail
    self.externalAccountName = externalAccountName
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.accessTokenID = try values.decode(String.self, forKey: "access_token_id")
    self.externalProviderName = try values.decode(ExternalProviderName.self, forKey: "external_provider_name")
    self.externalUserEmail = try values.decode(String.self, forKey: "external_user_email")
    self.externalAccountName = try values.decode(String.self, forKey: "external_account_name")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(accessTokenID, forKey: "access_token_id")
    try values.encode(externalProviderName, forKey: "external_provider_name")
    try values.encode(externalUserEmail, forKey: "external_user_email")
    try values.encode(externalAccountName, forKey: "external_account_name")
  }
}
