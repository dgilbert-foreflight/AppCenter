// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct TestReport: Codable, Identifiable {
  public var appUploadID: String
  public var date: String
  public var testType: String
  public var platform: String
  public var stats: Stats
  public var id: String
  public var schemaVersion: Double
  public var revision: Double
  public var features: [Feature]
  public var finishedDeviceSnapshots: [String]
  public var deviceLogs: [DeviceLog]
  public var dateFinished: String
  public var errorMessage: String?
  public var snapshotFatalErrors: [SnapshotFatalError]?

  public struct Stats: Codable {
    public var os: Double
    public var devices: Double
    public var filesize: Double
    public var totalDeviceMinutes: Double
    public var devicesNotRunned: Double
    public var failed: Double
    public var skipped: Double
    public var passed: Double
    public var total: Double
    public var devicesFinished: Double
    public var devicesFailed: Double
    public var devicesSkipped: Double
    public var stepCount: Double
    public var artifacts: [String: String]?

    public init(os: Double, devices: Double, filesize: Double, totalDeviceMinutes: Double, devicesNotRunned: Double, failed: Double, skipped: Double, passed: Double, total: Double, devicesFinished: Double, devicesFailed: Double, devicesSkipped: Double, stepCount: Double, artifacts: [String: String]? = nil) {
      self.os = os
      self.devices = devices
      self.filesize = filesize
      self.totalDeviceMinutes = totalDeviceMinutes
      self.devicesNotRunned = devicesNotRunned
      self.failed = failed
      self.skipped = skipped
      self.passed = passed
      self.total = total
      self.devicesFinished = devicesFinished
      self.devicesFailed = devicesFailed
      self.devicesSkipped = devicesSkipped
      self.stepCount = stepCount
      self.artifacts = artifacts
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.os = try values.decode(Double.self, forKey: "os")
      self.devices = try values.decode(Double.self, forKey: "devices")
      self.filesize = try values.decode(Double.self, forKey: "filesize")
      self.totalDeviceMinutes = try values.decode(Double.self, forKey: "totalDeviceMinutes")
      self.devicesNotRunned = try values.decode(Double.self, forKey: "devices_not_runned")
      self.failed = try values.decode(Double.self, forKey: "failed")
      self.skipped = try values.decode(Double.self, forKey: "skipped")
      self.passed = try values.decode(Double.self, forKey: "passed")
      self.total = try values.decode(Double.self, forKey: "total")
      self.devicesFinished = try values.decode(Double.self, forKey: "devices_finished")
      self.devicesFailed = try values.decode(Double.self, forKey: "devices_failed")
      self.devicesSkipped = try values.decode(Double.self, forKey: "devices_skipped")
      self.stepCount = try values.decode(Double.self, forKey: "step_count")
      self.artifacts = try values.decodeIfPresent([String: String].self, forKey: "artifacts")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(os, forKey: "os")
      try values.encode(devices, forKey: "devices")
      try values.encode(filesize, forKey: "filesize")
      try values.encode(totalDeviceMinutes, forKey: "totalDeviceMinutes")
      try values.encode(devicesNotRunned, forKey: "devices_not_runned")
      try values.encode(failed, forKey: "failed")
      try values.encode(skipped, forKey: "skipped")
      try values.encode(passed, forKey: "passed")
      try values.encode(total, forKey: "total")
      try values.encode(devicesFinished, forKey: "devices_finished")
      try values.encode(devicesFailed, forKey: "devices_failed")
      try values.encode(devicesSkipped, forKey: "devices_skipped")
      try values.encode(stepCount, forKey: "step_count")
      try values.encodeIfPresent(artifacts, forKey: "artifacts")
    }
  }

  public struct Feature: Codable {
    public var name: String?
    public var tests: [Test]?
    public var failed: Double?
    public var skipped: Double?
    public var peakMemory: Double?
    public var peakDuration: Double?

    public struct Test: Codable {
      public var testName: String?
      public var runs: [Run]?
      public var peakMemory: Double?
      public var peakDuration: Double?

      public struct Run: Codable, Identifiable {
        public var number: Double?
        public var steps: [Step]?
        public var failed: Double?
        public var skipped: Double?
        public var reportURL: String?
        public var id: String?

        public struct Step: Codable, Identifiable {
          public var stepName: String?
          public var id: String?
          public var stepExecutions: [StepExecution]?
          public var failed: Double?
          public var skipped: Double?
          public var stepReportURL: String?

          public struct StepExecution: Codable {
            public var deviceSnapshotID: String?
            public var status: String?
            public var timestamp: Double?

            public init(deviceSnapshotID: String? = nil, status: String? = nil, timestamp: Double? = nil) {
              self.deviceSnapshotID = deviceSnapshotID
              self.status = status
              self.timestamp = timestamp
            }

            public init(from decoder: Decoder) throws {
              let values = try decoder.container(keyedBy: StringCodingKey.self)
              self.deviceSnapshotID = try values.decodeIfPresent(String.self, forKey: "device_snapshot_id")
              self.status = try values.decodeIfPresent(String.self, forKey: "status")
              self.timestamp = try values.decodeIfPresent(Double.self, forKey: "timestamp")
            }

            public func encode(to encoder: Encoder) throws {
              var values = encoder.container(keyedBy: StringCodingKey.self)
              try values.encodeIfPresent(deviceSnapshotID, forKey: "device_snapshot_id")
              try values.encodeIfPresent(status, forKey: "status")
              try values.encodeIfPresent(timestamp, forKey: "timestamp")
            }
          }

          public init(stepName: String? = nil, id: String? = nil, stepExecutions: [StepExecution]? = nil, failed: Double? = nil, skipped: Double? = nil, stepReportURL: String? = nil) {
            self.stepName = stepName
            self.id = id
            self.stepExecutions = stepExecutions
            self.failed = failed
            self.skipped = skipped
            self.stepReportURL = stepReportURL
          }

          public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.stepName = try values.decodeIfPresent(String.self, forKey: "stepName")
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.stepExecutions = try values.decodeIfPresent([StepExecution].self, forKey: "stepExecutions")
            self.failed = try values.decodeIfPresent(Double.self, forKey: "failed")
            self.skipped = try values.decodeIfPresent(Double.self, forKey: "skipped")
            self.stepReportURL = try values.decodeIfPresent(String.self, forKey: "step_report_url")
          }

          public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(stepName, forKey: "stepName")
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(stepExecutions, forKey: "stepExecutions")
            try values.encodeIfPresent(failed, forKey: "failed")
            try values.encodeIfPresent(skipped, forKey: "skipped")
            try values.encodeIfPresent(stepReportURL, forKey: "step_report_url")
          }
        }

        public init(number: Double? = nil, steps: [Step]? = nil, failed: Double? = nil, skipped: Double? = nil, reportURL: String? = nil, id: String? = nil) {
          self.number = number
          self.steps = steps
          self.failed = failed
          self.skipped = skipped
          self.reportURL = reportURL
          self.id = id
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.number = try values.decodeIfPresent(Double.self, forKey: "number")
          self.steps = try values.decodeIfPresent([Step].self, forKey: "steps")
          self.failed = try values.decodeIfPresent(Double.self, forKey: "failed")
          self.skipped = try values.decodeIfPresent(Double.self, forKey: "skipped")
          self.reportURL = try values.decodeIfPresent(String.self, forKey: "report_url")
          self.id = try values.decodeIfPresent(String.self, forKey: "id")
        }

        public func encode(to encoder: Encoder) throws {
          var values = encoder.container(keyedBy: StringCodingKey.self)
          try values.encodeIfPresent(number, forKey: "number")
          try values.encodeIfPresent(steps, forKey: "steps")
          try values.encodeIfPresent(failed, forKey: "failed")
          try values.encodeIfPresent(skipped, forKey: "skipped")
          try values.encodeIfPresent(reportURL, forKey: "report_url")
          try values.encodeIfPresent(id, forKey: "id")
        }
      }

      public init(testName: String? = nil, runs: [Run]? = nil, peakMemory: Double? = nil, peakDuration: Double? = nil) {
        self.testName = testName
        self.runs = runs
        self.peakMemory = peakMemory
        self.peakDuration = peakDuration
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.testName = try values.decodeIfPresent(String.self, forKey: "testName")
        self.runs = try values.decodeIfPresent([Run].self, forKey: "runs")
        self.peakMemory = try values.decodeIfPresent(Double.self, forKey: "peakMemory")
        self.peakDuration = try values.decodeIfPresent(Double.self, forKey: "peakDuration")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(testName, forKey: "testName")
        try values.encodeIfPresent(runs, forKey: "runs")
        try values.encodeIfPresent(peakMemory, forKey: "peakMemory")
        try values.encodeIfPresent(peakDuration, forKey: "peakDuration")
      }
    }

    public init(name: String? = nil, tests: [Test]? = nil, failed: Double? = nil, skipped: Double? = nil, peakMemory: Double? = nil, peakDuration: Double? = nil) {
      self.name = name
      self.tests = tests
      self.failed = failed
      self.skipped = skipped
      self.peakMemory = peakMemory
      self.peakDuration = peakDuration
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.name = try values.decodeIfPresent(String.self, forKey: "name")
      self.tests = try values.decodeIfPresent([Test].self, forKey: "tests")
      self.failed = try values.decodeIfPresent(Double.self, forKey: "failed")
      self.skipped = try values.decodeIfPresent(Double.self, forKey: "skipped")
      self.peakMemory = try values.decodeIfPresent(Double.self, forKey: "peakMemory")
      self.peakDuration = try values.decodeIfPresent(Double.self, forKey: "peakDuration")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(name, forKey: "name")
      try values.encodeIfPresent(tests, forKey: "tests")
      try values.encodeIfPresent(failed, forKey: "failed")
      try values.encodeIfPresent(skipped, forKey: "skipped")
      try values.encodeIfPresent(peakMemory, forKey: "peakMemory")
      try values.encodeIfPresent(peakDuration, forKey: "peakDuration")
    }
  }

  public struct DeviceLog: Codable {
    public var deviceSnapshotID: String?
    public var deviceLog: String?
    public var testLog: String?
    public var appiumLog: String?

    public init(deviceSnapshotID: String? = nil, deviceLog: String? = nil, testLog: String? = nil, appiumLog: String? = nil) {
      self.deviceSnapshotID = deviceSnapshotID
      self.deviceLog = deviceLog
      self.testLog = testLog
      self.appiumLog = appiumLog
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.deviceSnapshotID = try values.decodeIfPresent(String.self, forKey: "device_snapshot_id")
      self.deviceLog = try values.decodeIfPresent(String.self, forKey: "device_log")
      self.testLog = try values.decodeIfPresent(String.self, forKey: "test_log")
      self.appiumLog = try values.decodeIfPresent(String.self, forKey: "appium_log")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(deviceSnapshotID, forKey: "device_snapshot_id")
      try values.encodeIfPresent(deviceLog, forKey: "device_log")
      try values.encodeIfPresent(testLog, forKey: "test_log")
      try values.encodeIfPresent(appiumLog, forKey: "appium_log")
    }
  }

  public struct SnapshotFatalError: Codable {
    public var deviceSnapshotID: String?
    public var errorMessage: String?
    public var errorTitle: String?

    public init(deviceSnapshotID: String? = nil, errorMessage: String? = nil, errorTitle: String? = nil) {
      self.deviceSnapshotID = deviceSnapshotID
      self.errorMessage = errorMessage
      self.errorTitle = errorTitle
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.deviceSnapshotID = try values.decodeIfPresent(String.self, forKey: "device_snapshot_id")
      self.errorMessage = try values.decodeIfPresent(String.self, forKey: "error_message")
      self.errorTitle = try values.decodeIfPresent(String.self, forKey: "error_title")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(deviceSnapshotID, forKey: "device_snapshot_id")
      try values.encodeIfPresent(errorMessage, forKey: "error_message")
      try values.encodeIfPresent(errorTitle, forKey: "error_title")
    }
  }

  public init(appUploadID: String, date: String, testType: String, platform: String, stats: Stats, id: String, schemaVersion: Double, revision: Double, features: [Feature], finishedDeviceSnapshots: [String], deviceLogs: [DeviceLog], dateFinished: String, errorMessage: String? = nil, snapshotFatalErrors: [SnapshotFatalError]? = nil) {
    self.appUploadID = appUploadID
    self.date = date
    self.testType = testType
    self.platform = platform
    self.stats = stats
    self.id = id
    self.schemaVersion = schemaVersion
    self.revision = revision
    self.features = features
    self.finishedDeviceSnapshots = finishedDeviceSnapshots
    self.deviceLogs = deviceLogs
    self.dateFinished = dateFinished
    self.errorMessage = errorMessage
    self.snapshotFatalErrors = snapshotFatalErrors
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.appUploadID = try values.decode(String.self, forKey: "app_upload_id")
    self.date = try values.decode(String.self, forKey: "date")
    self.testType = try values.decode(String.self, forKey: "testType")
    self.platform = try values.decode(String.self, forKey: "platform")
    self.stats = try values.decode(Stats.self, forKey: "stats")
    self.id = try values.decode(String.self, forKey: "id")
    self.schemaVersion = try values.decode(Double.self, forKey: "schema_version")
    self.revision = try values.decode(Double.self, forKey: "revision")
    self.features = try values.decode([Feature].self, forKey: "features")
    self.finishedDeviceSnapshots = try values.decode([String].self, forKey: "finished_device_snapshots")
    self.deviceLogs = try values.decode([DeviceLog].self, forKey: "device_logs")
    self.dateFinished = try values.decode(String.self, forKey: "date_finished")
    self.errorMessage = try values.decodeIfPresent(String.self, forKey: "errorMessage")
    self.snapshotFatalErrors = try values.decodeIfPresent([SnapshotFatalError].self, forKey: "snapshot_fatal_errors")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(appUploadID, forKey: "app_upload_id")
    try values.encode(date, forKey: "date")
    try values.encode(testType, forKey: "testType")
    try values.encode(platform, forKey: "platform")
    try values.encode(stats, forKey: "stats")
    try values.encode(id, forKey: "id")
    try values.encode(schemaVersion, forKey: "schema_version")
    try values.encode(revision, forKey: "revision")
    try values.encode(features, forKey: "features")
    try values.encode(finishedDeviceSnapshots, forKey: "finished_device_snapshots")
    try values.encode(deviceLogs, forKey: "device_logs")
    try values.encode(dateFinished, forKey: "date_finished")
    try values.encodeIfPresent(errorMessage, forKey: "errorMessage")
    try values.encodeIfPresent(snapshotFatalErrors, forKey: "snapshot_fatal_errors")
  }
}
