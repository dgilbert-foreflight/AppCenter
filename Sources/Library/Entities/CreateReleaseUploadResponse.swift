// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateReleaseUploadResponse: Codable, Identifiable {
  /// The ID for the newly created upload. It is going to be required later in the process.
  public var id: UUID
  /// The URL domain used to upload the release.
  public var uploadDomain: String
  /// The access token used for upload permissions.
  public var token: String
  /// The access token used for upload permissions (URL encoded to use as a single query parameter).
  public var urlEncodedToken: String
  /// The associated asset ID in the file management service associated with this uploaded.
  public var packageAssetID: UUID

  public init(id: UUID, uploadDomain: String, token: String, urlEncodedToken: String, packageAssetID: UUID) {
    self.id = id
    self.uploadDomain = uploadDomain
    self.token = token
    self.urlEncodedToken = urlEncodedToken
    self.packageAssetID = packageAssetID
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decode(UUID.self, forKey: "id")
    self.uploadDomain = try values.decode(String.self, forKey: "upload_domain")
    self.token = try values.decode(String.self, forKey: "token")
    self.urlEncodedToken = try values.decode(String.self, forKey: "url_encoded_token")
    self.packageAssetID = try values.decode(UUID.self, forKey: "package_asset_id")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(id, forKey: "id")
    try values.encode(uploadDomain, forKey: "upload_domain")
    try values.encode(token, forKey: "token")
    try values.encode(urlEncodedToken, forKey: "url_encoded_token")
    try values.encode(packageAssetID, forKey: "package_asset_id")
  }
}
