// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct XcodeToolset: Codable {
  /// The Xcode scheme containers
  public var xcodeSchemeContainers: [XcodeSchemeContainer]

  public struct XcodeSchemeContainer: Codable {
    /// Path to project
    public var path: String
    /// Project schemes
    public var sharedSchemes: [SharedScheme]
    /// Path to CocoaPods file, if present
    public var podfilePath: String?
    /// Path to Carthage file, if present
    public var cartfilePath: String?
    /// Repo object Id of the pbxproject
    public var xcodeProjectSha: String?
    /// Related projects paths for xcworkspace
    public var workspaceProjectPaths: String?
    /// Information regarding project app extensions, if present
    public var appExtensionTargets: [AppExtensionTarget]?

    public struct SharedScheme: Codable {
      /// Scheme name
      public var name: String
      /// Does scheme have a test action?
      public var hasTestAction: Bool
      /// Build configuration set in Archive action
      public var archiveConfiguration: String?
      public var archiveProject: ArchiveProject?

      public struct ArchiveProject: Codable {
        /// The Id of the target to archive
        public var archiveTargetID: String
        /// The project to archive container name
        public var projectName: String
        /// Full path of the target project
        public var projectPath: String?

        public init(archiveTargetID: String, projectName: String, projectPath: String? = nil) {
          self.archiveTargetID = archiveTargetID
          self.projectName = projectName
          self.projectPath = projectPath
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.archiveTargetID = try values.decode(String.self, forKey: "archiveTargetId")
          self.projectName = try values.decode(String.self, forKey: "projectName")
          self.projectPath = try values.decodeIfPresent(String.self, forKey: "projectPath")
        }

        public func encode(to encoder: Encoder) throws {
          var values = encoder.container(keyedBy: StringCodingKey.self)
          try values.encode(archiveTargetID, forKey: "archiveTargetId")
          try values.encode(projectName, forKey: "projectName")
          try values.encodeIfPresent(projectPath, forKey: "projectPath")
        }
      }

      public init(name: String, hasTestAction: Bool, archiveConfiguration: String? = nil, archiveProject: ArchiveProject? = nil) {
        self.name = name
        self.hasTestAction = hasTestAction
        self.archiveConfiguration = archiveConfiguration
        self.archiveProject = archiveProject
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decode(String.self, forKey: "name")
        self.hasTestAction = try values.decode(Bool.self, forKey: "hasTestAction")
        self.archiveConfiguration = try values.decodeIfPresent(String.self, forKey: "archiveConfiguration")
        self.archiveProject = try values.decodeIfPresent(ArchiveProject.self, forKey: "archiveProject")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(name, forKey: "name")
        try values.encode(hasTestAction, forKey: "hasTestAction")
        try values.encodeIfPresent(archiveConfiguration, forKey: "archiveConfiguration")
        try values.encodeIfPresent(archiveProject, forKey: "archiveProject")
      }
    }

    /// App extension information
    public struct AppExtensionTarget: Codable {
      /// App extension name
      public var name: String
      /// App extension bundle identifier
      public var targetBundleIdentifier: String

      public init(name: String, targetBundleIdentifier: String) {
        self.name = name
        self.targetBundleIdentifier = targetBundleIdentifier
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decode(String.self, forKey: "name")
        self.targetBundleIdentifier = try values.decode(String.self, forKey: "targetBundleIdentifier")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(name, forKey: "name")
        try values.encode(targetBundleIdentifier, forKey: "targetBundleIdentifier")
      }
    }

    public init(path: String, sharedSchemes: [SharedScheme], podfilePath: String? = nil, cartfilePath: String? = nil, xcodeProjectSha: String? = nil, workspaceProjectPaths: String? = nil, appExtensionTargets: [AppExtensionTarget]? = nil) {
      self.path = path
      self.sharedSchemes = sharedSchemes
      self.podfilePath = podfilePath
      self.cartfilePath = cartfilePath
      self.xcodeProjectSha = xcodeProjectSha
      self.workspaceProjectPaths = workspaceProjectPaths
      self.appExtensionTargets = appExtensionTargets
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.path = try values.decode(String.self, forKey: "path")
      self.sharedSchemes = try values.decode([SharedScheme].self, forKey: "sharedSchemes")
      self.podfilePath = try values.decodeIfPresent(String.self, forKey: "podfilePath")
      self.cartfilePath = try values.decodeIfPresent(String.self, forKey: "cartfilePath")
      self.xcodeProjectSha = try values.decodeIfPresent(String.self, forKey: "xcodeProjectSha")
      self.workspaceProjectPaths = try values.decodeIfPresent(String.self, forKey: "workspaceProjectPaths")
      self.appExtensionTargets = try values.decodeIfPresent([AppExtensionTarget].self, forKey: "appExtensionTargets")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(path, forKey: "path")
      try values.encode(sharedSchemes, forKey: "sharedSchemes")
      try values.encodeIfPresent(podfilePath, forKey: "podfilePath")
      try values.encodeIfPresent(cartfilePath, forKey: "cartfilePath")
      try values.encodeIfPresent(xcodeProjectSha, forKey: "xcodeProjectSha")
      try values.encodeIfPresent(workspaceProjectPaths, forKey: "workspaceProjectPaths")
      try values.encodeIfPresent(appExtensionTargets, forKey: "appExtensionTargets")
    }
  }

  public init(xcodeSchemeContainers: [XcodeSchemeContainer]) {
    self.xcodeSchemeContainers = xcodeSchemeContainers
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.xcodeSchemeContainers = try values.decode([XcodeSchemeContainer].self, forKey: "xcodeSchemeContainers")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(xcodeSchemeContainers, forKey: "xcodeSchemeContainers")
  }
}
