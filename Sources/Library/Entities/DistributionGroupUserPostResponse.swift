// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct DistributionGroupUserPostResponse: Codable {
  /// The code of the result
  public var code: String?
  /// Whether the has accepted the invite. Available when an invite is pending, and the value will be "true".
  public var isInvitePending: Bool?
  /// The message of the result
  public var message: String?
  /// The status code of the result
  public var status: Int
  /// The email of the user
  public var userEmail: String?

  public init(code: String? = nil, isInvitePending: Bool? = nil, message: String? = nil, status: Int, userEmail: String? = nil) {
    self.code = code
    self.isInvitePending = isInvitePending
    self.message = message
    self.status = status
    self.userEmail = userEmail
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.code = try values.decodeIfPresent(String.self, forKey: "code")
    self.isInvitePending = try values.decodeIfPresent(Bool.self, forKey: "invite_pending")
    self.message = try values.decodeIfPresent(String.self, forKey: "message")
    self.status = try values.decode(Int.self, forKey: "status")
    self.userEmail = try values.decodeIfPresent(String.self, forKey: "user_email")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(code, forKey: "code")
    try values.encodeIfPresent(isInvitePending, forKey: "invite_pending")
    try values.encodeIfPresent(message, forKey: "message")
    try values.encode(status, forKey: "status")
    try values.encodeIfPresent(userEmail, forKey: "user_email")
  }
}
