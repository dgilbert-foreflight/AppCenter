// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct APITokensPrivateCreateRequest: Codable {
  /// The principal ID assigned to the API token
  public var principalID: UUID
  /// The principal type assigned to the API token
  public var principalType: PrincipalType
  /// The description of the token
  public var description: String?
  /// The scope for this token (default "all").
  public var scope: [ScopeItem]?
  /// The token's type (default "public")
  ///   public: managed by the user
  ///   in_app_update: special token for in-app update scenario
  ///   buid: dedicated for CI usage for now
  ///   session: for CLI session management
  ///   tester_app: used for tester mobile app
  public var tokenType: TokenType?

  /// The principal type assigned to the API token
  public enum PrincipalType: String, Codable, CaseIterable {
    case app
    case user
  }

  public enum ScopeItem: String, Codable, CaseIterable {
    case all
    case inAppUpdate = "in_app_update"
    case viewer
  }

  /// The token's type (default "public")
  ///   public: managed by the user
  ///   in_app_update: special token for in-app update scenario
  ///   buid: dedicated for CI usage for now
  ///   session: for CLI session management
  ///   tester_app: used for tester mobile app
  public enum TokenType: String, Codable, CaseIterable {
    case `public`
    case inAppUpdate = "in_app_update"
    case build
    case session
    case testerApp = "tester_app"
  }

  public init(principalID: UUID, principalType: PrincipalType, description: String? = nil, scope: [ScopeItem]? = nil, tokenType: TokenType? = nil) {
    self.principalID = principalID
    self.principalType = principalType
    self.description = description
    self.scope = scope
    self.tokenType = tokenType
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.principalID = try values.decode(UUID.self, forKey: "principal_id")
    self.principalType = try values.decode(PrincipalType.self, forKey: "principal_type")
    self.description = try values.decodeIfPresent(String.self, forKey: "description")
    self.scope = try values.decodeIfPresent([ScopeItem].self, forKey: "scope")
    self.tokenType = try values.decodeIfPresent(TokenType.self, forKey: "token_type")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(principalID, forKey: "principal_id")
    try values.encode(principalType, forKey: "principal_type")
    try values.encodeIfPresent(description, forKey: "description")
    try values.encodeIfPresent(scope, forKey: "scope")
    try values.encodeIfPresent(tokenType, forKey: "token_type")
  }
}
