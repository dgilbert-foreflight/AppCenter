// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct ExternalUserRequest: Codable {
  /// The token of the app invitation which lead to signup
  public var appInvitation: String?
  /// The token of the test invitation which lead to signup
  public var testerInvitation: String?
  /// The token of the organization invitation which lead to signup
  public var organizationInvitation: String?
  /// The avatar URL of the user
  public var avatarURL: String?
  /// The full name of the user. Might for example be first and last name
  public var displayName: String?
  /// The email address of the user
  public var email: String
  /// The unique name that is used to identify the user. If no explicit value is given, a default will be auto-generated from the `display_name` value
  public var name: String?

  public init(appInvitation: String? = nil, testerInvitation: String? = nil, organizationInvitation: String? = nil, avatarURL: String? = nil, displayName: String? = nil, email: String, name: String? = nil) {
    self.appInvitation = appInvitation
    self.testerInvitation = testerInvitation
    self.organizationInvitation = organizationInvitation
    self.avatarURL = avatarURL
    self.displayName = displayName
    self.email = email
    self.name = name
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.appInvitation = try values.decodeIfPresent(String.self, forKey: "app_invitation")
    self.testerInvitation = try values.decodeIfPresent(String.self, forKey: "tester_invitation")
    self.organizationInvitation = try values.decodeIfPresent(String.self, forKey: "organization_invitation")
    self.avatarURL = try values.decodeIfPresent(String.self, forKey: "avatar_url")
    self.displayName = try values.decodeIfPresent(String.self, forKey: "display_name")
    self.email = try values.decode(String.self, forKey: "email")
    self.name = try values.decodeIfPresent(String.self, forKey: "name")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(appInvitation, forKey: "app_invitation")
    try values.encodeIfPresent(testerInvitation, forKey: "tester_invitation")
    try values.encodeIfPresent(organizationInvitation, forKey: "organization_invitation")
    try values.encodeIfPresent(avatarURL, forKey: "avatar_url")
    try values.encodeIfPresent(displayName, forKey: "display_name")
    try values.encode(email, forKey: "email")
    try values.encodeIfPresent(name, forKey: "name")
  }
}
