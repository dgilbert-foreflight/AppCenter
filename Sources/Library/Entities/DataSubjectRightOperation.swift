// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct DataSubjectRightOperation: Codable {
  /// Unique request identifier
  public var requestID: UUID
  /// Unique operation identifier
  public var operationID: UUID
  /// Request type
  public var requestType: RequestType
  /// Operation status
  public var status: Status
  /// Participant to execute the response
  public var participant: String
  /// JSON object decribing what to delete (TODO - make separate definition?)
  public var context: String
  /// Application identifier if applicable
  public var appID: String?
  /// String field to be used by participant for any intermediate statuses or data they need to save
  public var participantData: String?

  /// Request type
  public enum RequestType: String, Codable, CaseIterable {
    case unsupported = "Unsupported"
    case delete = "Delete"
    case purge = "Purge"
    case undoDelete = "UndoDelete"
    case scheduled = "Scheduled"
    case appDelete = "AppDelete"
    case appPurge = "AppPurge"
    case appUndoDelete = "AppUndoDelete"
    case export = "Export"
    case customerAccountDelete = "CustomerAccountDelete"
    case customerAccountExport = "CustomerAccountExport"
    case customerUserDelete = "CustomerUserDelete"
    case customerUserExport = "CustomerUserExport"
  }

  /// Operation status
  public enum Status: String, Codable, CaseIterable {
    case `none` = "None"
    case created = "Created"
    case queued = "Queued"
    case inProgress = "InProgress"
    case completed = "Completed"
    case failed = "Failed"
  }

  public init(requestID: UUID, operationID: UUID, requestType: RequestType, status: Status, participant: String, context: String, appID: String? = nil, participantData: String? = nil) {
    self.requestID = requestID
    self.operationID = operationID
    self.requestType = requestType
    self.status = status
    self.participant = participant
    self.context = context
    self.appID = appID
    self.participantData = participantData
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.requestID = try values.decode(UUID.self, forKey: "requestId")
    self.operationID = try values.decode(UUID.self, forKey: "operationId")
    self.requestType = try values.decode(RequestType.self, forKey: "requestType")
    self.status = try values.decode(Status.self, forKey: "status")
    self.participant = try values.decode(String.self, forKey: "participant")
    self.context = try values.decode(String.self, forKey: "context")
    self.appID = try values.decodeIfPresent(String.self, forKey: "appId")
    self.participantData = try values.decodeIfPresent(String.self, forKey: "participantData")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(requestID, forKey: "requestId")
    try values.encode(operationID, forKey: "operationId")
    try values.encode(requestType, forKey: "requestType")
    try values.encode(status, forKey: "status")
    try values.encode(participant, forKey: "participant")
    try values.encode(context, forKey: "context")
    try values.encodeIfPresent(appID, forKey: "appId")
    try values.encodeIfPresent(participantData, forKey: "participantData")
  }
}
