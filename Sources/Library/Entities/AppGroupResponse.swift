// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AppGroupResponse: Codable, Identifiable {
  /// The unique ID (UUID) of the app
  public var id: UUID
  /// The unique ID (UUID) of the group that the app belongs to
  public var groupID: UUID
  /// The display name of the app
  public var displayName: String?
  /// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
  public var releaseType: String?
  /// The name of the app used in URLs
  public var name: String
  /// The OS the app will be running on
  public var os: Os
  /// The platform of the app
  public var platform: Platform

  /// The OS the app will be running on
  public enum Os: String, Codable, CaseIterable {
    case android = "Android"
    case iOS
    case macOS
    case tizen = "Tizen"
    case tvOS
    case windows = "Windows"
    case linux = "Linux"
    case custom = "Custom"
  }

  /// The platform of the app
  public enum Platform: String, Codable, CaseIterable {
    case java = "Java"
    case objectiveCSwift = "Objective-C-Swift"
    case uwp = "UWP"
    case cordova = "Cordova"
    case reactNative = "React-Native"
    case unity = "Unity"
    case electron = "Electron"
    case xamarin = "Xamarin"
    case wpf = "WPF"
    case winForms = "WinForms"
    case unknown = "Unknown"
    case custom = "Custom"
  }

  public init(id: UUID, groupID: UUID, displayName: String? = nil, releaseType: String? = nil, name: String, os: Os, platform: Platform) {
    self.id = id
    self.groupID = groupID
    self.displayName = displayName
    self.releaseType = releaseType
    self.name = name
    self.os = os
    self.platform = platform
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decode(UUID.self, forKey: "id")
    self.groupID = try values.decode(UUID.self, forKey: "group_id")
    self.displayName = try values.decodeIfPresent(String.self, forKey: "display_name")
    self.releaseType = try values.decodeIfPresent(String.self, forKey: "release_type")
    self.name = try values.decode(String.self, forKey: "name")
    self.os = try values.decode(Os.self, forKey: "os")
    self.platform = try values.decode(Platform.self, forKey: "platform")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(id, forKey: "id")
    try values.encode(groupID, forKey: "group_id")
    try values.encodeIfPresent(displayName, forKey: "display_name")
    try values.encodeIfPresent(releaseType, forKey: "release_type")
    try values.encode(name, forKey: "name")
    try values.encode(os, forKey: "os")
    try values.encode(platform, forKey: "platform")
  }
}
