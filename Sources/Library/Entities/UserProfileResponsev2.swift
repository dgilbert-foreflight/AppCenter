// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct UserProfileResponsev2: Codable, Identifiable {
  /// The unique id (UUID) of the user
  public var id: UUID
  /// The avatar URL of the user
  public var avatarURL: String?
  /// User is required to send an old password in order to change the password.
  public var canChangePassword: Bool?
  /// The full name of the user. Might for example be first and last name
  public var displayName: String
  /// The email address of the user
  public var email: String
  /// The unique name that is used to identify the user.
  public var name: String
  /// The created date of the user
  public var createdAt: String?
  /// The date in the future when the user should be checked again for NPS eligibility
  public var nextNpsSurveyDate: String?
  /// The creation origin of this user
  public var origin: Origin
  /// The feature flags that are enabled for this user
  public var featureFlags: [String]?
  /// The new admin_role
  public var adminRole: AdminRole?
  /// The user's settings
  public var settings: [String: AnyJSON]?
  /// The session hash of the user
  public var sessionHash: String?

  /// The creation origin of this user
  public enum Origin: String, Codable, CaseIterable {
    case appcenter
    case hockeyapp
    case codepush
  }

  /// The new admin_role
  public enum AdminRole: String, Codable, CaseIterable {
    case superAdmin
    case admin
    case devOps
    case customerSupport
    case notAdmin
  }

  public init(id: UUID, avatarURL: String? = nil, canChangePassword: Bool? = nil, displayName: String, email: String, name: String, createdAt: String? = nil, nextNpsSurveyDate: String? = nil, origin: Origin, featureFlags: [String]? = nil, adminRole: AdminRole? = nil, settings: [String: AnyJSON]? = nil, sessionHash: String? = nil) {
    self.id = id
    self.avatarURL = avatarURL
    self.canChangePassword = canChangePassword
    self.displayName = displayName
    self.email = email
    self.name = name
    self.createdAt = createdAt
    self.nextNpsSurveyDate = nextNpsSurveyDate
    self.origin = origin
    self.featureFlags = featureFlags
    self.adminRole = adminRole
    self.settings = settings
    self.sessionHash = sessionHash
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decode(UUID.self, forKey: "id")
    self.avatarURL = try values.decodeIfPresent(String.self, forKey: "avatar_url")
    self.canChangePassword = try values.decodeIfPresent(Bool.self, forKey: "can_change_password")
    self.displayName = try values.decode(String.self, forKey: "display_name")
    self.email = try values.decode(String.self, forKey: "email")
    self.name = try values.decode(String.self, forKey: "name")
    self.createdAt = try values.decodeIfPresent(String.self, forKey: "created_at")
    self.nextNpsSurveyDate = try values.decodeIfPresent(String.self, forKey: "next_nps_survey_date")
    self.origin = try values.decode(Origin.self, forKey: "origin")
    self.featureFlags = try values.decodeIfPresent([String].self, forKey: "feature_flags")
    self.adminRole = try values.decodeIfPresent(AdminRole.self, forKey: "admin_role")
    self.settings = try values.decodeIfPresent([String: AnyJSON].self, forKey: "settings")
    self.sessionHash = try values.decodeIfPresent(String.self, forKey: "session_hash")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(id, forKey: "id")
    try values.encodeIfPresent(avatarURL, forKey: "avatar_url")
    try values.encodeIfPresent(canChangePassword, forKey: "can_change_password")
    try values.encode(displayName, forKey: "display_name")
    try values.encode(email, forKey: "email")
    try values.encode(name, forKey: "name")
    try values.encodeIfPresent(createdAt, forKey: "created_at")
    try values.encodeIfPresent(nextNpsSurveyDate, forKey: "next_nps_survey_date")
    try values.encode(origin, forKey: "origin")
    try values.encodeIfPresent(featureFlags, forKey: "feature_flags")
    try values.encodeIfPresent(adminRole, forKey: "admin_role")
    try values.encodeIfPresent(settings, forKey: "settings")
    try values.encodeIfPresent(sessionHash, forKey: "session_hash")
  }
}
