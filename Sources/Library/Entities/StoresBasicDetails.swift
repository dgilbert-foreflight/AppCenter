// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct StoresBasicDetails: Codable, Identifiable {
  /// ID identifying a unique distribution store.
  public var id: String?
  /// A name identifying a unique distribution store.
  public var name: String?
  /// Type of the distribution store currently stores type can be intune or googleplay.
  public var type: `Type`?
  /// Publishing status of the release in the store.
  public var publishingStatus: String?

  /// Type of the distribution store currently stores type can be intune or googleplay.
  public enum `Type`: String, Codable, CaseIterable {
    case intune
    case googleplay
  }

  public init(id: String? = nil, name: String? = nil, type: `Type`? = nil, publishingStatus: String? = nil) {
    self.id = id
    self.name = name
    self.type = type
    self.publishingStatus = publishingStatus
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decodeIfPresent(String.self, forKey: "id")
    self.name = try values.decodeIfPresent(String.self, forKey: "name")
    self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
    self.publishingStatus = try values.decodeIfPresent(String.self, forKey: "publishing_status")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(id, forKey: "id")
    try values.encodeIfPresent(name, forKey: "name")
    try values.encodeIfPresent(type, forKey: "type")
    try values.encodeIfPresent(publishingStatus, forKey: "publishing_status")
  }
}
