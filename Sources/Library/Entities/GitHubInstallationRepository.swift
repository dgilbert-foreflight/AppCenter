// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// The repository which is accessiable by GitHub App Installation
public struct GitHubInstallationRepository: Codable {
  /// The repository name
  public var name: String?
  /// The discription of repository
  public var description: String?
  /// URL used to clone the repository
  public var cloneURL: String?
  /// The default branch for the repo
  public var defaultBranch: String?
  /// The language in the repository
  public var language: String?
  /// The repository updated time
  public var updatedAt: String?
  /// Whether the repository is a fork
  public var isFork: Bool?

  public init(name: String? = nil, description: String? = nil, cloneURL: String? = nil, defaultBranch: String? = nil, language: String? = nil, updatedAt: String? = nil, isFork: Bool? = nil) {
    self.name = name
    self.description = description
    self.cloneURL = cloneURL
    self.defaultBranch = defaultBranch
    self.language = language
    self.updatedAt = updatedAt
    self.isFork = isFork
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.name = try values.decodeIfPresent(String.self, forKey: "name")
    self.description = try values.decodeIfPresent(String.self, forKey: "description")
    self.cloneURL = try values.decodeIfPresent(String.self, forKey: "clone_url")
    self.defaultBranch = try values.decodeIfPresent(String.self, forKey: "default_branch")
    self.language = try values.decodeIfPresent(String.self, forKey: "language")
    self.updatedAt = try values.decodeIfPresent(String.self, forKey: "updated_at")
    self.isFork = try values.decodeIfPresent(Bool.self, forKey: "fork")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(name, forKey: "name")
    try values.encodeIfPresent(description, forKey: "description")
    try values.encodeIfPresent(cloneURL, forKey: "clone_url")
    try values.encodeIfPresent(defaultBranch, forKey: "default_branch")
    try values.encodeIfPresent(language, forKey: "language")
    try values.encodeIfPresent(updatedAt, forKey: "updated_at")
    try values.encodeIfPresent(isFork, forKey: "fork")
  }
}
