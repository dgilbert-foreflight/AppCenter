// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct XamarinToolset: Codable {
  /// Xamarin solutions for the toolset
  public var xamarinSolutions: [XamarinSolution]

  public struct XamarinSolution: Codable {
    /// Path to solution
    public var path: String
    /// Solution configurations
    public var configurations: [String]
    /// Solution default configuration
    public var defaultConfiguration: String?

    public init(path: String, configurations: [String], defaultConfiguration: String? = nil) {
      self.path = path
      self.configurations = configurations
      self.defaultConfiguration = defaultConfiguration
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.path = try values.decode(String.self, forKey: "path")
      self.configurations = try values.decode([String].self, forKey: "configurations")
      self.defaultConfiguration = try values.decodeIfPresent(String.self, forKey: "defaultConfiguration")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(path, forKey: "path")
      try values.encode(configurations, forKey: "configurations")
      try values.encodeIfPresent(defaultConfiguration, forKey: "defaultConfiguration")
    }
  }

  public init(xamarinSolutions: [XamarinSolution]) {
    self.xamarinSolutions = xamarinSolutions
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.xamarinSolutions = try values.decode([XamarinSolution].self, forKey: "xamarinSolutions")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(xamarinSolutions, forKey: "xamarinSolutions")
  }
}
