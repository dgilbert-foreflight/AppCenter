// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// A request containing information for creating a release.
public struct ReleaseCreateRequest: Codable {
  /// The release's version.<br>
  /// For iOS: CFBundleVersion from info.plist.<br>
  /// For Android: android:versionCode from AppManifest.xml.
  public var version: String?
  /// The release's short version.<br>
  /// For iOS: CFBundleShortVersionString from info.plist.<br>
  /// For Android: android:versionName from AppManifest.xml.
  public var buildVersion: String?
  /// The identifier of the app's bundle.
  public var uniqueIdentifier: String?
  /// The release's minimum required operating system.
  public var minimumOsVersion: String?
  /// The release's device family.
  public var deviceFamily: String?
  /// The languages supported by the release. Limited to 510 characters in a serialized array.
  public var languages: [String]?
  /// MD5 checksum of the release binary.
  public var fingerprint: String
  /// The release's size in bytes.
  public var size: Int
  /// The URL to the release's binary.
  public var packageURL: String?
  /// The file extension of the asset. Does not include the initial period.
  public var fileExtension: String?
  /// The upload id associated with the release, to map to the releases upload table.
  public var uploadID: String
  /// The assetId associated with the icon uploaded to app center file upload service.
  public var iconAssetID: String?
  /// A list of UUIDs for architectures for an iOS app.
  public var ipaUUIDs: [IpaUUID]?
  /// An object containing information about an iOS provisioning profile.
  public var provision: Provision?
  /// IOS app extension provisioning profiles included in the release.
  public var appexProvisioningProfiles: [AppexProvisioningProfile]?
  /// If true this release was uploaded to the AKS upload proxy
  public var isProxyFlow: Bool?

  /// An object containing a UUID for an architecture for an iOS app.
  public struct IpaUUID: Codable {
    /// The architecture that the UUID belongs to, i.e. armv7 or arm64.
    public var architecture: String
    /// The unique identifier.
    public var uuid: UUID

    public init(architecture: String, uuid: UUID) {
      self.architecture = architecture
      self.uuid = uuid
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.architecture = try values.decode(String.self, forKey: "architecture")
      self.uuid = try values.decode(UUID.self, forKey: "uuid")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(architecture, forKey: "architecture")
      try values.encode(uuid, forKey: "uuid")
    }
  }

  /// An object containing information about an iOS provisioning profile.
  public struct Provision: Codable {
    /// The name of the provisioning profile.
    public var name: String
    /// The application identifier.
    public var applicationIdentifier: String
    /// The team identifier.
    public var teamIdentifier: String
    public var profileType: ProfileType
    /// The profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z
    public var expiredAt: String
    public var udids: [String]?

    public enum ProfileType: String, Codable, CaseIterable {
      case adhoc
      case enterprise
      case other
    }

    public init(name: String, applicationIdentifier: String, teamIdentifier: String, profileType: ProfileType, expiredAt: String, udids: [String]? = nil) {
      self.name = name
      self.applicationIdentifier = applicationIdentifier
      self.teamIdentifier = teamIdentifier
      self.profileType = profileType
      self.expiredAt = expiredAt
      self.udids = udids
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.name = try values.decode(String.self, forKey: "name")
      self.applicationIdentifier = try values.decode(String.self, forKey: "application_identifier")
      self.teamIdentifier = try values.decode(String.self, forKey: "team_identifier")
      self.profileType = try values.decode(ProfileType.self, forKey: "profile_type")
      self.expiredAt = try values.decode(String.self, forKey: "expired_at")
      self.udids = try values.decodeIfPresent([String].self, forKey: "udids")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(name, forKey: "name")
      try values.encode(applicationIdentifier, forKey: "application_identifier")
      try values.encode(teamIdentifier, forKey: "team_identifier")
      try values.encode(profileType, forKey: "profile_type")
      try values.encode(expiredAt, forKey: "expired_at")
      try values.encodeIfPresent(udids, forKey: "udids")
    }
  }

  /// An object containing information about an iOS provisioning profile.
  public struct AppexProvisioningProfile: Codable {
    /// The name of the provisioning profile.
    public var name: String
    /// The application identifier.
    public var applicationIdentifier: String
    /// The team identifier.
    public var teamIdentifier: String
    public var profileType: ProfileType
    /// The profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z
    public var expiredAt: String
    public var udids: [String]?

    public enum ProfileType: String, Codable, CaseIterable {
      case adhoc
      case enterprise
      case other
    }

    public init(name: String, applicationIdentifier: String, teamIdentifier: String, profileType: ProfileType, expiredAt: String, udids: [String]? = nil) {
      self.name = name
      self.applicationIdentifier = applicationIdentifier
      self.teamIdentifier = teamIdentifier
      self.profileType = profileType
      self.expiredAt = expiredAt
      self.udids = udids
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.name = try values.decode(String.self, forKey: "name")
      self.applicationIdentifier = try values.decode(String.self, forKey: "application_identifier")
      self.teamIdentifier = try values.decode(String.self, forKey: "team_identifier")
      self.profileType = try values.decode(ProfileType.self, forKey: "profile_type")
      self.expiredAt = try values.decode(String.self, forKey: "expired_at")
      self.udids = try values.decodeIfPresent([String].self, forKey: "udids")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(name, forKey: "name")
      try values.encode(applicationIdentifier, forKey: "application_identifier")
      try values.encode(teamIdentifier, forKey: "team_identifier")
      try values.encode(profileType, forKey: "profile_type")
      try values.encode(expiredAt, forKey: "expired_at")
      try values.encodeIfPresent(udids, forKey: "udids")
    }
  }

  public init(version: String? = nil, buildVersion: String? = nil, uniqueIdentifier: String? = nil, minimumOsVersion: String? = nil, deviceFamily: String? = nil, languages: [String]? = nil, fingerprint: String, size: Int, packageURL: String? = nil, fileExtension: String? = nil, uploadID: String, iconAssetID: String? = nil, ipaUUIDs: [IpaUUID]? = nil, provision: Provision? = nil, appexProvisioningProfiles: [AppexProvisioningProfile]? = nil, isProxyFlow: Bool? = nil) {
    self.version = version
    self.buildVersion = buildVersion
    self.uniqueIdentifier = uniqueIdentifier
    self.minimumOsVersion = minimumOsVersion
    self.deviceFamily = deviceFamily
    self.languages = languages
    self.fingerprint = fingerprint
    self.size = size
    self.packageURL = packageURL
    self.fileExtension = fileExtension
    self.uploadID = uploadID
    self.iconAssetID = iconAssetID
    self.ipaUUIDs = ipaUUIDs
    self.provision = provision
    self.appexProvisioningProfiles = appexProvisioningProfiles
    self.isProxyFlow = isProxyFlow
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.version = try values.decodeIfPresent(String.self, forKey: "version")
    self.buildVersion = try values.decodeIfPresent(String.self, forKey: "build_version")
    self.uniqueIdentifier = try values.decodeIfPresent(String.self, forKey: "unique_identifier")
    self.minimumOsVersion = try values.decodeIfPresent(String.self, forKey: "minimum_os_version")
    self.deviceFamily = try values.decodeIfPresent(String.self, forKey: "device_family")
    self.languages = try values.decodeIfPresent([String].self, forKey: "languages")
    self.fingerprint = try values.decode(String.self, forKey: "fingerprint")
    self.size = try values.decode(Int.self, forKey: "size")
    self.packageURL = try values.decodeIfPresent(String.self, forKey: "package_url")
    self.fileExtension = try values.decodeIfPresent(String.self, forKey: "file_extension")
    self.uploadID = try values.decode(String.self, forKey: "upload_id")
    self.iconAssetID = try values.decodeIfPresent(String.self, forKey: "icon_asset_id")
    self.ipaUUIDs = try values.decodeIfPresent([IpaUUID].self, forKey: "ipa_uuids")
    self.provision = try values.decodeIfPresent(Provision.self, forKey: "provision")
    self.appexProvisioningProfiles = try values.decodeIfPresent([AppexProvisioningProfile].self, forKey: "appex_provisioning_profiles")
    self.isProxyFlow = try values.decodeIfPresent(Bool.self, forKey: "proxy_flow")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(version, forKey: "version")
    try values.encodeIfPresent(buildVersion, forKey: "build_version")
    try values.encodeIfPresent(uniqueIdentifier, forKey: "unique_identifier")
    try values.encodeIfPresent(minimumOsVersion, forKey: "minimum_os_version")
    try values.encodeIfPresent(deviceFamily, forKey: "device_family")
    try values.encodeIfPresent(languages, forKey: "languages")
    try values.encode(fingerprint, forKey: "fingerprint")
    try values.encode(size, forKey: "size")
    try values.encodeIfPresent(packageURL, forKey: "package_url")
    try values.encodeIfPresent(fileExtension, forKey: "file_extension")
    try values.encode(uploadID, forKey: "upload_id")
    try values.encodeIfPresent(iconAssetID, forKey: "icon_asset_id")
    try values.encodeIfPresent(ipaUUIDs, forKey: "ipa_uuids")
    try values.encodeIfPresent(provision, forKey: "provision")
    try values.encodeIfPresent(appexProvisioningProfiles, forKey: "appex_provisioning_profiles")
    try values.encodeIfPresent(isProxyFlow, forKey: "proxy_flow")
  }
}
