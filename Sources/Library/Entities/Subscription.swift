// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Subscription information
public struct Subscription: Codable, Identifiable {
  /// The date the subscription began
  public var startsAt: String?
  /// The date the subscription will end or ended
  public var endsAt: String?
  /// The number of days left in the subscription
  public var daysLeft: Double?
  /// Subscription Tier
  public var tier: Tier?
  /// Is the subscription currently active?
  public var isActive: Bool?
  /// Id of the subscription
  public var id: UUID?
  /// Customer limits on concurrent devices
  public var concurrentDevicesLimit: Int?
  /// Current device concurrency utilization
  public var runningDevices: Int?

  /// Subscription Tier
  public struct Tier: Codable {
    /// The name of the tier
    public var name: String?

    public init(name: String? = nil) {
      self.name = name
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.name = try values.decodeIfPresent(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(name, forKey: "name")
    }
  }

  public init(startsAt: String? = nil, endsAt: String? = nil, daysLeft: Double? = nil, tier: Tier? = nil, isActive: Bool? = nil, id: UUID? = nil, concurrentDevicesLimit: Int? = nil, runningDevices: Int? = nil) {
    self.startsAt = startsAt
    self.endsAt = endsAt
    self.daysLeft = daysLeft
    self.tier = tier
    self.isActive = isActive
    self.id = id
    self.concurrentDevicesLimit = concurrentDevicesLimit
    self.runningDevices = runningDevices
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.startsAt = try values.decodeIfPresent(String.self, forKey: "startsAt")
    self.endsAt = try values.decodeIfPresent(String.self, forKey: "endsAt")
    self.daysLeft = try values.decodeIfPresent(Double.self, forKey: "daysLeft")
    self.tier = try values.decodeIfPresent(Tier.self, forKey: "tier")
    self.isActive = try values.decodeIfPresent(Bool.self, forKey: "active")
    self.id = try values.decodeIfPresent(UUID.self, forKey: "id")
    self.concurrentDevicesLimit = try values.decodeIfPresent(Int.self, forKey: "concurrentDevicesLimit")
    self.runningDevices = try values.decodeIfPresent(Int.self, forKey: "runningDevices")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(startsAt, forKey: "startsAt")
    try values.encodeIfPresent(endsAt, forKey: "endsAt")
    try values.encodeIfPresent(daysLeft, forKey: "daysLeft")
    try values.encodeIfPresent(tier, forKey: "tier")
    try values.encodeIfPresent(isActive, forKey: "active")
    try values.encodeIfPresent(id, forKey: "id")
    try values.encodeIfPresent(concurrentDevicesLimit, forKey: "concurrentDevicesLimit")
    try values.encodeIfPresent(runningDevices, forKey: "runningDevices")
  }
}
