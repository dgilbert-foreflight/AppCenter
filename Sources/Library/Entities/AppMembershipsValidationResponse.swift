// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AppMembershipsValidationResponse: Codable {
  public var excessAppMemberships: ExcessAppMemberships?
  public var appUsersWithMissingMemberships: [AppUsersWithMissingMembership]?
  public var distributionGroupUsersWithMissingMemberships: [DistributionGroupUsersWithMissingMembership]?
  public var organizationAdminsWithMissingMemberships: [OrganizationAdminsWithMissingMembership]?

  public struct ExcessAppMemberships: Codable {
    public var appUsersMemberships: [AppUsersMembership]?
    public var distributionGroupMemberships: [DistributionGroupMembership]?
    public var organizationAdminMemberships: [OrganizationAdminMembership]?

    public struct AppUsersMembership: Codable {
      public var appID: String?
      public var userID: String?
      public var permissions: [String]?
      public var origin: Origin?
      public var sourceType: SourceType?
      public var sourceID: String?

      public enum Origin: String, Codable, CaseIterable {
        case appcenter
        case hockeyapp
        case codepush
        case testcloud
        case hockeyappDogfood = "hockeyapp-dogfood"
      }

      public enum SourceType: String, Codable, CaseIterable {
        case user
        case org
        case distributionGroup = "distribution_group"
        case team
        case release
      }

      public init(appID: String? = nil, userID: String? = nil, permissions: [String]? = nil, origin: Origin? = nil, sourceType: SourceType? = nil, sourceID: String? = nil) {
        self.appID = appID
        self.userID = userID
        self.permissions = permissions
        self.origin = origin
        self.sourceType = sourceType
        self.sourceID = sourceID
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.appID = try values.decodeIfPresent(String.self, forKey: "app_id")
        self.userID = try values.decodeIfPresent(String.self, forKey: "user_id")
        self.permissions = try values.decodeIfPresent([String].self, forKey: "permissions")
        self.origin = try values.decodeIfPresent(Origin.self, forKey: "origin")
        self.sourceType = try values.decodeIfPresent(SourceType.self, forKey: "source_type")
        self.sourceID = try values.decodeIfPresent(String.self, forKey: "source_id")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(appID, forKey: "app_id")
        try values.encodeIfPresent(userID, forKey: "user_id")
        try values.encodeIfPresent(permissions, forKey: "permissions")
        try values.encodeIfPresent(origin, forKey: "origin")
        try values.encodeIfPresent(sourceType, forKey: "source_type")
        try values.encodeIfPresent(sourceID, forKey: "source_id")
      }
    }

    public struct DistributionGroupMembership: Codable {
      public var appID: String?
      public var userID: String?
      public var permissions: [String]?
      public var origin: Origin?
      public var sourceType: SourceType?
      public var sourceID: String?

      public enum Origin: String, Codable, CaseIterable {
        case appcenter
        case hockeyapp
        case codepush
        case testcloud
        case hockeyappDogfood = "hockeyapp-dogfood"
      }

      public enum SourceType: String, Codable, CaseIterable {
        case user
        case org
        case distributionGroup = "distribution_group"
        case team
        case release
      }

      public init(appID: String? = nil, userID: String? = nil, permissions: [String]? = nil, origin: Origin? = nil, sourceType: SourceType? = nil, sourceID: String? = nil) {
        self.appID = appID
        self.userID = userID
        self.permissions = permissions
        self.origin = origin
        self.sourceType = sourceType
        self.sourceID = sourceID
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.appID = try values.decodeIfPresent(String.self, forKey: "app_id")
        self.userID = try values.decodeIfPresent(String.self, forKey: "user_id")
        self.permissions = try values.decodeIfPresent([String].self, forKey: "permissions")
        self.origin = try values.decodeIfPresent(Origin.self, forKey: "origin")
        self.sourceType = try values.decodeIfPresent(SourceType.self, forKey: "source_type")
        self.sourceID = try values.decodeIfPresent(String.self, forKey: "source_id")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(appID, forKey: "app_id")
        try values.encodeIfPresent(userID, forKey: "user_id")
        try values.encodeIfPresent(permissions, forKey: "permissions")
        try values.encodeIfPresent(origin, forKey: "origin")
        try values.encodeIfPresent(sourceType, forKey: "source_type")
        try values.encodeIfPresent(sourceID, forKey: "source_id")
      }
    }

    public struct OrganizationAdminMembership: Codable {
      public var appID: String?
      public var userID: String?
      public var permissions: [String]?
      public var origin: Origin?
      public var sourceType: SourceType?
      public var sourceID: String?

      public enum Origin: String, Codable, CaseIterable {
        case appcenter
        case hockeyapp
        case codepush
        case testcloud
        case hockeyappDogfood = "hockeyapp-dogfood"
      }

      public enum SourceType: String, Codable, CaseIterable {
        case user
        case org
        case distributionGroup = "distribution_group"
        case team
        case release
      }

      public init(appID: String? = nil, userID: String? = nil, permissions: [String]? = nil, origin: Origin? = nil, sourceType: SourceType? = nil, sourceID: String? = nil) {
        self.appID = appID
        self.userID = userID
        self.permissions = permissions
        self.origin = origin
        self.sourceType = sourceType
        self.sourceID = sourceID
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.appID = try values.decodeIfPresent(String.self, forKey: "app_id")
        self.userID = try values.decodeIfPresent(String.self, forKey: "user_id")
        self.permissions = try values.decodeIfPresent([String].self, forKey: "permissions")
        self.origin = try values.decodeIfPresent(Origin.self, forKey: "origin")
        self.sourceType = try values.decodeIfPresent(SourceType.self, forKey: "source_type")
        self.sourceID = try values.decodeIfPresent(String.self, forKey: "source_id")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(appID, forKey: "app_id")
        try values.encodeIfPresent(userID, forKey: "user_id")
        try values.encodeIfPresent(permissions, forKey: "permissions")
        try values.encodeIfPresent(origin, forKey: "origin")
        try values.encodeIfPresent(sourceType, forKey: "source_type")
        try values.encodeIfPresent(sourceID, forKey: "source_id")
      }
    }

    public init(appUsersMemberships: [AppUsersMembership]? = nil, distributionGroupMemberships: [DistributionGroupMembership]? = nil, organizationAdminMemberships: [OrganizationAdminMembership]? = nil) {
      self.appUsersMemberships = appUsersMemberships
      self.distributionGroupMemberships = distributionGroupMemberships
      self.organizationAdminMemberships = organizationAdminMemberships
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.appUsersMemberships = try values.decodeIfPresent([AppUsersMembership].self, forKey: "app_users_memberships")
      self.distributionGroupMemberships = try values.decodeIfPresent([DistributionGroupMembership].self, forKey: "distribution_group_memberships")
      self.organizationAdminMemberships = try values.decodeIfPresent([OrganizationAdminMembership].self, forKey: "organization_admin_memberships")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(appUsersMemberships, forKey: "app_users_memberships")
      try values.encodeIfPresent(distributionGroupMemberships, forKey: "distribution_group_memberships")
      try values.encodeIfPresent(organizationAdminMemberships, forKey: "organization_admin_memberships")
    }
  }

  public struct AppUsersWithMissingMembership: Codable {
    public var appID: String?
    public var userID: String?
    public var permissions: [String]?
    public var origin: String?

    public init(appID: String? = nil, userID: String? = nil, permissions: [String]? = nil, origin: String? = nil) {
      self.appID = appID
      self.userID = userID
      self.permissions = permissions
      self.origin = origin
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.appID = try values.decodeIfPresent(String.self, forKey: "app_id")
      self.userID = try values.decodeIfPresent(String.self, forKey: "user_id")
      self.permissions = try values.decodeIfPresent([String].self, forKey: "permissions")
      self.origin = try values.decodeIfPresent(String.self, forKey: "origin")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(appID, forKey: "app_id")
      try values.encodeIfPresent(userID, forKey: "user_id")
      try values.encodeIfPresent(permissions, forKey: "permissions")
      try values.encodeIfPresent(origin, forKey: "origin")
    }
  }

  public struct DistributionGroupUsersWithMissingMembership: Codable {
    public var distributionGroupID: String?
    public var userID: String?
    public var origin: String?

    public init(distributionGroupID: String? = nil, userID: String? = nil, origin: String? = nil) {
      self.distributionGroupID = distributionGroupID
      self.userID = userID
      self.origin = origin
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.distributionGroupID = try values.decodeIfPresent(String.self, forKey: "distribution_group_id")
      self.userID = try values.decodeIfPresent(String.self, forKey: "user_id")
      self.origin = try values.decodeIfPresent(String.self, forKey: "origin")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(distributionGroupID, forKey: "distribution_group_id")
      try values.encodeIfPresent(userID, forKey: "user_id")
      try values.encodeIfPresent(origin, forKey: "origin")
    }
  }

  public struct OrganizationAdminsWithMissingMembership: Codable {
    public var organizationID: String?
    public var userID: String?
    public var role: String?
    public var origin: String?

    public init(organizationID: String? = nil, userID: String? = nil, role: String? = nil, origin: String? = nil) {
      self.organizationID = organizationID
      self.userID = userID
      self.role = role
      self.origin = origin
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.organizationID = try values.decodeIfPresent(String.self, forKey: "organization_id")
      self.userID = try values.decodeIfPresent(String.self, forKey: "user_id")
      self.role = try values.decodeIfPresent(String.self, forKey: "role")
      self.origin = try values.decodeIfPresent(String.self, forKey: "origin")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(organizationID, forKey: "organization_id")
      try values.encodeIfPresent(userID, forKey: "user_id")
      try values.encodeIfPresent(role, forKey: "role")
      try values.encodeIfPresent(origin, forKey: "origin")
    }
  }

  public init(excessAppMemberships: ExcessAppMemberships? = nil, appUsersWithMissingMemberships: [AppUsersWithMissingMembership]? = nil, distributionGroupUsersWithMissingMemberships: [DistributionGroupUsersWithMissingMembership]? = nil, organizationAdminsWithMissingMemberships: [OrganizationAdminsWithMissingMembership]? = nil) {
    self.excessAppMemberships = excessAppMemberships
    self.appUsersWithMissingMemberships = appUsersWithMissingMemberships
    self.distributionGroupUsersWithMissingMemberships = distributionGroupUsersWithMissingMemberships
    self.organizationAdminsWithMissingMemberships = organizationAdminsWithMissingMemberships
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.excessAppMemberships = try values.decodeIfPresent(ExcessAppMemberships.self, forKey: "excess_app_memberships")
    self.appUsersWithMissingMemberships = try values.decodeIfPresent([AppUsersWithMissingMembership].self, forKey: "app_users_with_missing_memberships")
    self.distributionGroupUsersWithMissingMemberships = try values.decodeIfPresent([DistributionGroupUsersWithMissingMembership].self, forKey: "distribution_group_users_with_missing_memberships")
    self.organizationAdminsWithMissingMemberships = try values.decodeIfPresent([OrganizationAdminsWithMissingMembership].self, forKey: "organization_admins_with_missing_memberships")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(excessAppMemberships, forKey: "excess_app_memberships")
    try values.encodeIfPresent(appUsersWithMissingMemberships, forKey: "app_users_with_missing_memberships")
    try values.encodeIfPresent(distributionGroupUsersWithMissingMemberships, forKey: "distribution_group_users_with_missing_memberships")
    try values.encodeIfPresent(organizationAdminsWithMissingMemberships, forKey: "organization_admins_with_missing_memberships")
  }
}
