// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct ErrorGroupModels: Codable {
  public var errorCount: Int64?
  public var models: [Model]?

  public struct Model: Codable {
    /// Model name
    public var modelName: String?
    /// Model code
    public var modelCode: String?
    /// Count of errors in a model
    public var errorCount: Int64?

    public init(modelName: String? = nil, modelCode: String? = nil, errorCount: Int64? = nil) {
      self.modelName = modelName
      self.modelCode = modelCode
      self.errorCount = errorCount
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.modelName = try values.decodeIfPresent(String.self, forKey: "modelName")
      self.modelCode = try values.decodeIfPresent(String.self, forKey: "modelCode")
      self.errorCount = try values.decodeIfPresent(Int64.self, forKey: "errorCount")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(modelName, forKey: "modelName")
      try values.encodeIfPresent(modelCode, forKey: "modelCode")
      try values.encodeIfPresent(errorCount, forKey: "errorCount")
    }
  }

  public init(errorCount: Int64? = nil, models: [Model]? = nil) {
    self.errorCount = errorCount
    self.models = models
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.errorCount = try values.decodeIfPresent(Int64.self, forKey: "errorCount")
    self.models = try values.decodeIfPresent([Model].self, forKey: "models")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(errorCount, forKey: "errorCount")
    try values.encodeIfPresent(models, forKey: "models")
  }
}
