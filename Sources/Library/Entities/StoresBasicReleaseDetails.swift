// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Basic information on a release
public struct StoresBasicReleaseDetails: Codable, Identifiable {
  /// ID identifying this unique release.
  public var id: Double?
  /// The release's version.
  /// For iOS: CFBundleVersion from info.plist.
  /// For Android: android:versionCode from AppManifest.xml.
  public var version: String?
  /// The release's short version.
  /// For iOS: CFBundleShortVersionString from info.plist.
  /// For Android: android:versionName from AppManifest.xml.
  public var shortVersion: String?
  /// UTC time in ISO 8601 format of the uploaded time.
  public var uploadedAt: String?
  /// Destination for this release.
  public var destinationType: DestinationType?
  /// A list of distribution stores that are associated with this release.
  public var distributionStores: [DistributionStore]?

  /// Destination for this release.
  public enum DestinationType: String, Codable, CaseIterable {
    case group
    case store
    case tester
  }

  public struct DistributionStore: Codable, Identifiable {
    /// ID identifying a unique distribution store.
    public var id: String?
    /// A name identifying a unique distribution store.
    public var name: String?
    /// A type identifying the type of distribution store.
    public var type: `Type`?
    /// A status identifying the status of release in the distribution store.
    public var publishingStatus: String?
    /// Is the containing release the latest one in this distribution store.
    public var isLatest: Bool?

    /// A type identifying the type of distribution store.
    public enum `Type`: String, Codable, CaseIterable {
      case googleplay
      case intune
      case apple
    }

    public init(id: String? = nil, name: String? = nil, type: `Type`? = nil, publishingStatus: String? = nil, isLatest: Bool? = nil) {
      self.id = id
      self.name = name
      self.type = type
      self.publishingStatus = publishingStatus
      self.isLatest = isLatest
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.id = try values.decodeIfPresent(String.self, forKey: "id")
      self.name = try values.decodeIfPresent(String.self, forKey: "name")
      self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
      self.publishingStatus = try values.decodeIfPresent(String.self, forKey: "publishing_status")
      self.isLatest = try values.decodeIfPresent(Bool.self, forKey: "is_latest")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(id, forKey: "id")
      try values.encodeIfPresent(name, forKey: "name")
      try values.encodeIfPresent(type, forKey: "type")
      try values.encodeIfPresent(publishingStatus, forKey: "publishing_status")
      try values.encodeIfPresent(isLatest, forKey: "is_latest")
    }
  }

  public init(id: Double? = nil, version: String? = nil, shortVersion: String? = nil, uploadedAt: String? = nil, destinationType: DestinationType? = nil, distributionStores: [DistributionStore]? = nil) {
    self.id = id
    self.version = version
    self.shortVersion = shortVersion
    self.uploadedAt = uploadedAt
    self.destinationType = destinationType
    self.distributionStores = distributionStores
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decodeIfPresent(Double.self, forKey: "id")
    self.version = try values.decodeIfPresent(String.self, forKey: "version")
    self.shortVersion = try values.decodeIfPresent(String.self, forKey: "short_version")
    self.uploadedAt = try values.decodeIfPresent(String.self, forKey: "uploaded_at")
    self.destinationType = try values.decodeIfPresent(DestinationType.self, forKey: "destination_type")
    self.distributionStores = try values.decodeIfPresent([DistributionStore].self, forKey: "distribution_stores")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(id, forKey: "id")
    try values.encodeIfPresent(version, forKey: "version")
    try values.encodeIfPresent(shortVersion, forKey: "short_version")
    try values.encodeIfPresent(uploadedAt, forKey: "uploaded_at")
    try values.encodeIfPresent(destinationType, forKey: "destination_type")
    try values.encodeIfPresent(distributionStores, forKey: "distribution_stores")
  }
}
