// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AppRepoResponse: Codable, Identifiable {
  /// The unique id (UUID) of the repository integration
  public var id: UUID
  /// The unique id (UUID) of the app that this repository integration belongs to
  public var appID: UUID
  /// The absolute URL of the repository
  public var repoURL: String
  /// The provider of the repository
  public var repoProvider: RepoProvider?
  /// The unique id (UUID) of the user who configured the repository
  public var userID: UUID
  /// Installation id from the provider
  public var installationID: String?
  /// Repository id from the provider
  public var repoID: String?
  /// User id from the provider
  public var externalUserID: String?
  /// The id of the service connection stored in customer credential store
  public var serviceConnectionID: UUID?

  /// The provider of the repository
  public enum RepoProvider: String, Codable, CaseIterable {
    case github
    case bitbucket
    case vsts
    case gitlab
  }

  public init(id: UUID, appID: UUID, repoURL: String, repoProvider: RepoProvider? = nil, userID: UUID, installationID: String? = nil, repoID: String? = nil, externalUserID: String? = nil, serviceConnectionID: UUID? = nil) {
    self.id = id
    self.appID = appID
    self.repoURL = repoURL
    self.repoProvider = repoProvider
    self.userID = userID
    self.installationID = installationID
    self.repoID = repoID
    self.externalUserID = externalUserID
    self.serviceConnectionID = serviceConnectionID
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decode(UUID.self, forKey: "id")
    self.appID = try values.decode(UUID.self, forKey: "app_id")
    self.repoURL = try values.decode(String.self, forKey: "repo_url")
    self.repoProvider = try values.decodeIfPresent(RepoProvider.self, forKey: "repo_provider")
    self.userID = try values.decode(UUID.self, forKey: "user_id")
    self.installationID = try values.decodeIfPresent(String.self, forKey: "installation_id")
    self.repoID = try values.decodeIfPresent(String.self, forKey: "repo_id")
    self.externalUserID = try values.decodeIfPresent(String.self, forKey: "external_user_id")
    self.serviceConnectionID = try values.decodeIfPresent(UUID.self, forKey: "service_connection_id")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(id, forKey: "id")
    try values.encode(appID, forKey: "app_id")
    try values.encode(repoURL, forKey: "repo_url")
    try values.encodeIfPresent(repoProvider, forKey: "repo_provider")
    try values.encode(userID, forKey: "user_id")
    try values.encodeIfPresent(installationID, forKey: "installation_id")
    try values.encodeIfPresent(repoID, forKey: "repo_id")
    try values.encodeIfPresent(externalUserID, forKey: "external_user_id")
    try values.encodeIfPresent(serviceConnectionID, forKey: "service_connection_id")
  }
}
