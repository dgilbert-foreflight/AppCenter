// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct TesterAppResponse: Codable, Identifiable {
  /// The unique ID (UUID) of the app
  public var id: UUID
  /// The description of the app
  public var description: String?
  /// The display name of the app
  public var displayName: String
  /// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
  public var releaseType: String?
  /// The string representation of the URL pointing to the app's icon
  public var iconURL: String?
  /// The string representation of the source of the app's icon
  public var iconSource: String?
  /// The name of the app used in URLs
  public var name: String
  /// The OS the app will be running on
  public var os: Os
  /// The information about the app's owner
  public var owner: Owner
  /// It indicates if the app is microsoft internal
  public var isMicrosoftInternal: Bool?
  /// The permissions associated with the app
  public var permissions: [Permission]?

  /// The OS the app will be running on
  public enum Os: String, Codable, CaseIterable {
    case android = "Android"
    case iOS
    case macOS
    case tizen = "Tizen"
    case tvOS
    case windows = "Windows"
    case linux = "Linux"
    case custom = "Custom"
  }

  /// The information about the app's owner
  public struct Owner: Codable, Identifiable {
    /// The unique id (UUID) of the owner
    public var id: UUID
    /// The avatar URL of the owner
    public var avatarURL: String?
    /// The owner's display name
    public var displayName: String
    /// The owner's email address
    public var email: String?
    /// The unique name that used to identify the owner
    public var name: String
    /// The owner type. Can either be 'org' or 'user'
    public var type: `Type`

    /// The owner type. Can either be 'org' or 'user'
    public enum `Type`: String, Codable, CaseIterable {
      case org
      case user
    }

    public init(id: UUID, avatarURL: String? = nil, displayName: String, email: String? = nil, name: String, type: `Type`) {
      self.id = id
      self.avatarURL = avatarURL
      self.displayName = displayName
      self.email = email
      self.name = name
      self.type = type
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.id = try values.decode(UUID.self, forKey: "id")
      self.avatarURL = try values.decodeIfPresent(String.self, forKey: "avatar_url")
      self.displayName = try values.decode(String.self, forKey: "display_name")
      self.email = try values.decodeIfPresent(String.self, forKey: "email")
      self.name = try values.decode(String.self, forKey: "name")
      self.type = try values.decode(`Type`.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(id, forKey: "id")
      try values.encodeIfPresent(avatarURL, forKey: "avatar_url")
      try values.encode(displayName, forKey: "display_name")
      try values.encodeIfPresent(email, forKey: "email")
      try values.encode(name, forKey: "name")
      try values.encode(type, forKey: "type")
    }
  }

  public enum Permission: String, Codable, CaseIterable {
    case canRemoveFromApp = "can_remove_from_app"
  }

  public init(id: UUID, description: String? = nil, displayName: String, releaseType: String? = nil, iconURL: String? = nil, iconSource: String? = nil, name: String, os: Os, owner: Owner, isMicrosoftInternal: Bool? = nil, permissions: [Permission]? = nil) {
    self.id = id
    self.description = description
    self.displayName = displayName
    self.releaseType = releaseType
    self.iconURL = iconURL
    self.iconSource = iconSource
    self.name = name
    self.os = os
    self.owner = owner
    self.isMicrosoftInternal = isMicrosoftInternal
    self.permissions = permissions
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decode(UUID.self, forKey: "id")
    self.description = try values.decodeIfPresent(String.self, forKey: "description")
    self.displayName = try values.decode(String.self, forKey: "display_name")
    self.releaseType = try values.decodeIfPresent(String.self, forKey: "release_type")
    self.iconURL = try values.decodeIfPresent(String.self, forKey: "icon_url")
    self.iconSource = try values.decodeIfPresent(String.self, forKey: "icon_source")
    self.name = try values.decode(String.self, forKey: "name")
    self.os = try values.decode(Os.self, forKey: "os")
    self.owner = try values.decode(Owner.self, forKey: "owner")
    self.isMicrosoftInternal = try values.decodeIfPresent(Bool.self, forKey: "microsoft_internal")
    self.permissions = try values.decodeIfPresent([Permission].self, forKey: "permissions")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(id, forKey: "id")
    try values.encodeIfPresent(description, forKey: "description")
    try values.encode(displayName, forKey: "display_name")
    try values.encodeIfPresent(releaseType, forKey: "release_type")
    try values.encodeIfPresent(iconURL, forKey: "icon_url")
    try values.encodeIfPresent(iconSource, forKey: "icon_source")
    try values.encode(name, forKey: "name")
    try values.encode(os, forKey: "os")
    try values.encode(owner, forKey: "owner")
    try values.encodeIfPresent(isMicrosoftInternal, forKey: "microsoft_internal")
    try values.encodeIfPresent(permissions, forKey: "permissions")
  }
}
