// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct LegacyUpdateCheckResponse: Codable {
  public var updateInfo: UpdateInfo

  public struct UpdateInfo: Codable {
    public var appVersion: String?
    public var description: String?
    public var isDisabled: Bool?
    public var isMandatory: Bool?
    public var rollout: Int?
    public var downloadURL: String?
    public var isAvailable: Bool?
    public var packageSize: Double?
    public var shouldRunBinaryVersion: Bool?
    public var isUpdateAppVersion: Bool?
    public var packageHash: String?
    public var label: String?

    public init(appVersion: String? = nil, description: String? = nil, isDisabled: Bool? = nil, isMandatory: Bool? = nil, rollout: Int? = nil, downloadURL: String? = nil, isAvailable: Bool? = nil, packageSize: Double? = nil, shouldRunBinaryVersion: Bool? = nil, isUpdateAppVersion: Bool? = nil, packageHash: String? = nil, label: String? = nil) {
      self.appVersion = appVersion
      self.description = description
      self.isDisabled = isDisabled
      self.isMandatory = isMandatory
      self.rollout = rollout
      self.downloadURL = downloadURL
      self.isAvailable = isAvailable
      self.packageSize = packageSize
      self.shouldRunBinaryVersion = shouldRunBinaryVersion
      self.isUpdateAppVersion = isUpdateAppVersion
      self.packageHash = packageHash
      self.label = label
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.appVersion = try values.decodeIfPresent(String.self, forKey: "appVersion")
      self.description = try values.decodeIfPresent(String.self, forKey: "description")
      self.isDisabled = try values.decodeIfPresent(Bool.self, forKey: "isDisabled")
      self.isMandatory = try values.decodeIfPresent(Bool.self, forKey: "isMandatory")
      self.rollout = try values.decodeIfPresent(Int.self, forKey: "rollout")
      self.downloadURL = try values.decodeIfPresent(String.self, forKey: "downloadURL")
      self.isAvailable = try values.decodeIfPresent(Bool.self, forKey: "isAvailable")
      self.packageSize = try values.decodeIfPresent(Double.self, forKey: "packageSize")
      self.shouldRunBinaryVersion = try values.decodeIfPresent(Bool.self, forKey: "shouldRunBinaryVersion")
      self.isUpdateAppVersion = try values.decodeIfPresent(Bool.self, forKey: "updateAppVersion")
      self.packageHash = try values.decodeIfPresent(String.self, forKey: "packageHash")
      self.label = try values.decodeIfPresent(String.self, forKey: "label")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(appVersion, forKey: "appVersion")
      try values.encodeIfPresent(description, forKey: "description")
      try values.encodeIfPresent(isDisabled, forKey: "isDisabled")
      try values.encodeIfPresent(isMandatory, forKey: "isMandatory")
      try values.encodeIfPresent(rollout, forKey: "rollout")
      try values.encodeIfPresent(downloadURL, forKey: "downloadURL")
      try values.encodeIfPresent(isAvailable, forKey: "isAvailable")
      try values.encodeIfPresent(packageSize, forKey: "packageSize")
      try values.encodeIfPresent(shouldRunBinaryVersion, forKey: "shouldRunBinaryVersion")
      try values.encodeIfPresent(isUpdateAppVersion, forKey: "updateAppVersion")
      try values.encodeIfPresent(packageHash, forKey: "packageHash")
      try values.encodeIfPresent(label, forKey: "label")
    }
  }

  public init(updateInfo: UpdateInfo) {
    self.updateInfo = updateInfo
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.updateInfo = try values.decode(UpdateInfo.self, forKey: "updateInfo")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(updateInfo, forKey: "updateInfo")
  }
}
