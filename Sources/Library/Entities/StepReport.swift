// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct StepReport: Codable {
  public var finishedSnapshots: [String]
  public var deviceScreenshots: [DeviceScreenshot]

  public struct DeviceScreenshot: Codable, Identifiable {
    public var id: String?
    public var deviceSnapshotID: String?
    public var stacktrace: [String]?
    public var crashData: [String]?
    public var status: String?
    public var title: String?
    public var screenshot: Screenshot?
    public var logFile: String?
    public var appiumLogFile: String?
    public var rawCrashData: [String]?

    public struct Screenshot: Codable {
      public var urls: URLs
      public var rotation: Double
      public var isLandscape: Bool

      public struct URLs: Codable {
        public var original: String
        public var small: String
        public var medium: String
        public var large: String

        public init(original: String, small: String, medium: String, large: String) {
          self.original = original
          self.small = small
          self.medium = medium
          self.large = large
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.original = try values.decode(String.self, forKey: "original")
          self.small = try values.decode(String.self, forKey: "small")
          self.medium = try values.decode(String.self, forKey: "medium")
          self.large = try values.decode(String.self, forKey: "large")
        }

        public func encode(to encoder: Encoder) throws {
          var values = encoder.container(keyedBy: StringCodingKey.self)
          try values.encode(original, forKey: "original")
          try values.encode(small, forKey: "small")
          try values.encode(medium, forKey: "medium")
          try values.encode(large, forKey: "large")
        }
      }

      public init(urls: URLs, rotation: Double, isLandscape: Bool) {
        self.urls = urls
        self.rotation = rotation
        self.isLandscape = isLandscape
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.urls = try values.decode(URLs.self, forKey: "urls")
        self.rotation = try values.decode(Double.self, forKey: "rotation")
        self.isLandscape = try values.decode(Bool.self, forKey: "landscape")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(urls, forKey: "urls")
        try values.encode(rotation, forKey: "rotation")
        try values.encode(isLandscape, forKey: "landscape")
      }
    }

    public init(id: String? = nil, deviceSnapshotID: String? = nil, stacktrace: [String]? = nil, crashData: [String]? = nil, status: String? = nil, title: String? = nil, screenshot: Screenshot? = nil, logFile: String? = nil, appiumLogFile: String? = nil, rawCrashData: [String]? = nil) {
      self.id = id
      self.deviceSnapshotID = deviceSnapshotID
      self.stacktrace = stacktrace
      self.crashData = crashData
      self.status = status
      self.title = title
      self.screenshot = screenshot
      self.logFile = logFile
      self.appiumLogFile = appiumLogFile
      self.rawCrashData = rawCrashData
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.id = try values.decodeIfPresent(String.self, forKey: "id")
      self.deviceSnapshotID = try values.decodeIfPresent(String.self, forKey: "device_snapshot_id")
      self.stacktrace = try values.decodeIfPresent([String].self, forKey: "stacktrace")
      self.crashData = try values.decodeIfPresent([String].self, forKey: "crash_data")
      self.status = try values.decodeIfPresent(String.self, forKey: "status")
      self.title = try values.decodeIfPresent(String.self, forKey: "title")
      self.screenshot = try values.decodeIfPresent(Screenshot.self, forKey: "screenshot")
      self.logFile = try values.decodeIfPresent(String.self, forKey: "log_file")
      self.appiumLogFile = try values.decodeIfPresent(String.self, forKey: "appium_log_file")
      self.rawCrashData = try values.decodeIfPresent([String].self, forKey: "raw_crash_data")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(id, forKey: "id")
      try values.encodeIfPresent(deviceSnapshotID, forKey: "device_snapshot_id")
      try values.encodeIfPresent(stacktrace, forKey: "stacktrace")
      try values.encodeIfPresent(crashData, forKey: "crash_data")
      try values.encodeIfPresent(status, forKey: "status")
      try values.encodeIfPresent(title, forKey: "title")
      try values.encodeIfPresent(screenshot, forKey: "screenshot")
      try values.encodeIfPresent(logFile, forKey: "log_file")
      try values.encodeIfPresent(appiumLogFile, forKey: "appium_log_file")
      try values.encodeIfPresent(rawCrashData, forKey: "raw_crash_data")
    }
  }

  public init(finishedSnapshots: [String], deviceScreenshots: [DeviceScreenshot]) {
    self.finishedSnapshots = finishedSnapshots
    self.deviceScreenshots = deviceScreenshots
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.finishedSnapshots = try values.decode([String].self, forKey: "finishedSnapshots")
    self.deviceScreenshots = try values.decode([DeviceScreenshot].self, forKey: "deviceScreenshots")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(finishedSnapshots, forKey: "finishedSnapshots")
    try values.encode(deviceScreenshots, forKey: "deviceScreenshots")
  }
}
