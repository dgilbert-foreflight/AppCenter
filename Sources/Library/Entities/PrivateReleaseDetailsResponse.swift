// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Details of an uploaded release
public struct PrivateReleaseDetailsResponse: Codable, Identifiable {
  /// ID identifying this unique release.
  public var id: Int?
  /// OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>
  /// The release state.<br>
  /// <b>available</b>: The uploaded release has been distributed.<br>
  /// <b>unavailable</b>: The uploaded release is not visible to the user. <br>
  public var status: Status?
  /// The app's name (extracted from the uploaded release).
  public var appName: String?
  /// The app's display name.
  public var appDisplayName: String?
  /// The release's version.<br>
  /// For iOS: CFBundleVersion from info.plist.
  /// For Android: android:versionCode from AppManifest.xml.
  public var version: String?
  /// The release's origin
  public var origin: Origin?
  /// The release's short version.<br>
  /// For iOS: CFBundleShortVersionString from info.plist.
  /// For Android: android:versionName from AppManifest.xml.
  public var shortVersion: String?
  /// The release's release notes.
  public var releaseNotes: String?
  /// The release's provisioning profile name.
  public var provisioningProfileName: String?
  /// The type of the provisioning profile for the requested app version.
  public var provisioningProfileType: ProvisioningProfileType?
  /// A flag that determines whether the release's provisioning profile is still extracted or not.
  public var isProvisioningProfileSyncing: Bool?
  /// The release's size in bytes.
  public var size: Int?
  /// The release's minimum required operating system.
  public var minOs: String?
  /// The release's device family.
  public var deviceFamily: String?
  /// The release's minimum required Android API level.
  public var androidMinAPILevel: String?
  /// The identifier of the apps bundle.
  public var bundleIdentifier: String?
  /// MD5 checksum of the release binary.
  public var fingerprint: String?
  /// UTC time in ISO 8601 format of the uploaded time.
  public var uploadedAt: String?
  /// The URL that hosts the binary for this release.
  public var downloadURL: String?
  /// The URL that hosts the secondary binary for this release, such as the apk file for aab releases.
  public var secondaryDownloadURL: String?
  /// A URL to the app's icon.
  public var appIconURL: String?
  /// The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`
  public var installURL: String?
  /// The destination where release is distributed
  public var distributionGroupID: String?
  /// The publishing status of the distributed release
  public var publishingStatus: String?
  /// The destination type.<br>
  /// <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
  /// <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
  public var destinationType: DestinationType?
  /// This value determines if a release is external or not.
  public var isExternalBuild: Bool?

  /// OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>
  /// The release state.<br>
  /// <b>available</b>: The uploaded release has been distributed.<br>
  /// <b>unavailable</b>: The uploaded release is not visible to the user. <br>
  public enum Status: String, Codable, CaseIterable {
    case available
    case unavailable
  }

  /// The release's origin
  public enum Origin: String, Codable, CaseIterable {
    case hockeyapp
    case appcenter
  }

  /// The type of the provisioning profile for the requested app version.
  public enum ProvisioningProfileType: String, Codable, CaseIterable {
    case adhoc
    case enterprise
    case other
  }

  /// The destination type.<br>
  /// <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
  /// <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
  public enum DestinationType: String, Codable, CaseIterable {
    case group
    case store
    case tester
  }

  public init(id: Int? = nil, status: Status? = nil, appName: String? = nil, appDisplayName: String? = nil, version: String? = nil, origin: Origin? = nil, shortVersion: String? = nil, releaseNotes: String? = nil, provisioningProfileName: String? = nil, provisioningProfileType: ProvisioningProfileType? = nil, isProvisioningProfileSyncing: Bool? = nil, size: Int? = nil, minOs: String? = nil, deviceFamily: String? = nil, androidMinAPILevel: String? = nil, bundleIdentifier: String? = nil, fingerprint: String? = nil, uploadedAt: String? = nil, downloadURL: String? = nil, secondaryDownloadURL: String? = nil, appIconURL: String? = nil, installURL: String? = nil, distributionGroupID: String? = nil, publishingStatus: String? = nil, destinationType: DestinationType? = nil, isExternalBuild: Bool? = nil) {
    self.id = id
    self.status = status
    self.appName = appName
    self.appDisplayName = appDisplayName
    self.version = version
    self.origin = origin
    self.shortVersion = shortVersion
    self.releaseNotes = releaseNotes
    self.provisioningProfileName = provisioningProfileName
    self.provisioningProfileType = provisioningProfileType
    self.isProvisioningProfileSyncing = isProvisioningProfileSyncing
    self.size = size
    self.minOs = minOs
    self.deviceFamily = deviceFamily
    self.androidMinAPILevel = androidMinAPILevel
    self.bundleIdentifier = bundleIdentifier
    self.fingerprint = fingerprint
    self.uploadedAt = uploadedAt
    self.downloadURL = downloadURL
    self.secondaryDownloadURL = secondaryDownloadURL
    self.appIconURL = appIconURL
    self.installURL = installURL
    self.distributionGroupID = distributionGroupID
    self.publishingStatus = publishingStatus
    self.destinationType = destinationType
    self.isExternalBuild = isExternalBuild
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decodeIfPresent(Int.self, forKey: "id")
    self.status = try values.decodeIfPresent(Status.self, forKey: "status")
    self.appName = try values.decodeIfPresent(String.self, forKey: "app_name")
    self.appDisplayName = try values.decodeIfPresent(String.self, forKey: "app_display_name")
    self.version = try values.decodeIfPresent(String.self, forKey: "version")
    self.origin = try values.decodeIfPresent(Origin.self, forKey: "origin")
    self.shortVersion = try values.decodeIfPresent(String.self, forKey: "short_version")
    self.releaseNotes = try values.decodeIfPresent(String.self, forKey: "release_notes")
    self.provisioningProfileName = try values.decodeIfPresent(String.self, forKey: "provisioning_profile_name")
    self.provisioningProfileType = try values.decodeIfPresent(ProvisioningProfileType.self, forKey: "provisioning_profile_type")
    self.isProvisioningProfileSyncing = try values.decodeIfPresent(Bool.self, forKey: "is_provisioning_profile_syncing")
    self.size = try values.decodeIfPresent(Int.self, forKey: "size")
    self.minOs = try values.decodeIfPresent(String.self, forKey: "min_os")
    self.deviceFamily = try values.decodeIfPresent(String.self, forKey: "device_family")
    self.androidMinAPILevel = try values.decodeIfPresent(String.self, forKey: "android_min_api_level")
    self.bundleIdentifier = try values.decodeIfPresent(String.self, forKey: "bundle_identifier")
    self.fingerprint = try values.decodeIfPresent(String.self, forKey: "fingerprint")
    self.uploadedAt = try values.decodeIfPresent(String.self, forKey: "uploaded_at")
    self.downloadURL = try values.decodeIfPresent(String.self, forKey: "download_url")
    self.secondaryDownloadURL = try values.decodeIfPresent(String.self, forKey: "secondary_download_url")
    self.appIconURL = try values.decodeIfPresent(String.self, forKey: "app_icon_url")
    self.installURL = try values.decodeIfPresent(String.self, forKey: "install_url")
    self.distributionGroupID = try values.decodeIfPresent(String.self, forKey: "distribution_group_id")
    self.publishingStatus = try values.decodeIfPresent(String.self, forKey: "publishing_status")
    self.destinationType = try values.decodeIfPresent(DestinationType.self, forKey: "destination_type")
    self.isExternalBuild = try values.decodeIfPresent(Bool.self, forKey: "is_external_build")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(id, forKey: "id")
    try values.encodeIfPresent(status, forKey: "status")
    try values.encodeIfPresent(appName, forKey: "app_name")
    try values.encodeIfPresent(appDisplayName, forKey: "app_display_name")
    try values.encodeIfPresent(version, forKey: "version")
    try values.encodeIfPresent(origin, forKey: "origin")
    try values.encodeIfPresent(shortVersion, forKey: "short_version")
    try values.encodeIfPresent(releaseNotes, forKey: "release_notes")
    try values.encodeIfPresent(provisioningProfileName, forKey: "provisioning_profile_name")
    try values.encodeIfPresent(provisioningProfileType, forKey: "provisioning_profile_type")
    try values.encodeIfPresent(isProvisioningProfileSyncing, forKey: "is_provisioning_profile_syncing")
    try values.encodeIfPresent(size, forKey: "size")
    try values.encodeIfPresent(minOs, forKey: "min_os")
    try values.encodeIfPresent(deviceFamily, forKey: "device_family")
    try values.encodeIfPresent(androidMinAPILevel, forKey: "android_min_api_level")
    try values.encodeIfPresent(bundleIdentifier, forKey: "bundle_identifier")
    try values.encodeIfPresent(fingerprint, forKey: "fingerprint")
    try values.encodeIfPresent(uploadedAt, forKey: "uploaded_at")
    try values.encodeIfPresent(downloadURL, forKey: "download_url")
    try values.encodeIfPresent(secondaryDownloadURL, forKey: "secondary_download_url")
    try values.encodeIfPresent(appIconURL, forKey: "app_icon_url")
    try values.encodeIfPresent(installURL, forKey: "install_url")
    try values.encodeIfPresent(distributionGroupID, forKey: "distribution_group_id")
    try values.encodeIfPresent(publishingStatus, forKey: "publishing_status")
    try values.encodeIfPresent(destinationType, forKey: "destination_type")
    try values.encodeIfPresent(isExternalBuild, forKey: "is_external_build")
  }
}
