// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Object returned in response to getting a bug tracker issue related to a crash group id
public struct BugTrackerIssueResult: Codable, Identifiable {
  public var id: String?
  public var url: String?
  public var title: String?
  public var bugTrackerType: BugTrackerType?
  public var repoName: String?
  public var mobileCenterID: String?
  public var eventType: String?

  public enum BugTrackerType: String, Codable, CaseIterable {
    case github
    case vsts
    case jira
  }

  public init(id: String? = nil, url: String? = nil, title: String? = nil, bugTrackerType: BugTrackerType? = nil, repoName: String? = nil, mobileCenterID: String? = nil, eventType: String? = nil) {
    self.id = id
    self.url = url
    self.title = title
    self.bugTrackerType = bugTrackerType
    self.repoName = repoName
    self.mobileCenterID = mobileCenterID
    self.eventType = eventType
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decodeIfPresent(String.self, forKey: "id")
    self.url = try values.decodeIfPresent(String.self, forKey: "url")
    self.title = try values.decodeIfPresent(String.self, forKey: "title")
    self.bugTrackerType = try values.decodeIfPresent(BugTrackerType.self, forKey: "bug_tracker_type")
    self.repoName = try values.decodeIfPresent(String.self, forKey: "repo_name")
    self.mobileCenterID = try values.decodeIfPresent(String.self, forKey: "mobile_center_id")
    self.eventType = try values.decodeIfPresent(String.self, forKey: "event_type")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(id, forKey: "id")
    try values.encodeIfPresent(url, forKey: "url")
    try values.encodeIfPresent(title, forKey: "title")
    try values.encodeIfPresent(bugTrackerType, forKey: "bug_tracker_type")
    try values.encodeIfPresent(repoName, forKey: "repo_name")
    try values.encodeIfPresent(mobileCenterID, forKey: "mobile_center_id")
    try values.encodeIfPresent(eventType, forKey: "event_type")
  }
}
