// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Build configuration for Xamarin projects
public struct XamarinBranchConfigurationProperties: Codable {
  public var slnPath: String?
  public var isSimBuild: Bool?
  public var args: String?
  public var configuration: String?
  public var p12File: String?
  public var p12Pwd: String?
  public var provProfile: String?
  public var monoVersion: String?
  public var sdkBundle: String?
  /// Symlink of the SDK Bundle and Mono installation.
  /// The build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.
  public var symlink: String?

  public init(slnPath: String? = nil, isSimBuild: Bool? = nil, args: String? = nil, configuration: String? = nil, p12File: String? = nil, p12Pwd: String? = nil, provProfile: String? = nil, monoVersion: String? = nil, sdkBundle: String? = nil, symlink: String? = nil) {
    self.slnPath = slnPath
    self.isSimBuild = isSimBuild
    self.args = args
    self.configuration = configuration
    self.p12File = p12File
    self.p12Pwd = p12Pwd
    self.provProfile = provProfile
    self.monoVersion = monoVersion
    self.sdkBundle = sdkBundle
    self.symlink = symlink
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.slnPath = try values.decodeIfPresent(String.self, forKey: "slnPath")
    self.isSimBuild = try values.decodeIfPresent(Bool.self, forKey: "isSimBuild")
    self.args = try values.decodeIfPresent(String.self, forKey: "args")
    self.configuration = try values.decodeIfPresent(String.self, forKey: "configuration")
    self.p12File = try values.decodeIfPresent(String.self, forKey: "p12File")
    self.p12Pwd = try values.decodeIfPresent(String.self, forKey: "p12Pwd")
    self.provProfile = try values.decodeIfPresent(String.self, forKey: "provProfile")
    self.monoVersion = try values.decodeIfPresent(String.self, forKey: "monoVersion")
    self.sdkBundle = try values.decodeIfPresent(String.self, forKey: "sdkBundle")
    self.symlink = try values.decodeIfPresent(String.self, forKey: "symlink")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(slnPath, forKey: "slnPath")
    try values.encodeIfPresent(isSimBuild, forKey: "isSimBuild")
    try values.encodeIfPresent(args, forKey: "args")
    try values.encodeIfPresent(configuration, forKey: "configuration")
    try values.encodeIfPresent(p12File, forKey: "p12File")
    try values.encodeIfPresent(p12Pwd, forKey: "p12Pwd")
    try values.encodeIfPresent(provProfile, forKey: "provProfile")
    try values.encodeIfPresent(monoVersion, forKey: "monoVersion")
    try values.encodeIfPresent(sdkBundle, forKey: "sdkBundle")
    try values.encodeIfPresent(symlink, forKey: "symlink")
  }
}
