// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AlertingCrashGroup: Codable, Identifiable {
  public var url: String?
  public var appDisplayName: String?
  /// SDK/Platform this thread is beeing generated from
  public var appPlatform: AppPlatform?
  public var appVersion: String?
  public var id: String?
  public var name: String?
  public var reason: String?
  public var stackTrace: [String]?

  /// SDK/Platform this thread is beeing generated from
  public enum AppPlatform: String, Codable, CaseIterable {
    case ios
    case android
    case xamarin
    case reactNative = "react-native"
    case ndk
    case unity
    case other
  }

  public init(url: String? = nil, appDisplayName: String? = nil, appPlatform: AppPlatform? = nil, appVersion: String? = nil, id: String? = nil, name: String? = nil, reason: String? = nil, stackTrace: [String]? = nil) {
    self.url = url
    self.appDisplayName = appDisplayName
    self.appPlatform = appPlatform
    self.appVersion = appVersion
    self.id = id
    self.name = name
    self.reason = reason
    self.stackTrace = stackTrace
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.url = try values.decodeIfPresent(String.self, forKey: "url")
    self.appDisplayName = try values.decodeIfPresent(String.self, forKey: "app_display_name")
    self.appPlatform = try values.decodeIfPresent(AppPlatform.self, forKey: "app_platform")
    self.appVersion = try values.decodeIfPresent(String.self, forKey: "app_version")
    self.id = try values.decodeIfPresent(String.self, forKey: "id")
    self.name = try values.decodeIfPresent(String.self, forKey: "name")
    self.reason = try values.decodeIfPresent(String.self, forKey: "reason")
    self.stackTrace = try values.decodeIfPresent([String].self, forKey: "stack_trace")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(url, forKey: "url")
    try values.encodeIfPresent(appDisplayName, forKey: "app_display_name")
    try values.encodeIfPresent(appPlatform, forKey: "app_platform")
    try values.encodeIfPresent(appVersion, forKey: "app_version")
    try values.encodeIfPresent(id, forKey: "id")
    try values.encodeIfPresent(name, forKey: "name")
    try values.encodeIfPresent(reason, forKey: "reason")
    try values.encodeIfPresent(stackTrace, forKey: "stack_trace")
  }
}
