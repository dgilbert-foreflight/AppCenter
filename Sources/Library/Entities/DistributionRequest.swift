// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct DistributionRequest: Codable {
  /// Array of objects {id:string, type:string} with "id" being the distribution group ID, store ID, or tester email, and "type" being "group", "store", or "tester"
  public var destinations: [Destination]?
  /// The release notes
  public var releaseNotes: String?
  public var isMandatoryUpdate: Bool?
  public var isNotifyTesters: Bool

  /// Destination details for distributing build releases
  public struct Destination: Codable, Identifiable {
    public var id: String
    public var type: `Type`

    public enum `Type`: String, Codable, CaseIterable {
      case store
      case group
      case tester
    }

    public init(id: String, type: `Type`) {
      self.id = id
      self.type = type
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.id = try values.decode(String.self, forKey: "id")
      self.type = try values.decode(`Type`.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(id, forKey: "id")
      try values.encode(type, forKey: "type")
    }
  }

  public init(destinations: [Destination]? = nil, releaseNotes: String? = nil, isMandatoryUpdate: Bool? = nil, isNotifyTesters: Bool? = nil) {
    self.destinations = destinations
    self.releaseNotes = releaseNotes
    self.isMandatoryUpdate = isMandatoryUpdate
    self.isNotifyTesters = isNotifyTesters ?? true
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.destinations = try values.decodeIfPresent([Destination].self, forKey: "destinations")
    self.releaseNotes = try values.decodeIfPresent(String.self, forKey: "releaseNotes")
    self.isMandatoryUpdate = try values.decodeIfPresent(Bool.self, forKey: "mandatoryUpdate")
    self.isNotifyTesters = try values.decodeIfPresent(Bool.self, forKey: "notifyTesters") ?? true
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(destinations, forKey: "destinations")
    try values.encodeIfPresent(releaseNotes, forKey: "releaseNotes")
    try values.encodeIfPresent(isMandatoryUpdate, forKey: "mandatoryUpdate")
    try values.encodeIfPresent(isNotifyTesters, forKey: "notifyTesters")
  }
}
