// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct LegacyCodePushStatusMetricMetadata: Codable {
  public var deploymentKey: String?
  public var label: String?
  public var appVersion: String?
  public var previousDeploymentKey: String?
  public var previousLabelOrAppVersion: String?
  public var status: String?
  public var clientUniqueID: String?

  public init(deploymentKey: String? = nil, label: String? = nil, appVersion: String? = nil, previousDeploymentKey: String? = nil, previousLabelOrAppVersion: String? = nil, status: String? = nil, clientUniqueID: String? = nil) {
    self.deploymentKey = deploymentKey
    self.label = label
    self.appVersion = appVersion
    self.previousDeploymentKey = previousDeploymentKey
    self.previousLabelOrAppVersion = previousLabelOrAppVersion
    self.status = status
    self.clientUniqueID = clientUniqueID
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.deploymentKey = try values.decodeIfPresent(String.self, forKey: "deploymentKey")
    self.label = try values.decodeIfPresent(String.self, forKey: "label")
    self.appVersion = try values.decodeIfPresent(String.self, forKey: "appVersion")
    self.previousDeploymentKey = try values.decodeIfPresent(String.self, forKey: "previousDeploymentKey")
    self.previousLabelOrAppVersion = try values.decodeIfPresent(String.self, forKey: "previousLabelOrAppVersion")
    self.status = try values.decodeIfPresent(String.self, forKey: "status")
    self.clientUniqueID = try values.decodeIfPresent(String.self, forKey: "clientUniqueId")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(deploymentKey, forKey: "deploymentKey")
    try values.encodeIfPresent(label, forKey: "label")
    try values.encodeIfPresent(appVersion, forKey: "appVersion")
    try values.encodeIfPresent(previousDeploymentKey, forKey: "previousDeploymentKey")
    try values.encodeIfPresent(previousLabelOrAppVersion, forKey: "previousLabelOrAppVersion")
    try values.encodeIfPresent(status, forKey: "status")
    try values.encodeIfPresent(clientUniqueID, forKey: "clientUniqueId")
  }
}
