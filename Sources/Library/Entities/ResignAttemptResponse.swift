// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// URL that can be used to check the status of the update devices operation and the updated profiles.
public struct ResignAttemptResponse: Codable {
  /// The status of the resigning operation.
  public var status: String
  /// ID of the user performing the resign operaiton.
  public var userID: String
  /// App ID that the resign operation is being performed against.
  public var appID: String
  /// ID of the release which is being resigned.
  public var originalReleaseID: Double
  /// ID of the resign operation.
  public var resignID: String
  /// Context ID for the resigning operation.
  public var contextID: String
  /// The time that the resign operation was started.
  public var startTime: Double
  /// List of destinations that the resign operation is being performed against.
  public var destinations: [[String: AnyJSON]]?
  /// Error code associated with the exception.
  public var errorCode: String?
  /// Error message associated with the exception.
  public var errorMessage: String?

  public init(status: String, userID: String, appID: String, originalReleaseID: Double, resignID: String, contextID: String, startTime: Double, destinations: [[String: AnyJSON]]? = nil, errorCode: String? = nil, errorMessage: String? = nil) {
    self.status = status
    self.userID = userID
    self.appID = appID
    self.originalReleaseID = originalReleaseID
    self.resignID = resignID
    self.contextID = contextID
    self.startTime = startTime
    self.destinations = destinations
    self.errorCode = errorCode
    self.errorMessage = errorMessage
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.status = try values.decode(String.self, forKey: "status")
    self.userID = try values.decode(String.self, forKey: "userId")
    self.appID = try values.decode(String.self, forKey: "appId")
    self.originalReleaseID = try values.decode(Double.self, forKey: "originalReleaseId")
    self.resignID = try values.decode(String.self, forKey: "resignId")
    self.contextID = try values.decode(String.self, forKey: "contextId")
    self.startTime = try values.decode(Double.self, forKey: "startTime")
    self.destinations = try values.decodeIfPresent([[String: AnyJSON]].self, forKey: "destinations")
    self.errorCode = try values.decodeIfPresent(String.self, forKey: "errorCode")
    self.errorMessage = try values.decodeIfPresent(String.self, forKey: "errorMessage")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(status, forKey: "status")
    try values.encode(userID, forKey: "userId")
    try values.encode(appID, forKey: "appId")
    try values.encode(originalReleaseID, forKey: "originalReleaseId")
    try values.encode(resignID, forKey: "resignId")
    try values.encode(contextID, forKey: "contextId")
    try values.encode(startTime, forKey: "startTime")
    try values.encodeIfPresent(destinations, forKey: "destinations")
    try values.encodeIfPresent(errorCode, forKey: "errorCode")
    try values.encodeIfPresent(errorMessage, forKey: "errorMessage")
  }
}
