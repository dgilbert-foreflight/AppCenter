// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// ExternalStoreResponse
public struct ExternalStoreResponse: Codable, Identifiable {
  /// Store id
  public var id: String?
  /// Store Name
  public var name: String?
  /// Store Type
  public var type: String?
  /// Store track
  public var track: Track?
  /// Store details for intune
  public var intuneDetails: IntuneDetails?
  /// Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.
  public var serviceConnectionID: String?
  /// The ID of the principal that created the store.
  public var createdBy: String?
  /// The type of the principal that created the store.
  public var createdByPrincipalType: String?

  /// Store track
  public enum Track: String, Codable, CaseIterable {
    case production
    case alpha
    case beta
    case testflightInternal = "testflight-internal"
    case testflightExternal = "testflight-external"
  }

  /// Store details for intune
  public struct IntuneDetails: Codable {
    public var targetAudience: TargetAudience?
    public var appCategory: AppCategory?

    public struct TargetAudience: Codable, Identifiable {
      /// Display name for the target audience/group
      public var name: String?
      /// ID for the target audience/group.
      public var id: String?

      public init(name: String? = nil, id: String? = nil) {
        self.name = name
        self.id = id
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(id, forKey: "id")
      }
    }

    public struct AppCategory: Codable, Identifiable {
      /// Display name for the app category
      public var name: String?
      /// ID for the category.
      public var id: String?

      public init(name: String? = nil, id: String? = nil) {
        self.name = name
        self.id = id
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(id, forKey: "id")
      }
    }

    public init(targetAudience: TargetAudience? = nil, appCategory: AppCategory? = nil) {
      self.targetAudience = targetAudience
      self.appCategory = appCategory
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.targetAudience = try values.decodeIfPresent(TargetAudience.self, forKey: "target_audience")
      self.appCategory = try values.decodeIfPresent(AppCategory.self, forKey: "app_category")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(targetAudience, forKey: "target_audience")
      try values.encodeIfPresent(appCategory, forKey: "app_category")
    }
  }

  public init(id: String? = nil, name: String? = nil, type: String? = nil, track: Track? = nil, intuneDetails: IntuneDetails? = nil, serviceConnectionID: String? = nil, createdBy: String? = nil, createdByPrincipalType: String? = nil) {
    self.id = id
    self.name = name
    self.type = type
    self.track = track
    self.intuneDetails = intuneDetails
    self.serviceConnectionID = serviceConnectionID
    self.createdBy = createdBy
    self.createdByPrincipalType = createdByPrincipalType
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decodeIfPresent(String.self, forKey: "id")
    self.name = try values.decodeIfPresent(String.self, forKey: "name")
    self.type = try values.decodeIfPresent(String.self, forKey: "type")
    self.track = try values.decodeIfPresent(Track.self, forKey: "track")
    self.intuneDetails = try values.decodeIfPresent(IntuneDetails.self, forKey: "intune_details")
    self.serviceConnectionID = try values.decodeIfPresent(String.self, forKey: "service_connection_id")
    self.createdBy = try values.decodeIfPresent(String.self, forKey: "created_by")
    self.createdByPrincipalType = try values.decodeIfPresent(String.self, forKey: "created_by_principal_type")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(id, forKey: "id")
    try values.encodeIfPresent(name, forKey: "name")
    try values.encodeIfPresent(type, forKey: "type")
    try values.encodeIfPresent(track, forKey: "track")
    try values.encodeIfPresent(intuneDetails, forKey: "intune_details")
    try values.encodeIfPresent(serviceConnectionID, forKey: "service_connection_id")
    try values.encodeIfPresent(createdBy, forKey: "created_by")
    try values.encodeIfPresent(createdByPrincipalType, forKey: "created_by_principal_type")
  }
}
