// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AppFeatures: Codable {
  /// App supports modification of crashgroup status
  public var isCrashgroupModifyStatus: Bool?
  /// App supports modification of crashgroup annotation
  public var isCrashgroupModifyAnnotation: Bool?
  /// App supports search API
  public var isSearch: Bool?
  /// App supports the 'crash free user' metric
  public var isCrashgroupAnalyticsCrashfreeusers: Bool?
  /// App supports the 'impacted users' metric
  public var isCrashgroupAnalyticsImpactedusers: Bool?
  /// App supports download of raw crashes
  public var isCrashDownloadRaw: Bool?

  public init(isCrashgroupModifyStatus: Bool? = nil, isCrashgroupModifyAnnotation: Bool? = nil, isSearch: Bool? = nil, isCrashgroupAnalyticsCrashfreeusers: Bool? = nil, isCrashgroupAnalyticsImpactedusers: Bool? = nil, isCrashDownloadRaw: Bool? = nil) {
    self.isCrashgroupModifyStatus = isCrashgroupModifyStatus
    self.isCrashgroupModifyAnnotation = isCrashgroupModifyAnnotation
    self.isSearch = isSearch
    self.isCrashgroupAnalyticsCrashfreeusers = isCrashgroupAnalyticsCrashfreeusers
    self.isCrashgroupAnalyticsImpactedusers = isCrashgroupAnalyticsImpactedusers
    self.isCrashDownloadRaw = isCrashDownloadRaw
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.isCrashgroupModifyStatus = try values.decodeIfPresent(Bool.self, forKey: "crashgroup_modify_status")
    self.isCrashgroupModifyAnnotation = try values.decodeIfPresent(Bool.self, forKey: "crashgroup_modify_annotation")
    self.isSearch = try values.decodeIfPresent(Bool.self, forKey: "search")
    self.isCrashgroupAnalyticsCrashfreeusers = try values.decodeIfPresent(Bool.self, forKey: "crashgroup_analytics_crashfreeusers")
    self.isCrashgroupAnalyticsImpactedusers = try values.decodeIfPresent(Bool.self, forKey: "crashgroup_analytics_impactedusers")
    self.isCrashDownloadRaw = try values.decodeIfPresent(Bool.self, forKey: "crash_download_raw")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(isCrashgroupModifyStatus, forKey: "crashgroup_modify_status")
    try values.encodeIfPresent(isCrashgroupModifyAnnotation, forKey: "crashgroup_modify_annotation")
    try values.encodeIfPresent(isSearch, forKey: "search")
    try values.encodeIfPresent(isCrashgroupAnalyticsCrashfreeusers, forKey: "crashgroup_analytics_crashfreeusers")
    try values.encodeIfPresent(isCrashgroupAnalyticsImpactedusers, forKey: "crashgroup_analytics_impactedusers")
    try values.encodeIfPresent(isCrashDownloadRaw, forKey: "crash_download_raw")
  }
}
