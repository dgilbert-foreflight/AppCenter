// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct PatchReleaseRequest: Codable {
  /// Updated status of release
  public var status: String?
  /// Destination Publish Id
  public var destPublishID: String?
  /// Failure error details from store
  public var errorDetails: String?
  /// ContextId for failed error message
  public var errorContextID: String?
  /// Package url for wrapping request
  public var wrapPackageURL: String?
  /// Request is for wrapping or not
  public var isWrapperRequest: Bool?

  public init(status: String? = nil, destPublishID: String? = nil, errorDetails: String? = nil, errorContextID: String? = nil, wrapPackageURL: String? = nil, isWrapperRequest: Bool? = nil) {
    self.status = status
    self.destPublishID = destPublishID
    self.errorDetails = errorDetails
    self.errorContextID = errorContextID
    self.wrapPackageURL = wrapPackageURL
    self.isWrapperRequest = isWrapperRequest
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.status = try values.decodeIfPresent(String.self, forKey: "status")
    self.destPublishID = try values.decodeIfPresent(String.self, forKey: "dest_publish_id")
    self.errorDetails = try values.decodeIfPresent(String.self, forKey: "error_details")
    self.errorContextID = try values.decodeIfPresent(String.self, forKey: "error_contextId")
    self.wrapPackageURL = try values.decodeIfPresent(String.self, forKey: "wrap_package_url")
    self.isWrapperRequest = try values.decodeIfPresent(Bool.self, forKey: "is_wrapper_request")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(status, forKey: "status")
    try values.encodeIfPresent(destPublishID, forKey: "dest_publish_id")
    try values.encodeIfPresent(errorDetails, forKey: "error_details")
    try values.encodeIfPresent(errorContextID, forKey: "error_contextId")
    try values.encodeIfPresent(wrapPackageURL, forKey: "wrap_package_url")
    try values.encodeIfPresent(isWrapperRequest, forKey: "is_wrapper_request")
  }
}
