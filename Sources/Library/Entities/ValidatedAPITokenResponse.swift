// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct ValidatedAPITokenResponse: Codable {
  /// The token's unique id (UUID)
  public var tokenID: UUID
  /// The token's scope. A list of allowed roles.
  public var tokenScope: [TokenScopeItem]
  /// The ID of the owner of the API Token (user_id or app_id)
  public var principalID: UUID
  /// Indicates the type of the principal (app or user)
  public var principalType: PrincipalType
  /// Collection of attributes that describe the principal of the specified API Token
  public var claims: [Claim]

  public enum TokenScopeItem: String, Codable, CaseIterable {
    case all
    case inAppUpdate = "in_app_update"
    case viewer
  }

  /// Indicates the type of the principal (app or user)
  public enum PrincipalType: String, Codable, CaseIterable {
    case app
    case user
  }

  public struct Claim: Codable {
    public var claimType: ClaimType?
    public var claimValue: String?

    public enum ClaimType: String, Codable, CaseIterable {
      case userEmail = "user_email"
      case userOrigin = "user_origin"
      case appOwnerName = "app_owner_name"
      case appName = "app_name"
      case appOrigin = "app_origin"
      case appOs = "app_os"
      case appPlatform = "app_platform"
      case appSecret = "app_secret"
    }

    public init(claimType: ClaimType? = nil, claimValue: String? = nil) {
      self.claimType = claimType
      self.claimValue = claimValue
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.claimType = try values.decodeIfPresent(ClaimType.self, forKey: "claim_type")
      self.claimValue = try values.decodeIfPresent(String.self, forKey: "claim_value")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(claimType, forKey: "claim_type")
      try values.encodeIfPresent(claimValue, forKey: "claim_value")
    }
  }

  public init(tokenID: UUID, tokenScope: [TokenScopeItem], principalID: UUID, principalType: PrincipalType, claims: [Claim]) {
    self.tokenID = tokenID
    self.tokenScope = tokenScope
    self.principalID = principalID
    self.principalType = principalType
    self.claims = claims
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.tokenID = try values.decode(UUID.self, forKey: "token_id")
    self.tokenScope = try values.decode([TokenScopeItem].self, forKey: "token_scope")
    self.principalID = try values.decode(UUID.self, forKey: "principal_id")
    self.principalType = try values.decode(PrincipalType.self, forKey: "principal_type")
    self.claims = try values.decode([Claim].self, forKey: "claims")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(tokenID, forKey: "token_id")
    try values.encode(tokenScope, forKey: "token_scope")
    try values.encode(principalID, forKey: "principal_id")
    try values.encode(principalType, forKey: "principal_type")
    try values.encode(claims, forKey: "claims")
  }
}
