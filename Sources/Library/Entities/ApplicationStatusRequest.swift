// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// The information needed to fetch the status of an application
public struct ApplicationStatusRequest: Codable {
  /// The username for the Apple Developer account.
  public var username: String
  /// The password for the Apple Developer account.
  public var password: String
  /// Bundle Identifier of application in Apple Itunes portal.
  public var bundleIdentifier: String
  /// Track Identifier for which the status is to be fetched.
  public var trackIdentifier: String
  /// The version of build for which real time status is to be fetched.
  public var buildVersion: String?
  /// Identifier of the team to use when logged in.
  public var teamIdentifier: String?
  /// The Train version for which the status is to be fetched.
  public var trainVersion: String?

  public init(username: String, password: String, bundleIdentifier: String, trackIdentifier: String, buildVersion: String? = nil, teamIdentifier: String? = nil, trainVersion: String? = nil) {
    self.username = username
    self.password = password
    self.bundleIdentifier = bundleIdentifier
    self.trackIdentifier = trackIdentifier
    self.buildVersion = buildVersion
    self.teamIdentifier = teamIdentifier
    self.trainVersion = trainVersion
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.username = try values.decode(String.self, forKey: "username")
    self.password = try values.decode(String.self, forKey: "password")
    self.bundleIdentifier = try values.decode(String.self, forKey: "bundle_identifier")
    self.trackIdentifier = try values.decode(String.self, forKey: "track_identifier")
    self.buildVersion = try values.decodeIfPresent(String.self, forKey: "build_version")
    self.teamIdentifier = try values.decodeIfPresent(String.self, forKey: "team_identifier")
    self.trainVersion = try values.decodeIfPresent(String.self, forKey: "train_version")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(username, forKey: "username")
    try values.encode(password, forKey: "password")
    try values.encode(bundleIdentifier, forKey: "bundle_identifier")
    try values.encode(trackIdentifier, forKey: "track_identifier")
    try values.encodeIfPresent(buildVersion, forKey: "build_version")
    try values.encodeIfPresent(teamIdentifier, forKey: "team_identifier")
    try values.encodeIfPresent(trainVersion, forKey: "train_version")
  }
}
