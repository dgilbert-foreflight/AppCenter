// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AppRepoPatchRequest: Codable {
  /// The absolute URL of the repository
  public var repoURL: String?
  /// The unique id (UUID) of the user
  public var userID: UUID?
  /// The external user id from the provider
  public var externalUserID: String?
  /// The id of the service connection stored in customer credential store
  public var serviceConnectionID: UUID?

  public init(repoURL: String? = nil, userID: UUID? = nil, externalUserID: String? = nil, serviceConnectionID: UUID? = nil) {
    self.repoURL = repoURL
    self.userID = userID
    self.externalUserID = externalUserID
    self.serviceConnectionID = serviceConnectionID
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.repoURL = try values.decodeIfPresent(String.self, forKey: "repo_url")
    self.userID = try values.decodeIfPresent(UUID.self, forKey: "user_id")
    self.externalUserID = try values.decodeIfPresent(String.self, forKey: "external_user_id")
    self.serviceConnectionID = try values.decodeIfPresent(UUID.self, forKey: "service_connection_id")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(repoURL, forKey: "repo_url")
    try values.encodeIfPresent(userID, forKey: "user_id")
    try values.encodeIfPresent(externalUserID, forKey: "external_user_id")
    try values.encodeIfPresent(serviceConnectionID, forKey: "service_connection_id")
  }
}
