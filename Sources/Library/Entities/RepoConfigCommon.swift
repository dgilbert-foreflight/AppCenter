// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct RepoConfigCommon: Codable {
  /// The repository's git url, must be a HTTPS URL
  ///
  /// Example: "https://github.com/foo/bar.git"
  public var repoURL: String?
  /// The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com
  public var repoID: String?
  /// The external user id from the repository provider. Required for GitLab.com repositories
  public var externalUserID: String?
  /// The id of the service connection (private). Required for GitLab self-hosted repositories
  public var serviceConnectionID: String?

  public init(repoURL: String? = nil, repoID: String? = nil, externalUserID: String? = nil, serviceConnectionID: String? = nil) {
    self.repoURL = repoURL
    self.repoID = repoID
    self.externalUserID = externalUserID
    self.serviceConnectionID = serviceConnectionID
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.repoURL = try values.decodeIfPresent(String.self, forKey: "repo_url")
    self.repoID = try values.decodeIfPresent(String.self, forKey: "repo_id")
    self.externalUserID = try values.decodeIfPresent(String.self, forKey: "external_user_id")
    self.serviceConnectionID = try values.decodeIfPresent(String.self, forKey: "service_connection_id")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(repoURL, forKey: "repo_url")
    try values.encodeIfPresent(repoID, forKey: "repo_id")
    try values.encodeIfPresent(externalUserID, forKey: "external_user_id")
    try values.encodeIfPresent(serviceConnectionID, forKey: "service_connection_id")
  }
}
