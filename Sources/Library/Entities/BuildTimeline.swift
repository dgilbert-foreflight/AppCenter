// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct BuildTimeline: Codable, Identifiable {
  public var id: String?
  public var records: [Record]?

  public struct Record: Codable, Identifiable {
    public var id: String?
    public var name: String?
    public var order: Double?
    public var percentComplete: Double?
    public var currentOperation: String?
    public var state: String?
    public var result: String?
    public var errorCount: Double?
    public var warningCount: Double?
    public var issues: [Issue]?
    public var startTime: String?
    public var finishTime: String?
    public var type: String?

    public struct Issue: Codable {
      public var category: String?
      public var message: String?
      public var type: String?

      public init(category: String? = nil, message: String? = nil, type: String? = nil) {
        self.category = category
        self.message = message
        self.type = type
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.category = try values.decodeIfPresent(String.self, forKey: "category")
        self.message = try values.decodeIfPresent(String.self, forKey: "message")
        self.type = try values.decodeIfPresent(String.self, forKey: "type")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(category, forKey: "category")
        try values.encodeIfPresent(message, forKey: "message")
        try values.encodeIfPresent(type, forKey: "type")
      }
    }

    public init(id: String? = nil, name: String? = nil, order: Double? = nil, percentComplete: Double? = nil, currentOperation: String? = nil, state: String? = nil, result: String? = nil, errorCount: Double? = nil, warningCount: Double? = nil, issues: [Issue]? = nil, startTime: String? = nil, finishTime: String? = nil, type: String? = nil) {
      self.id = id
      self.name = name
      self.order = order
      self.percentComplete = percentComplete
      self.currentOperation = currentOperation
      self.state = state
      self.result = result
      self.errorCount = errorCount
      self.warningCount = warningCount
      self.issues = issues
      self.startTime = startTime
      self.finishTime = finishTime
      self.type = type
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.id = try values.decodeIfPresent(String.self, forKey: "id")
      self.name = try values.decodeIfPresent(String.self, forKey: "name")
      self.order = try values.decodeIfPresent(Double.self, forKey: "order")
      self.percentComplete = try values.decodeIfPresent(Double.self, forKey: "percentComplete")
      self.currentOperation = try values.decodeIfPresent(String.self, forKey: "currentOperation")
      self.state = try values.decodeIfPresent(String.self, forKey: "state")
      self.result = try values.decodeIfPresent(String.self, forKey: "result")
      self.errorCount = try values.decodeIfPresent(Double.self, forKey: "errorCount")
      self.warningCount = try values.decodeIfPresent(Double.self, forKey: "warningCount")
      self.issues = try values.decodeIfPresent([Issue].self, forKey: "issues")
      self.startTime = try values.decodeIfPresent(String.self, forKey: "startTime")
      self.finishTime = try values.decodeIfPresent(String.self, forKey: "finishTime")
      self.type = try values.decodeIfPresent(String.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(id, forKey: "id")
      try values.encodeIfPresent(name, forKey: "name")
      try values.encodeIfPresent(order, forKey: "order")
      try values.encodeIfPresent(percentComplete, forKey: "percentComplete")
      try values.encodeIfPresent(currentOperation, forKey: "currentOperation")
      try values.encodeIfPresent(state, forKey: "state")
      try values.encodeIfPresent(result, forKey: "result")
      try values.encodeIfPresent(errorCount, forKey: "errorCount")
      try values.encodeIfPresent(warningCount, forKey: "warningCount")
      try values.encodeIfPresent(issues, forKey: "issues")
      try values.encodeIfPresent(startTime, forKey: "startTime")
      try values.encodeIfPresent(finishTime, forKey: "finishTime")
      try values.encodeIfPresent(type, forKey: "type")
    }
  }

  public init(id: String? = nil, records: [Record]? = nil) {
    self.id = id
    self.records = records
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decodeIfPresent(String.self, forKey: "id")
    self.records = try values.decodeIfPresent([Record].self, forKey: "records")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(id, forKey: "id")
    try values.encodeIfPresent(records, forKey: "records")
  }
}
