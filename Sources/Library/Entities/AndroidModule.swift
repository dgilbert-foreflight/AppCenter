// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AndroidModule: Codable {
  /// Name of the Android module
  public var name: String
  /// Module contains bundle settings
  public var hasBundle: Bool?
  /// The product flavors of the Android module
  public var productFlavors: [String]?
  /// The detected build variants of the Android module (matrix of product flavor + build type (debug|release))
  public var buildVariants: [String]?
  /// The detected build types of the Android module
  public var buildTypes: [String]?
  /// The detected build configurations of the Android module
  public var buildConfigurations: [BuildConfiguration]?
  /// Whether the module is at the root level of the project
  public var isRoot: Bool?

  public struct BuildConfiguration: Codable {
    /// Name of build configuration (the same as a build type name)
    public var name: String
    /// Android signing config. Null if not specified
    public var signingConfig: SigningConfig?

    /// Android signing config. Null if not specified
    public struct SigningConfig: Codable {
      /// Indicates if storeFile is specified in the signing configuration
      public var hasStoreFile: Bool?

      public init(hasStoreFile: Bool? = nil) {
        self.hasStoreFile = hasStoreFile
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.hasStoreFile = try values.decodeIfPresent(Bool.self, forKey: "hasStoreFile")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(hasStoreFile, forKey: "hasStoreFile")
      }
    }

    public init(name: String, signingConfig: SigningConfig? = nil) {
      self.name = name
      self.signingConfig = signingConfig
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.name = try values.decode(String.self, forKey: "name")
      self.signingConfig = try values.decodeIfPresent(SigningConfig.self, forKey: "signingConfig")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(name, forKey: "name")
      try values.encodeIfPresent(signingConfig, forKey: "signingConfig")
    }
  }

  public init(name: String, hasBundle: Bool? = nil, productFlavors: [String]? = nil, buildVariants: [String]? = nil, buildTypes: [String]? = nil, buildConfigurations: [BuildConfiguration]? = nil, isRoot: Bool? = nil) {
    self.name = name
    self.hasBundle = hasBundle
    self.productFlavors = productFlavors
    self.buildVariants = buildVariants
    self.buildTypes = buildTypes
    self.buildConfigurations = buildConfigurations
    self.isRoot = isRoot
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.name = try values.decode(String.self, forKey: "name")
    self.hasBundle = try values.decodeIfPresent(Bool.self, forKey: "hasBundle")
    self.productFlavors = try values.decodeIfPresent([String].self, forKey: "productFlavors")
    self.buildVariants = try values.decodeIfPresent([String].self, forKey: "buildVariants")
    self.buildTypes = try values.decodeIfPresent([String].self, forKey: "buildTypes")
    self.buildConfigurations = try values.decodeIfPresent([BuildConfiguration].self, forKey: "buildConfigurations")
    self.isRoot = try values.decodeIfPresent(Bool.self, forKey: "isRoot")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(name, forKey: "name")
    try values.encodeIfPresent(hasBundle, forKey: "hasBundle")
    try values.encodeIfPresent(productFlavors, forKey: "productFlavors")
    try values.encodeIfPresent(buildVariants, forKey: "buildVariants")
    try values.encodeIfPresent(buildTypes, forKey: "buildTypes")
    try values.encodeIfPresent(buildConfigurations, forKey: "buildConfigurations")
    try values.encodeIfPresent(isRoot, forKey: "isRoot")
  }
}
