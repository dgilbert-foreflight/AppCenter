// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Usage section in the Billing Information
public struct BillingResourceUsage: Codable {
  /// Resource usage for a single Mobile Center service
  public var buildService: BuildService?
  /// Resource usage for a single Mobile Center service
  public var testService: TestService?

  /// Resource usage for a single Mobile Center service
  public struct BuildService: Codable {
    /// Usage for a single period
    public var currentUsagePeriod: CurrentUsagePeriod?

    /// Usage for a single period
    public struct CurrentUsagePeriod: Codable {
      /// Inclusive start time of the usage period
      public var startTime: String?
      /// Exclusive end time of the usage period.
      public var endTime: String?
      /// A collection of named numeric values
      public var byAccount: [String: Double]?
      /// A collection of  named numeric values grouped by app
      public var byApp: [String: [String: Double]]?

      public init(startTime: String? = nil, endTime: String? = nil, byAccount: [String: Double]? = nil, byApp: [String: [String: Double]]? = nil) {
        self.startTime = startTime
        self.endTime = endTime
        self.byAccount = byAccount
        self.byApp = byApp
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.startTime = try values.decodeIfPresent(String.self, forKey: "startTime")
        self.endTime = try values.decodeIfPresent(String.self, forKey: "endTime")
        self.byAccount = try values.decodeIfPresent([String: Double].self, forKey: "byAccount")
        self.byApp = try values.decodeIfPresent([String: [String: Double]].self, forKey: "byApp")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(startTime, forKey: "startTime")
        try values.encodeIfPresent(endTime, forKey: "endTime")
        try values.encodeIfPresent(byAccount, forKey: "byAccount")
        try values.encodeIfPresent(byApp, forKey: "byApp")
      }
    }

    public init(currentUsagePeriod: CurrentUsagePeriod? = nil) {
      self.currentUsagePeriod = currentUsagePeriod
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.currentUsagePeriod = try values.decodeIfPresent(CurrentUsagePeriod.self, forKey: "currentUsagePeriod")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(currentUsagePeriod, forKey: "currentUsagePeriod")
    }
  }

  /// Resource usage for a single Mobile Center service
  public struct TestService: Codable {
    /// Usage for a single period
    public var currentUsagePeriod: CurrentUsagePeriod?

    /// Usage for a single period
    public struct CurrentUsagePeriod: Codable {
      /// Inclusive start time of the usage period
      public var startTime: String?
      /// Exclusive end time of the usage period.
      public var endTime: String?
      /// A collection of named numeric values
      public var byAccount: [String: Double]?
      /// A collection of  named numeric values grouped by app
      public var byApp: [String: [String: Double]]?

      public init(startTime: String? = nil, endTime: String? = nil, byAccount: [String: Double]? = nil, byApp: [String: [String: Double]]? = nil) {
        self.startTime = startTime
        self.endTime = endTime
        self.byAccount = byAccount
        self.byApp = byApp
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.startTime = try values.decodeIfPresent(String.self, forKey: "startTime")
        self.endTime = try values.decodeIfPresent(String.self, forKey: "endTime")
        self.byAccount = try values.decodeIfPresent([String: Double].self, forKey: "byAccount")
        self.byApp = try values.decodeIfPresent([String: [String: Double]].self, forKey: "byApp")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(startTime, forKey: "startTime")
        try values.encodeIfPresent(endTime, forKey: "endTime")
        try values.encodeIfPresent(byAccount, forKey: "byAccount")
        try values.encodeIfPresent(byApp, forKey: "byApp")
      }
    }

    public init(currentUsagePeriod: CurrentUsagePeriod? = nil) {
      self.currentUsagePeriod = currentUsagePeriod
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.currentUsagePeriod = try values.decodeIfPresent(CurrentUsagePeriod.self, forKey: "currentUsagePeriod")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(currentUsagePeriod, forKey: "currentUsagePeriod")
    }
  }

  public init(buildService: BuildService? = nil, testService: TestService? = nil) {
    self.buildService = buildService
    self.testService = testService
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.buildService = try values.decodeIfPresent(BuildService.self, forKey: "buildService")
    self.testService = try values.decodeIfPresent(TestService.self, forKey: "testService")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(buildService, forKey: "buildService")
    try values.encodeIfPresent(testService, forKey: "testService")
  }
}
