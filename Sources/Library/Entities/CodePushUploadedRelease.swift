// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CodePushUploadedRelease: Codable {
  /// The upload metadata from the release initialization step.
  public var releaseUpload: ReleaseUpload
  /// The binary version of the application
  public var targetBinaryVersion: String
  /// This specifies which deployment you want to release the update to. Default is Staging.
  public var deploymentName: String?
  /// This provides an optional "change log" for the deployment.
  public var description: String?
  /// This specifies whether an update should be downloadable by end users or not.
  public var isDisabled: Bool?
  /// This specifies whether the update should be considered mandatory or not (e.g. it includes a critical security fix).
  public var isMandatory: Bool?
  /// This specifies that if the update is identical to the latest release on the deployment, the CLI should generate a warning instead of an error.
  public var isNoDuplicateReleaseError: Bool?
  /// This specifies the percentage of users (as an integer between 1 and 100) that should be eligible to receive this update.
  public var rollout: Int?

  /// The upload metadata from the release initialization step.
  public struct ReleaseUpload: Codable, Identifiable {
    /// The ID for the newly created upload. It is going to be required later in the process.
    public var id: UUID
    /// The URL domain used to upload the release.
    public var uploadDomain: String
    /// The URL encoded token used for upload permissions.
    public var token: String

    public init(id: UUID, uploadDomain: String, token: String) {
      self.id = id
      self.uploadDomain = uploadDomain
      self.token = token
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.id = try values.decode(UUID.self, forKey: "id")
      self.uploadDomain = try values.decode(String.self, forKey: "upload_domain")
      self.token = try values.decode(String.self, forKey: "token")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(id, forKey: "id")
      try values.encode(uploadDomain, forKey: "upload_domain")
      try values.encode(token, forKey: "token")
    }
  }

  public init(releaseUpload: ReleaseUpload, targetBinaryVersion: String, deploymentName: String? = nil, description: String? = nil, isDisabled: Bool? = nil, isMandatory: Bool? = nil, isNoDuplicateReleaseError: Bool? = nil, rollout: Int? = nil) {
    self.releaseUpload = releaseUpload
    self.targetBinaryVersion = targetBinaryVersion
    self.deploymentName = deploymentName
    self.description = description
    self.isDisabled = isDisabled
    self.isMandatory = isMandatory
    self.isNoDuplicateReleaseError = isNoDuplicateReleaseError
    self.rollout = rollout
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.releaseUpload = try values.decode(ReleaseUpload.self, forKey: "release_upload")
    self.targetBinaryVersion = try values.decode(String.self, forKey: "target_binary_version")
    self.deploymentName = try values.decodeIfPresent(String.self, forKey: "deployment_name")
    self.description = try values.decodeIfPresent(String.self, forKey: "description")
    self.isDisabled = try values.decodeIfPresent(Bool.self, forKey: "disabled")
    self.isMandatory = try values.decodeIfPresent(Bool.self, forKey: "mandatory")
    self.isNoDuplicateReleaseError = try values.decodeIfPresent(Bool.self, forKey: "no_duplicate_release_error")
    self.rollout = try values.decodeIfPresent(Int.self, forKey: "rollout")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(releaseUpload, forKey: "release_upload")
    try values.encode(targetBinaryVersion, forKey: "target_binary_version")
    try values.encodeIfPresent(deploymentName, forKey: "deployment_name")
    try values.encodeIfPresent(description, forKey: "description")
    try values.encodeIfPresent(isDisabled, forKey: "disabled")
    try values.encodeIfPresent(isMandatory, forKey: "mandatory")
    try values.encodeIfPresent(isNoDuplicateReleaseError, forKey: "no_duplicate_release_error")
    try values.encodeIfPresent(rollout, forKey: "rollout")
  }
}
