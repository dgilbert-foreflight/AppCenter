// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct ReleaseCounts: Codable {
  public var total: Int64?
  public var counts: [Count]

  public struct Count: Codable {
    public var releaseID: String
    /// Distribution group queried.
    public var distributionGroup: String?
    /// Count of unique downloads against user id.
    public var uniqueCount: Int64
    /// Total count of downloads.
    public var totalCount: Int64

    public init(releaseID: String, distributionGroup: String? = nil, uniqueCount: Int64, totalCount: Int64) {
      self.releaseID = releaseID
      self.distributionGroup = distributionGroup
      self.uniqueCount = uniqueCount
      self.totalCount = totalCount
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.releaseID = try values.decode(String.self, forKey: "release_id")
      self.distributionGroup = try values.decodeIfPresent(String.self, forKey: "distribution_group")
      self.uniqueCount = try values.decode(Int64.self, forKey: "unique_count")
      self.totalCount = try values.decode(Int64.self, forKey: "total_count")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encode(releaseID, forKey: "release_id")
      try values.encodeIfPresent(distributionGroup, forKey: "distribution_group")
      try values.encode(uniqueCount, forKey: "unique_count")
      try values.encode(totalCount, forKey: "total_count")
    }
  }

  public init(total: Int64? = nil, counts: [Count]) {
    self.total = total
    self.counts = counts
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.total = try values.decodeIfPresent(Int64.self, forKey: "total")
    self.counts = try values.decode([Count].self, forKey: "counts")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(total, forKey: "total")
    try values.encode(counts, forKey: "counts")
  }
}
