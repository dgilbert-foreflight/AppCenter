// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GeneralDistributionGroupDetailsResponse: Codable, Identifiable {
  /// The unique ID of the distribution group
  public var id: UUID
  /// The name of the distribution group used in URLs
  public var name: String
  /// The name of the distribution group
  public var displayName: String?
  /// The creation origin of this distribution group
  public var origin: Origin
  /// Whether the distribution group is public
  public var isPublic: Bool
  /// Whether the distribution group is shared group or not
  public var isShared: Bool?
  /// If distribution group is owned by an app, this is the unique app ID
  public var ownerAppID: UUID?
  /// If distribution group is owned by an org, this is the unique org ID
  public var ownerOrgID: UUID?

  /// The creation origin of this distribution group
  public enum Origin: String, Codable, CaseIterable {
    case appcenter
    case hockeyapp
  }

  public init(id: UUID, name: String, displayName: String? = nil, origin: Origin, isPublic: Bool, isShared: Bool? = nil, ownerAppID: UUID? = nil, ownerOrgID: UUID? = nil) {
    self.id = id
    self.name = name
    self.displayName = displayName
    self.origin = origin
    self.isPublic = isPublic
    self.isShared = isShared
    self.ownerAppID = ownerAppID
    self.ownerOrgID = ownerOrgID
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decode(UUID.self, forKey: "id")
    self.name = try values.decode(String.self, forKey: "name")
    self.displayName = try values.decodeIfPresent(String.self, forKey: "display_name")
    self.origin = try values.decode(Origin.self, forKey: "origin")
    self.isPublic = try values.decode(Bool.self, forKey: "is_public")
    self.isShared = try values.decodeIfPresent(Bool.self, forKey: "is_shared")
    self.ownerAppID = try values.decodeIfPresent(UUID.self, forKey: "owner_app_id")
    self.ownerOrgID = try values.decodeIfPresent(UUID.self, forKey: "owner_org_id")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(id, forKey: "id")
    try values.encode(name, forKey: "name")
    try values.encodeIfPresent(displayName, forKey: "display_name")
    try values.encode(origin, forKey: "origin")
    try values.encode(isPublic, forKey: "is_public")
    try values.encodeIfPresent(isShared, forKey: "is_shared")
    try values.encodeIfPresent(ownerAppID, forKey: "owner_app_id")
    try values.encodeIfPresent(ownerOrgID, forKey: "owner_org_id")
  }
}
