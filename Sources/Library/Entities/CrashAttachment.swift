// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CrashAttachment: Codable {
  public var appID: String
  public var attachmentID: String
  public var crashID: String
  public var blobLocation: String
  public var contentType: String
  public var fileName: String
  public var createdTime: Date
  public var size: Double

  public init(appID: String, attachmentID: String, crashID: String, blobLocation: String, contentType: String, fileName: String, createdTime: Date, size: Double) {
    self.appID = appID
    self.attachmentID = attachmentID
    self.crashID = crashID
    self.blobLocation = blobLocation
    self.contentType = contentType
    self.fileName = fileName
    self.createdTime = createdTime
    self.size = size
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.appID = try values.decode(String.self, forKey: "app_id")
    self.attachmentID = try values.decode(String.self, forKey: "attachment_id")
    self.crashID = try values.decode(String.self, forKey: "crash_id")
    self.blobLocation = try values.decode(String.self, forKey: "blob_location")
    self.contentType = try values.decode(String.self, forKey: "content_type")
    self.fileName = try values.decode(String.self, forKey: "file_name")
    self.createdTime = try values.decode(Date.self, forKey: "created_time")
    self.size = try values.decode(Double.self, forKey: "size")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(appID, forKey: "app_id")
    try values.encode(attachmentID, forKey: "attachment_id")
    try values.encode(crashID, forKey: "crash_id")
    try values.encode(blobLocation, forKey: "blob_location")
    try values.encode(contentType, forKey: "content_type")
    try values.encode(fileName, forKey: "file_name")
    try values.encode(createdTime, forKey: "created_time")
    try values.encode(size, forKey: "size")
  }
}
