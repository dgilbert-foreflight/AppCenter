// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct TesterAppRelease: Codable, Identifiable {
  /// ID identifying this unique release.
  public var id: Int
  /// The release's version.<br>
  /// For iOS: CFBundleVersion from info.plist.<br>
  /// For Android: android:versionCode from AppManifest.xml.
  public var version: String
  /// The release's origin
  public var origin: Origin?
  /// The release's short version.<br>
  /// For iOS: CFBundleShortVersionString from info.plist.<br>
  /// For Android: android:versionName from AppManifest.xml.
  public var shortVersion: String
  /// A boolean which determines whether the release is a mandatory update or not.
  public var isMandatoryUpdate: Bool
  /// UTC time in ISO 8601 format of the uploaded time.
  public var uploadedAt: String
  /// This value determines the whether a release currently is enabled or disabled.
  public var isEnabled: Bool
  /// This value determines if a release is external or not.
  public var isExternalBuild: Bool?
  /// The release's size in bytes.
  public var size: Int
  /// The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`
  public var installURL: String?
  /// The release's release notes.
  public var releaseNotes: String?

  /// The release's origin
  public enum Origin: String, Codable, CaseIterable {
    case hockeyapp
    case appcenter
  }

  public init(id: Int, version: String, origin: Origin? = nil, shortVersion: String, isMandatoryUpdate: Bool, uploadedAt: String, isEnabled: Bool, isExternalBuild: Bool? = nil, size: Int, installURL: String? = nil, releaseNotes: String? = nil) {
    self.id = id
    self.version = version
    self.origin = origin
    self.shortVersion = shortVersion
    self.isMandatoryUpdate = isMandatoryUpdate
    self.uploadedAt = uploadedAt
    self.isEnabled = isEnabled
    self.isExternalBuild = isExternalBuild
    self.size = size
    self.installURL = installURL
    self.releaseNotes = releaseNotes
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decode(Int.self, forKey: "id")
    self.version = try values.decode(String.self, forKey: "version")
    self.origin = try values.decodeIfPresent(Origin.self, forKey: "origin")
    self.shortVersion = try values.decode(String.self, forKey: "short_version")
    self.isMandatoryUpdate = try values.decode(Bool.self, forKey: "mandatory_update")
    self.uploadedAt = try values.decode(String.self, forKey: "uploaded_at")
    self.isEnabled = try values.decode(Bool.self, forKey: "enabled")
    self.isExternalBuild = try values.decodeIfPresent(Bool.self, forKey: "is_external_build")
    self.size = try values.decode(Int.self, forKey: "size")
    self.installURL = try values.decodeIfPresent(String.self, forKey: "install_url")
    self.releaseNotes = try values.decodeIfPresent(String.self, forKey: "release_notes")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(id, forKey: "id")
    try values.encode(version, forKey: "version")
    try values.encodeIfPresent(origin, forKey: "origin")
    try values.encode(shortVersion, forKey: "short_version")
    try values.encode(isMandatoryUpdate, forKey: "mandatory_update")
    try values.encode(uploadedAt, forKey: "uploaded_at")
    try values.encode(isEnabled, forKey: "enabled")
    try values.encodeIfPresent(isExternalBuild, forKey: "is_external_build")
    try values.encode(size, forKey: "size")
    try values.encodeIfPresent(installURL, forKey: "install_url")
    try values.encodeIfPresent(releaseNotes, forKey: "release_notes")
  }
}
