// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct APITokensPrivateCreateResponse: Codable, Identifiable {
  /// The unique id (UUID) of the api token
  public var id: String
  /// The creation time
  public var createdAt: String
  /// The scope for this token.
  public var scope: [ScopeItem]?
  /// The encrypted value of a token. This value will only be returned for token of type in_app_update.
  public var encryptedToken: String?
  /// The description of the token
  public var description: String?
  /// The api token generated will not be accessible again
  public var apiToken: String

  public enum ScopeItem: String, Codable, CaseIterable {
    case all
    case inAppUpdate = "in_app_update"
    case viewer
  }

  public init(id: String, createdAt: String, scope: [ScopeItem]? = nil, encryptedToken: String? = nil, description: String? = nil, apiToken: String) {
    self.id = id
    self.createdAt = createdAt
    self.scope = scope
    self.encryptedToken = encryptedToken
    self.description = description
    self.apiToken = apiToken
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decode(String.self, forKey: "id")
    self.createdAt = try values.decode(String.self, forKey: "created_at")
    self.scope = try values.decodeIfPresent([ScopeItem].self, forKey: "scope")
    self.encryptedToken = try values.decodeIfPresent(String.self, forKey: "encrypted_token")
    self.description = try values.decodeIfPresent(String.self, forKey: "description")
    self.apiToken = try values.decode(String.self, forKey: "api_token")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(id, forKey: "id")
    try values.encode(createdAt, forKey: "created_at")
    try values.encodeIfPresent(scope, forKey: "scope")
    try values.encodeIfPresent(encryptedToken, forKey: "encrypted_token")
    try values.encodeIfPresent(description, forKey: "description")
    try values.encode(apiToken, forKey: "api_token")
  }
}
