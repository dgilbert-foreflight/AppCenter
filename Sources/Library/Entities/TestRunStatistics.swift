// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Summary single test run on Xamarin Test Cloud
public struct TestRunStatistics: Codable {
  /// Number of devices running the test
  public var devices: Double?
  /// Number of finished devices
  public var devicesFinished: Double?
  /// Number of failed devices
  public var devicesFailed: Double?
  /// Number of tests in total
  public var total: Double?
  /// Number of passed tests
  public var passed: Double?
  /// Number of failed tests
  public var failed: Double?
  /// Number of skipped tests
  public var skipped: Double?
  /// The max amount of MB used during the test run
  public var peakMemory: Double?
  /// The number of minutes of device time the test has been runnign
  public var totalDeviceMinutes: Double?

  public init(devices: Double? = nil, devicesFinished: Double? = nil, devicesFailed: Double? = nil, total: Double? = nil, passed: Double? = nil, failed: Double? = nil, skipped: Double? = nil, peakMemory: Double? = nil, totalDeviceMinutes: Double? = nil) {
    self.devices = devices
    self.devicesFinished = devicesFinished
    self.devicesFailed = devicesFailed
    self.total = total
    self.passed = passed
    self.failed = failed
    self.skipped = skipped
    self.peakMemory = peakMemory
    self.totalDeviceMinutes = totalDeviceMinutes
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.devices = try values.decodeIfPresent(Double.self, forKey: "devices")
    self.devicesFinished = try values.decodeIfPresent(Double.self, forKey: "devicesFinished")
    self.devicesFailed = try values.decodeIfPresent(Double.self, forKey: "devicesFailed")
    self.total = try values.decodeIfPresent(Double.self, forKey: "total")
    self.passed = try values.decodeIfPresent(Double.self, forKey: "passed")
    self.failed = try values.decodeIfPresent(Double.self, forKey: "failed")
    self.skipped = try values.decodeIfPresent(Double.self, forKey: "skipped")
    self.peakMemory = try values.decodeIfPresent(Double.self, forKey: "peakMemory")
    self.totalDeviceMinutes = try values.decodeIfPresent(Double.self, forKey: "totalDeviceMinutes")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(devices, forKey: "devices")
    try values.encodeIfPresent(devicesFinished, forKey: "devicesFinished")
    try values.encodeIfPresent(devicesFailed, forKey: "devicesFailed")
    try values.encodeIfPresent(total, forKey: "total")
    try values.encodeIfPresent(passed, forKey: "passed")
    try values.encodeIfPresent(failed, forKey: "failed")
    try values.encodeIfPresent(skipped, forKey: "skipped")
    try values.encodeIfPresent(peakMemory, forKey: "peakMemory")
    try values.encodeIfPresent(totalDeviceMinutes, forKey: "totalDeviceMinutes")
  }
}
