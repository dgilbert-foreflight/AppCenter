// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct APITokenGetUserResponse: Codable {
  /// The token's unique id (UUID)
  public var tokenID: UUID
  /// The token's scope. A list of allowed roles.
  public var tokenScope: [TokenScopeItem]
  /// The user email
  public var userEmail: String
  /// The unique id (UUID) of the user
  public var userID: UUID
  /// The creation origin of the user who created this api token
  public var userOrigin: UserOrigin

  public enum TokenScopeItem: String, Codable, CaseIterable {
    case all
    case inAppUpdate = "in_app_update"
    case viewer
  }

  /// The creation origin of the user who created this api token
  public enum UserOrigin: String, Codable, CaseIterable {
    case appcenter
    case hockeyapp
    case codepush
  }

  public init(tokenID: UUID, tokenScope: [TokenScopeItem], userEmail: String, userID: UUID, userOrigin: UserOrigin) {
    self.tokenID = tokenID
    self.tokenScope = tokenScope
    self.userEmail = userEmail
    self.userID = userID
    self.userOrigin = userOrigin
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.tokenID = try values.decode(UUID.self, forKey: "token_id")
    self.tokenScope = try values.decode([TokenScopeItem].self, forKey: "token_scope")
    self.userEmail = try values.decode(String.self, forKey: "user_email")
    self.userID = try values.decode(UUID.self, forKey: "user_id")
    self.userOrigin = try values.decode(UserOrigin.self, forKey: "user_origin")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(tokenID, forKey: "token_id")
    try values.encode(tokenScope, forKey: "token_scope")
    try values.encode(userEmail, forKey: "user_email")
    try values.encode(userID, forKey: "user_id")
    try values.encode(userOrigin, forKey: "user_origin")
  }
}
