// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Crash: Codable {
  public var details: Details?
  public var newCrashGroupID: String
  public var crashID: String
  public var newCrashID: String
  public var displayID: String?
  public var timestamp: Date
  public var version: String
  public var build: String
  public var device: String
  public var deviceName: String?
  public var osVersion: String
  public var osType: String?
  /// A stacktrace in a processed and prettyfied way
  public var stacktrace: Stacktrace?
  public var userName: String
  public var userEmail: String?

  public struct Details: Codable {
    /// Carrier country code (for mobile devices).
    public var carrierCountry: String?
    /// Carrier name (for mobile devices).
    public var carrierName: String?
    /// Language code (example: en_US).
    public var locale: String
    /// OS build code (example: LMY47X).
    public var osBuild: String?
    /// Whether the device where the crash occurred is rooted or jailbroken
    public var isRooted: Bool
    /// Screen size of the device in pixels (example: 640x480).
    public var screenSize: String
    /// Application launch timestamp (example: 1985-04-12T23:20:50.52Z).
    public var appStartTimestamp: Date?

    public init(carrierCountry: String? = nil, carrierName: String? = nil, locale: String, osBuild: String? = nil, isRooted: Bool, screenSize: String, appStartTimestamp: Date? = nil) {
      self.carrierCountry = carrierCountry
      self.carrierName = carrierName
      self.locale = locale
      self.osBuild = osBuild
      self.isRooted = isRooted
      self.screenSize = screenSize
      self.appStartTimestamp = appStartTimestamp
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.carrierCountry = try values.decodeIfPresent(String.self, forKey: "carrier_country")
      self.carrierName = try values.decodeIfPresent(String.self, forKey: "carrier_name")
      self.locale = try values.decode(String.self, forKey: "locale")
      self.osBuild = try values.decodeIfPresent(String.self, forKey: "os_build")
      self.isRooted = try values.decode(Bool.self, forKey: "rooted")
      self.screenSize = try values.decode(String.self, forKey: "screen_size")
      self.appStartTimestamp = try values.decodeIfPresent(Date.self, forKey: "app_start_timestamp")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(carrierCountry, forKey: "carrier_country")
      try values.encodeIfPresent(carrierName, forKey: "carrier_name")
      try values.encode(locale, forKey: "locale")
      try values.encodeIfPresent(osBuild, forKey: "os_build")
      try values.encode(isRooted, forKey: "rooted")
      try values.encode(screenSize, forKey: "screen_size")
      try values.encodeIfPresent(appStartTimestamp, forKey: "app_start_timestamp")
    }
  }

  public init(details: Details? = nil, newCrashGroupID: String, crashID: String, newCrashID: String, displayID: String? = nil, timestamp: Date, version: String, build: String, device: String, deviceName: String? = nil, osVersion: String, osType: String? = nil, stacktrace: Stacktrace? = nil, userName: String, userEmail: String? = nil) {
    self.details = details
    self.newCrashGroupID = newCrashGroupID
    self.crashID = crashID
    self.newCrashID = newCrashID
    self.displayID = displayID
    self.timestamp = timestamp
    self.version = version
    self.build = build
    self.device = device
    self.deviceName = deviceName
    self.osVersion = osVersion
    self.osType = osType
    self.stacktrace = stacktrace
    self.userName = userName
    self.userEmail = userEmail
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.details = try values.decodeIfPresent(Details.self, forKey: "details")
    self.newCrashGroupID = try values.decode(String.self, forKey: "new_crash_group_id")
    self.crashID = try values.decode(String.self, forKey: "crash_id")
    self.newCrashID = try values.decode(String.self, forKey: "new_crash_id")
    self.displayID = try values.decodeIfPresent(String.self, forKey: "display_id")
    self.timestamp = try values.decode(Date.self, forKey: "timestamp")
    self.version = try values.decode(String.self, forKey: "version")
    self.build = try values.decode(String.self, forKey: "build")
    self.device = try values.decode(String.self, forKey: "device")
    self.deviceName = try values.decodeIfPresent(String.self, forKey: "device_name")
    self.osVersion = try values.decode(String.self, forKey: "os_version")
    self.osType = try values.decodeIfPresent(String.self, forKey: "os_type")
    self.stacktrace = try values.decodeIfPresent(Stacktrace.self, forKey: "stacktrace")
    self.userName = try values.decode(String.self, forKey: "user_name")
    self.userEmail = try values.decodeIfPresent(String.self, forKey: "user_email")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(details, forKey: "details")
    try values.encode(newCrashGroupID, forKey: "new_crash_group_id")
    try values.encode(crashID, forKey: "crash_id")
    try values.encode(newCrashID, forKey: "new_crash_id")
    try values.encodeIfPresent(displayID, forKey: "display_id")
    try values.encode(timestamp, forKey: "timestamp")
    try values.encode(version, forKey: "version")
    try values.encode(build, forKey: "build")
    try values.encode(device, forKey: "device")
    try values.encodeIfPresent(deviceName, forKey: "device_name")
    try values.encode(osVersion, forKey: "os_version")
    try values.encodeIfPresent(osType, forKey: "os_type")
    try values.encodeIfPresent(stacktrace, forKey: "stacktrace")
    try values.encode(userName, forKey: "user_name")
    try values.encodeIfPresent(userEmail, forKey: "user_email")
  }
}
