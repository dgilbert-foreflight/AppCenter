// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SessionsPerDevice: Codable {
  /// Average seesion per user.
  public var averageSessionsPerUser: Double?
  /// Previous average session per user.
  public var previousAverageSessionsPerUser: Double?
  /// Total session per device count.
  public var totalCount: Int64?
  /// Previous total count.
  public var previousTotalCount: Int64?
  /// The session count for each interval per device.
  public var sessionsPerUser: [SessionsPerUserItem]?

  public struct SessionsPerUserItem: Codable {
    /// The ISO 8601 datetime.
    public var datetime: String?
    /// Count.
    public var count: Double?

    public init(datetime: String? = nil, count: Double? = nil) {
      self.datetime = datetime
      self.count = count
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.datetime = try values.decodeIfPresent(String.self, forKey: "datetime")
      self.count = try values.decodeIfPresent(Double.self, forKey: "count")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(datetime, forKey: "datetime")
      try values.encodeIfPresent(count, forKey: "count")
    }
  }

  public init(averageSessionsPerUser: Double? = nil, previousAverageSessionsPerUser: Double? = nil, totalCount: Int64? = nil, previousTotalCount: Int64? = nil, sessionsPerUser: [SessionsPerUserItem]? = nil) {
    self.averageSessionsPerUser = averageSessionsPerUser
    self.previousAverageSessionsPerUser = previousAverageSessionsPerUser
    self.totalCount = totalCount
    self.previousTotalCount = previousTotalCount
    self.sessionsPerUser = sessionsPerUser
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.averageSessionsPerUser = try values.decodeIfPresent(Double.self, forKey: "average_sessions_per_user")
    self.previousAverageSessionsPerUser = try values.decodeIfPresent(Double.self, forKey: "previous_average_sessions_per_user")
    self.totalCount = try values.decodeIfPresent(Int64.self, forKey: "total_count")
    self.previousTotalCount = try values.decodeIfPresent(Int64.self, forKey: "previous_total_count")
    self.sessionsPerUser = try values.decodeIfPresent([SessionsPerUserItem].self, forKey: "sessions_per_user")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(averageSessionsPerUser, forKey: "average_sessions_per_user")
    try values.encodeIfPresent(previousAverageSessionsPerUser, forKey: "previous_average_sessions_per_user")
    try values.encodeIfPresent(totalCount, forKey: "total_count")
    try values.encodeIfPresent(previousTotalCount, forKey: "previous_total_count")
    try values.encodeIfPresent(sessionsPerUser, forKey: "sessions_per_user")
  }
}
