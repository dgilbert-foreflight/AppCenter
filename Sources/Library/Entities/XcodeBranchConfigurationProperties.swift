// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Build configuration when Xcode is part of the build steps
public struct XcodeBranchConfigurationProperties: Codable {
  /// Xcode project/workspace path
  public var projectOrWorkspacePath: String?
  /// Path to CococaPods file, if present
  public var podfilePath: String?
  /// Path to Carthage file, if present
  public var cartfilePath: String?
  public var provisioningProfileEncoded: String?
  public var certificateEncoded: String?
  public var provisioningProfileFileID: String?
  public var certificateFileID: String?
  public var provisioningProfileUploadID: String?
  public var appExtensionProvisioningProfileFiles: [AppExtensionProvisioningProfileFile]?
  public var certificateUploadID: String?
  public var certificatePassword: String?
  public var scheme: String?
  /// Xcode version used to build. Available versions can be found in "/xcode_versions" API. Default is latest stable version, at the time when the configuration is set.
  public var xcodeVersion: String?
  public var provisioningProfileFilename: String?
  public var certificateFilename: String?
  public var teamID: String?
  public var isAutomaticSigning: Bool?
  /// The selected pbxproject hash to the repositroy
  public var xcodeProjectSha: String?
  /// The build configuration of the target to archive
  public var archiveConfiguration: String?
  /// The target id of the selected scheme to archive
  public var targetToArchive: String?
  /// Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.
  /// By default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.
  public var isForceLegacyBuildSystem: Bool?

  /// Provisioning profile fetch and store information
  public struct AppExtensionProvisioningProfileFile: Codable {
    /// Name of uploaded provisioning profile
    public var fileName: String?
    /// File id from secure file storage
    public var fileID: String?
    /// Upload id to App Center File Upload Store
    public var uploadID: String?
    /// Target the provisioning profile is used to sign
    public var targetBundleIdentifier: String?

    public init(fileName: String? = nil, fileID: String? = nil, uploadID: String? = nil, targetBundleIdentifier: String? = nil) {
      self.fileName = fileName
      self.fileID = fileID
      self.uploadID = uploadID
      self.targetBundleIdentifier = targetBundleIdentifier
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.fileName = try values.decodeIfPresent(String.self, forKey: "fileName")
      self.fileID = try values.decodeIfPresent(String.self, forKey: "fileId")
      self.uploadID = try values.decodeIfPresent(String.self, forKey: "uploadId")
      self.targetBundleIdentifier = try values.decodeIfPresent(String.self, forKey: "targetBundleIdentifier")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(fileName, forKey: "fileName")
      try values.encodeIfPresent(fileID, forKey: "fileId")
      try values.encodeIfPresent(uploadID, forKey: "uploadId")
      try values.encodeIfPresent(targetBundleIdentifier, forKey: "targetBundleIdentifier")
    }
  }

  public init(projectOrWorkspacePath: String? = nil, podfilePath: String? = nil, cartfilePath: String? = nil, provisioningProfileEncoded: String? = nil, certificateEncoded: String? = nil, provisioningProfileFileID: String? = nil, certificateFileID: String? = nil, provisioningProfileUploadID: String? = nil, appExtensionProvisioningProfileFiles: [AppExtensionProvisioningProfileFile]? = nil, certificateUploadID: String? = nil, certificatePassword: String? = nil, scheme: String? = nil, xcodeVersion: String? = nil, provisioningProfileFilename: String? = nil, certificateFilename: String? = nil, teamID: String? = nil, isAutomaticSigning: Bool? = nil, xcodeProjectSha: String? = nil, archiveConfiguration: String? = nil, targetToArchive: String? = nil, isForceLegacyBuildSystem: Bool? = nil) {
    self.projectOrWorkspacePath = projectOrWorkspacePath
    self.podfilePath = podfilePath
    self.cartfilePath = cartfilePath
    self.provisioningProfileEncoded = provisioningProfileEncoded
    self.certificateEncoded = certificateEncoded
    self.provisioningProfileFileID = provisioningProfileFileID
    self.certificateFileID = certificateFileID
    self.provisioningProfileUploadID = provisioningProfileUploadID
    self.appExtensionProvisioningProfileFiles = appExtensionProvisioningProfileFiles
    self.certificateUploadID = certificateUploadID
    self.certificatePassword = certificatePassword
    self.scheme = scheme
    self.xcodeVersion = xcodeVersion
    self.provisioningProfileFilename = provisioningProfileFilename
    self.certificateFilename = certificateFilename
    self.teamID = teamID
    self.isAutomaticSigning = isAutomaticSigning
    self.xcodeProjectSha = xcodeProjectSha
    self.archiveConfiguration = archiveConfiguration
    self.targetToArchive = targetToArchive
    self.isForceLegacyBuildSystem = isForceLegacyBuildSystem
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.projectOrWorkspacePath = try values.decodeIfPresent(String.self, forKey: "projectOrWorkspacePath")
    self.podfilePath = try values.decodeIfPresent(String.self, forKey: "podfilePath")
    self.cartfilePath = try values.decodeIfPresent(String.self, forKey: "cartfilePath")
    self.provisioningProfileEncoded = try values.decodeIfPresent(String.self, forKey: "provisioningProfileEncoded")
    self.certificateEncoded = try values.decodeIfPresent(String.self, forKey: "certificateEncoded")
    self.provisioningProfileFileID = try values.decodeIfPresent(String.self, forKey: "provisioningProfileFileId")
    self.certificateFileID = try values.decodeIfPresent(String.self, forKey: "certificateFileId")
    self.provisioningProfileUploadID = try values.decodeIfPresent(String.self, forKey: "provisioningProfileUploadId")
    self.appExtensionProvisioningProfileFiles = try values.decodeIfPresent([AppExtensionProvisioningProfileFile].self, forKey: "appExtensionProvisioningProfileFiles")
    self.certificateUploadID = try values.decodeIfPresent(String.self, forKey: "certificateUploadId")
    self.certificatePassword = try values.decodeIfPresent(String.self, forKey: "certificatePassword")
    self.scheme = try values.decodeIfPresent(String.self, forKey: "scheme")
    self.xcodeVersion = try values.decodeIfPresent(String.self, forKey: "xcodeVersion")
    self.provisioningProfileFilename = try values.decodeIfPresent(String.self, forKey: "provisioningProfileFilename")
    self.certificateFilename = try values.decodeIfPresent(String.self, forKey: "certificateFilename")
    self.teamID = try values.decodeIfPresent(String.self, forKey: "teamId")
    self.isAutomaticSigning = try values.decodeIfPresent(Bool.self, forKey: "automaticSigning")
    self.xcodeProjectSha = try values.decodeIfPresent(String.self, forKey: "xcodeProjectSha")
    self.archiveConfiguration = try values.decodeIfPresent(String.self, forKey: "archiveConfiguration")
    self.targetToArchive = try values.decodeIfPresent(String.self, forKey: "targetToArchive")
    self.isForceLegacyBuildSystem = try values.decodeIfPresent(Bool.self, forKey: "forceLegacyBuildSystem")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(projectOrWorkspacePath, forKey: "projectOrWorkspacePath")
    try values.encodeIfPresent(podfilePath, forKey: "podfilePath")
    try values.encodeIfPresent(cartfilePath, forKey: "cartfilePath")
    try values.encodeIfPresent(provisioningProfileEncoded, forKey: "provisioningProfileEncoded")
    try values.encodeIfPresent(certificateEncoded, forKey: "certificateEncoded")
    try values.encodeIfPresent(provisioningProfileFileID, forKey: "provisioningProfileFileId")
    try values.encodeIfPresent(certificateFileID, forKey: "certificateFileId")
    try values.encodeIfPresent(provisioningProfileUploadID, forKey: "provisioningProfileUploadId")
    try values.encodeIfPresent(appExtensionProvisioningProfileFiles, forKey: "appExtensionProvisioningProfileFiles")
    try values.encodeIfPresent(certificateUploadID, forKey: "certificateUploadId")
    try values.encodeIfPresent(certificatePassword, forKey: "certificatePassword")
    try values.encodeIfPresent(scheme, forKey: "scheme")
    try values.encodeIfPresent(xcodeVersion, forKey: "xcodeVersion")
    try values.encodeIfPresent(provisioningProfileFilename, forKey: "provisioningProfileFilename")
    try values.encodeIfPresent(certificateFilename, forKey: "certificateFilename")
    try values.encodeIfPresent(teamID, forKey: "teamId")
    try values.encodeIfPresent(isAutomaticSigning, forKey: "automaticSigning")
    try values.encodeIfPresent(xcodeProjectSha, forKey: "xcodeProjectSha")
    try values.encodeIfPresent(archiveConfiguration, forKey: "archiveConfiguration")
    try values.encodeIfPresent(targetToArchive, forKey: "targetToArchive")
    try values.encodeIfPresent(isForceLegacyBuildSystem, forKey: "forceLegacyBuildSystem")
  }
}
