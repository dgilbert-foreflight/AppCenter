// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct LegacyDeploymentResponse: Codable {
  public var deployment: [String: Deploymant]?

  public struct Deploymant: Codable, Identifiable {
    /// Time at which the deployment was created as a Unix timestamp.
    public var createdTime: Int?
    /// The ID of the deployment (internal use only).
    public var id: String?
    /// Deployment key (aka Deployment Id)
    public var key: String?
    /// Updated deployment name
    public var name: String
    public var package: Package?

    public struct Package: Codable {
      /// The version of the release
      public var appVersion: String?
      /// Flag used to determine if release is disabled
      public var isDisabled: Bool?
      /// Flag used to determine if release is mandatory
      public var isMandatory: Bool?
      /// Percentage (out of 100) that release is deployed to
      public var rollout: Int?
      /// Location (URL) of release package
      public var blobURL: String?
      /// Size of release package
      public var size: Int?
      /// Method used to deploy release
      public var releaseMethod: String?
      /// Release upload time as epoch Unix timestamp
      public var uploadTime: Int?
      /// Release label (aka release name)
      public var label: String?
      /// User ID that triggered most recent release
      public var releasedByUserID: String?
      /// The URL location of the package's manifest file.
      public var manifestBlobURL: String?
      /// Object containing URL and size of changed package hashes contained in the release
      public var diffPackageMap: [String: AnyJSON]?

      public init(appVersion: String? = nil, isDisabled: Bool? = nil, isMandatory: Bool? = nil, rollout: Int? = nil, blobURL: String? = nil, size: Int? = nil, releaseMethod: String? = nil, uploadTime: Int? = nil, label: String? = nil, releasedByUserID: String? = nil, manifestBlobURL: String? = nil, diffPackageMap: [String: AnyJSON]? = nil) {
        self.appVersion = appVersion
        self.isDisabled = isDisabled
        self.isMandatory = isMandatory
        self.rollout = rollout
        self.blobURL = blobURL
        self.size = size
        self.releaseMethod = releaseMethod
        self.uploadTime = uploadTime
        self.label = label
        self.releasedByUserID = releasedByUserID
        self.manifestBlobURL = manifestBlobURL
        self.diffPackageMap = diffPackageMap
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.appVersion = try values.decodeIfPresent(String.self, forKey: "appVersion")
        self.isDisabled = try values.decodeIfPresent(Bool.self, forKey: "isDisabled")
        self.isMandatory = try values.decodeIfPresent(Bool.self, forKey: "isMandatory")
        self.rollout = try values.decodeIfPresent(Int.self, forKey: "rollout")
        self.blobURL = try values.decodeIfPresent(String.self, forKey: "blobUrl")
        self.size = try values.decodeIfPresent(Int.self, forKey: "size")
        self.releaseMethod = try values.decodeIfPresent(String.self, forKey: "releaseMethod")
        self.uploadTime = try values.decodeIfPresent(Int.self, forKey: "uploadTime")
        self.label = try values.decodeIfPresent(String.self, forKey: "label")
        self.releasedByUserID = try values.decodeIfPresent(String.self, forKey: "releasedByUserId")
        self.manifestBlobURL = try values.decodeIfPresent(String.self, forKey: "manifestBlobUrl")
        self.diffPackageMap = try values.decodeIfPresent([String: AnyJSON].self, forKey: "diffPackageMap")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(appVersion, forKey: "appVersion")
        try values.encodeIfPresent(isDisabled, forKey: "isDisabled")
        try values.encodeIfPresent(isMandatory, forKey: "isMandatory")
        try values.encodeIfPresent(rollout, forKey: "rollout")
        try values.encodeIfPresent(blobURL, forKey: "blobUrl")
        try values.encodeIfPresent(size, forKey: "size")
        try values.encodeIfPresent(releaseMethod, forKey: "releaseMethod")
        try values.encodeIfPresent(uploadTime, forKey: "uploadTime")
        try values.encodeIfPresent(label, forKey: "label")
        try values.encodeIfPresent(releasedByUserID, forKey: "releasedByUserId")
        try values.encodeIfPresent(manifestBlobURL, forKey: "manifestBlobUrl")
        try values.encodeIfPresent(diffPackageMap, forKey: "diffPackageMap")
      }
    }

    public init(createdTime: Int? = nil, id: String? = nil, key: String? = nil, name: String, package: Package? = nil) {
      self.createdTime = createdTime
      self.id = id
      self.key = key
      self.name = name
      self.package = package
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.createdTime = try values.decodeIfPresent(Int.self, forKey: "createdTime")
      self.id = try values.decodeIfPresent(String.self, forKey: "id")
      self.key = try values.decodeIfPresent(String.self, forKey: "key")
      self.name = try values.decode(String.self, forKey: "name")
      self.package = try values.decodeIfPresent(Package.self, forKey: "package")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(createdTime, forKey: "createdTime")
      try values.encodeIfPresent(id, forKey: "id")
      try values.encodeIfPresent(key, forKey: "key")
      try values.encode(name, forKey: "name")
      try values.encodeIfPresent(package, forKey: "package")
    }
  }

  public init(deployment: [String: Deploymant]? = nil) {
    self.deployment = deployment
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.deployment = try values.decodeIfPresent([String: Deploymant].self, forKey: "deployment")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(deployment, forKey: "deployment")
  }
}
