// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Versions: Codable {
  /// List of version count.
  public var versions: [Version]?
  /// The total count of versions.
  public var total: Int64?

  public struct Version: Codable {
    /// Version.
    public var version: String?
    /// Version count.
    public var count: Int64?
    /// The count of previous time range of the version.
    public var previousCount: Int64?

    public init(version: String? = nil, count: Int64? = nil, previousCount: Int64? = nil) {
      self.version = version
      self.count = count
      self.previousCount = previousCount
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.version = try values.decodeIfPresent(String.self, forKey: "version")
      self.count = try values.decodeIfPresent(Int64.self, forKey: "count")
      self.previousCount = try values.decodeIfPresent(Int64.self, forKey: "previous_count")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(version, forKey: "version")
      try values.encodeIfPresent(count, forKey: "count")
      try values.encodeIfPresent(previousCount, forKey: "previous_count")
    }
  }

  public init(versions: [Version]? = nil, total: Int64? = nil) {
    self.versions = versions
    self.total = total
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.versions = try values.decodeIfPresent([Version].self, forKey: "versions")
    self.total = try values.decodeIfPresent(Int64.self, forKey: "total")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(versions, forKey: "versions")
    try values.encodeIfPresent(total, forKey: "total")
  }
}
