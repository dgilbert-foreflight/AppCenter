// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CrashGroupCarriers: Codable {
  public var crashCount: Int64?
  public var carriers: [Carrier]?

  public struct Carrier: Codable {
    /// Carrier name.
    public var carrierName: String?
    /// Crash count of carrier.
    public var crashCount: Int64?

    public init(carrierName: String? = nil, crashCount: Int64? = nil) {
      self.carrierName = carrierName
      self.crashCount = crashCount
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.carrierName = try values.decodeIfPresent(String.self, forKey: "carrier_name")
      self.crashCount = try values.decodeIfPresent(Int64.self, forKey: "crash_count")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(carrierName, forKey: "carrier_name")
      try values.encodeIfPresent(crashCount, forKey: "crash_count")
    }
  }

  public init(crashCount: Int64? = nil, carriers: [Carrier]? = nil) {
    self.crashCount = crashCount
    self.carriers = carriers
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.crashCount = try values.decodeIfPresent(Int64.self, forKey: "crash_count")
    self.carriers = try values.decodeIfPresent([Carrier].self, forKey: "carriers")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(crashCount, forKey: "crash_count")
    try values.encodeIfPresent(carriers, forKey: "carriers")
  }
}
