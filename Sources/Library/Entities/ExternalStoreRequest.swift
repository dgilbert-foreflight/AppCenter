// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// ExternalStoreRequest
public struct ExternalStoreRequest: Codable {
  /// Store Type
  public var type: `Type`?
  /// Name of the store. In case of googleplay, and Apple store this is fixed to Production.
  public var name: String?
  /// Track of the store. Can be production, alpha & beta for googleplay. Can be production, testflight-internal & testflight-external for Apple Store.
  public var track: Track?
  public var intuneDetails: IntuneDetails?
  /// Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.
  public var serviceConnectionID: String?

  /// Store Type
  public enum `Type`: String, Codable, CaseIterable {
    case googleplay
    case apple
    case intune
  }

  /// Track of the store. Can be production, alpha & beta for googleplay. Can be production, testflight-internal & testflight-external for Apple Store.
  public enum Track: String, Codable, CaseIterable {
    case production
    case alpha
    case beta
    case testflightInternal = "testflight-internal"
    case testflightExternal = "testflight-external"
  }

  public struct IntuneDetails: Codable {
    public var secretJSON: SecretJSON?
    public var targetAudience: TargetAudience?
    public var appCategory: AppCategory?
    /// Tenant id of the intune store
    public var tenantID: String?

    public struct SecretJSON: Codable {
      /// The id token of user
      public var idToken: String?
      /// The refresh token for user
      public var refreshToken: String?
      /// The expiry of refresh token
      public var refreshTokenExpiry: String?

      public init(idToken: String? = nil, refreshToken: String? = nil, refreshTokenExpiry: String? = nil) {
        self.idToken = idToken
        self.refreshToken = refreshToken
        self.refreshTokenExpiry = refreshTokenExpiry
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.idToken = try values.decodeIfPresent(String.self, forKey: "id_token")
        self.refreshToken = try values.decodeIfPresent(String.self, forKey: "refresh_token")
        self.refreshTokenExpiry = try values.decodeIfPresent(String.self, forKey: "refresh_token_expiry")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(idToken, forKey: "id_token")
        try values.encodeIfPresent(refreshToken, forKey: "refresh_token")
        try values.encodeIfPresent(refreshTokenExpiry, forKey: "refresh_token_expiry")
      }
    }

    public struct TargetAudience: Codable {
      /// Display name for the target audience/group
      public var name: String?

      public init(name: String? = nil) {
        self.name = name
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(name, forKey: "name")
      }
    }

    public struct AppCategory: Codable {
      /// Display name for the app category
      public var name: String?

      public init(name: String? = nil) {
        self.name = name
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(name, forKey: "name")
      }
    }

    public init(secretJSON: SecretJSON? = nil, targetAudience: TargetAudience? = nil, appCategory: AppCategory? = nil, tenantID: String? = nil) {
      self.secretJSON = secretJSON
      self.targetAudience = targetAudience
      self.appCategory = appCategory
      self.tenantID = tenantID
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.secretJSON = try values.decodeIfPresent(SecretJSON.self, forKey: "secret_json")
      self.targetAudience = try values.decodeIfPresent(TargetAudience.self, forKey: "target_audience")
      self.appCategory = try values.decodeIfPresent(AppCategory.self, forKey: "app_category")
      self.tenantID = try values.decodeIfPresent(String.self, forKey: "tenant_id")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(secretJSON, forKey: "secret_json")
      try values.encodeIfPresent(targetAudience, forKey: "target_audience")
      try values.encodeIfPresent(appCategory, forKey: "app_category")
      try values.encodeIfPresent(tenantID, forKey: "tenant_id")
    }
  }

  public init(type: `Type`? = nil, name: String? = nil, track: Track? = nil, intuneDetails: IntuneDetails? = nil, serviceConnectionID: String? = nil) {
    self.type = type
    self.name = name
    self.track = track
    self.intuneDetails = intuneDetails
    self.serviceConnectionID = serviceConnectionID
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
    self.name = try values.decodeIfPresent(String.self, forKey: "name")
    self.track = try values.decodeIfPresent(Track.self, forKey: "track")
    self.intuneDetails = try values.decodeIfPresent(IntuneDetails.self, forKey: "intune_details")
    self.serviceConnectionID = try values.decodeIfPresent(String.self, forKey: "service_connection_id")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(type, forKey: "type")
    try values.encodeIfPresent(name, forKey: "name")
    try values.encodeIfPresent(track, forKey: "track")
    try values.encodeIfPresent(intuneDetails, forKey: "intune_details")
    try values.encodeIfPresent(serviceConnectionID, forKey: "service_connection_id")
  }
}
