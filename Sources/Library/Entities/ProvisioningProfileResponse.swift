// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// A response containing information about an iOS provisioning profile.
public struct ProvisioningProfileResponse: Codable {
  public var provisioningProfileType: ProvisioningProfileType
  public var udids: [String]?
  /// The name of the provisioning profile.
  public var provisioningProfileName: String?
  /// The team identifier.
  public var teamIdentifier: String?
  /// The bundle identifier associated with the profile.
  public var provisioningBundleID: String?
  /// Array of provisioning profiles for any app extensions
  public var appexProfiles: [ProvisioningProfileResponse]?

  public enum ProvisioningProfileType: String, Codable, CaseIterable {
    case adhoc
    case enterprise
    case other
  }

  public init(provisioningProfileType: ProvisioningProfileType, udids: [String]? = nil, provisioningProfileName: String? = nil, teamIdentifier: String? = nil, provisioningBundleID: String? = nil, appexProfiles: [ProvisioningProfileResponse]? = nil) {
    self.provisioningProfileType = provisioningProfileType
    self.udids = udids
    self.provisioningProfileName = provisioningProfileName
    self.teamIdentifier = teamIdentifier
    self.provisioningBundleID = provisioningBundleID
    self.appexProfiles = appexProfiles
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.provisioningProfileType = try values.decode(ProvisioningProfileType.self, forKey: "provisioning_profile_type")
    self.udids = try values.decodeIfPresent([String].self, forKey: "udids")
    self.provisioningProfileName = try values.decodeIfPresent(String.self, forKey: "provisioning_profile_name")
    self.teamIdentifier = try values.decodeIfPresent(String.self, forKey: "team_identifier")
    self.provisioningBundleID = try values.decodeIfPresent(String.self, forKey: "provisioning_bundle_id")
    self.appexProfiles = try values.decodeIfPresent([ProvisioningProfileResponse].self, forKey: "appex_profiles")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(provisioningProfileType, forKey: "provisioning_profile_type")
    try values.encodeIfPresent(udids, forKey: "udids")
    try values.encodeIfPresent(provisioningProfileName, forKey: "provisioning_profile_name")
    try values.encodeIfPresent(teamIdentifier, forKey: "team_identifier")
    try values.encodeIfPresent(provisioningBundleID, forKey: "provisioning_bundle_id")
    try values.encodeIfPresent(appexProfiles, forKey: "appex_profiles")
  }
}
