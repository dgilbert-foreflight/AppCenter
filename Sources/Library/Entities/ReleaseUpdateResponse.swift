// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Response for updating a release
public struct ReleaseUpdateResponse: Codable {
  public var isEnabled: Bool?
  public var isMandatoryUpdate: Bool?
  public var releaseNotes: String?
  public var provisioningStatusURL: String?
  public var destinations: [Destination]?

  public struct Destination: Codable, Identifiable {
    public var id: String?
    public var name: String?

    public init(id: String? = nil, name: String? = nil) {
      self.id = id
      self.name = name
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.id = try values.decodeIfPresent(String.self, forKey: "id")
      self.name = try values.decodeIfPresent(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(id, forKey: "id")
      try values.encodeIfPresent(name, forKey: "name")
    }
  }

  public init(isEnabled: Bool? = nil, isMandatoryUpdate: Bool? = nil, releaseNotes: String? = nil, provisioningStatusURL: String? = nil, destinations: [Destination]? = nil) {
    self.isEnabled = isEnabled
    self.isMandatoryUpdate = isMandatoryUpdate
    self.releaseNotes = releaseNotes
    self.provisioningStatusURL = provisioningStatusURL
    self.destinations = destinations
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.isEnabled = try values.decodeIfPresent(Bool.self, forKey: "enabled")
    self.isMandatoryUpdate = try values.decodeIfPresent(Bool.self, forKey: "mandatory_update")
    self.releaseNotes = try values.decodeIfPresent(String.self, forKey: "release_notes")
    self.provisioningStatusURL = try values.decodeIfPresent(String.self, forKey: "provisioning_status_url")
    self.destinations = try values.decodeIfPresent([Destination].self, forKey: "destinations")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(isEnabled, forKey: "enabled")
    try values.encodeIfPresent(isMandatoryUpdate, forKey: "mandatory_update")
    try values.encodeIfPresent(releaseNotes, forKey: "release_notes")
    try values.encodeIfPresent(provisioningStatusURL, forKey: "provisioning_status_url")
    try values.encodeIfPresent(destinations, forKey: "destinations")
  }
}
