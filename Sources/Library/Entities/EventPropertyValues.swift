// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Event property value counts during the time range in descending order.
public struct EventPropertyValues: Codable {
  /// The total property value counts.
  public var total: Int64?
  /// The event property values.
  public var values: [Value]?

  /// An event property value with counts.
  public struct Value: Codable {
    /// The event property value name.
    public var name: String?
    /// The count of the the event property value.
    public var count: Int64?
    /// The count of previous time range of the event property value.
    public var previousCount: Int64?

    public init(name: String? = nil, count: Int64? = nil, previousCount: Int64? = nil) {
      self.name = name
      self.count = count
      self.previousCount = previousCount
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.name = try values.decodeIfPresent(String.self, forKey: "name")
      self.count = try values.decodeIfPresent(Int64.self, forKey: "count")
      self.previousCount = try values.decodeIfPresent(Int64.self, forKey: "previous_count")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(name, forKey: "name")
      try values.encodeIfPresent(count, forKey: "count")
      try values.encodeIfPresent(previousCount, forKey: "previous_count")
    }
  }

  public init(total: Int64? = nil, values: [Value]? = nil) {
    self.total = total
    self.values = values
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.total = try values.decodeIfPresent(Int64.self, forKey: "total")
    self.values = try values.decodeIfPresent([Value].self, forKey: "values")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(total, forKey: "total")
    try values.encodeIfPresent(self.values, forKey: "values")
  }
}
