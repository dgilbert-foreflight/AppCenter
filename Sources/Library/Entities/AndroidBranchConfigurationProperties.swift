// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Build configuration for Android projects
public struct AndroidBranchConfigurationProperties: Codable {
  /// Path to the Gradle wrapper script
  ///
  /// Example: "android/gradlew"
  public var gradleWrapperPath: String?
  /// The Gradle module to build
  ///
  /// Example: "app"
  public var module: String?
  /// The Android build variant to build
  ///
  /// Example: "release"
  public var buildVariant: String?
  /// Whether to run unit tests during the build (default)
  public var isRunTests: Bool
  /// Whether to run lint checks during the build (default)
  public var isRunLint: Bool?
  /// Whether it is the root module or not
  public var isRoot: Bool?
  /// Whether to apply automatic signing or not
  public var isAutomaticSigning: Bool?
  /// The password of the keystore
  public var keystorePassword: String?
  /// The key alias
  public var keyAlias: String?
  /// The key password
  public var keyPassword: String?
  /// The name of the keystore file
  public var keystoreFilename: String?
  /// The keystore encoded value
  public var keystoreEncoded: String?

  public init(gradleWrapperPath: String? = nil, module: String? = nil, buildVariant: String? = nil, isRunTests: Bool? = nil, isRunLint: Bool? = nil, isRoot: Bool? = nil, isAutomaticSigning: Bool? = nil, keystorePassword: String? = nil, keyAlias: String? = nil, keyPassword: String? = nil, keystoreFilename: String? = nil, keystoreEncoded: String? = nil) {
    self.gradleWrapperPath = gradleWrapperPath
    self.module = module
    self.buildVariant = buildVariant
    self.isRunTests = isRunTests ?? true
    self.isRunLint = isRunLint
    self.isRoot = isRoot
    self.isAutomaticSigning = isAutomaticSigning
    self.keystorePassword = keystorePassword
    self.keyAlias = keyAlias
    self.keyPassword = keyPassword
    self.keystoreFilename = keystoreFilename
    self.keystoreEncoded = keystoreEncoded
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.gradleWrapperPath = try values.decodeIfPresent(String.self, forKey: "gradleWrapperPath")
    self.module = try values.decodeIfPresent(String.self, forKey: "module")
    self.buildVariant = try values.decodeIfPresent(String.self, forKey: "buildVariant")
    self.isRunTests = try values.decodeIfPresent(Bool.self, forKey: "runTests") ?? true
    self.isRunLint = try values.decodeIfPresent(Bool.self, forKey: "runLint")
    self.isRoot = try values.decodeIfPresent(Bool.self, forKey: "isRoot")
    self.isAutomaticSigning = try values.decodeIfPresent(Bool.self, forKey: "automaticSigning")
    self.keystorePassword = try values.decodeIfPresent(String.self, forKey: "keystorePassword")
    self.keyAlias = try values.decodeIfPresent(String.self, forKey: "keyAlias")
    self.keyPassword = try values.decodeIfPresent(String.self, forKey: "keyPassword")
    self.keystoreFilename = try values.decodeIfPresent(String.self, forKey: "keystoreFilename")
    self.keystoreEncoded = try values.decodeIfPresent(String.self, forKey: "keystoreEncoded")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(gradleWrapperPath, forKey: "gradleWrapperPath")
    try values.encodeIfPresent(module, forKey: "module")
    try values.encodeIfPresent(buildVariant, forKey: "buildVariant")
    try values.encodeIfPresent(isRunTests, forKey: "runTests")
    try values.encodeIfPresent(isRunLint, forKey: "runLint")
    try values.encodeIfPresent(isRoot, forKey: "isRoot")
    try values.encodeIfPresent(isAutomaticSigning, forKey: "automaticSigning")
    try values.encodeIfPresent(keystorePassword, forKey: "keystorePassword")
    try values.encodeIfPresent(keyAlias, forKey: "keyAlias")
    try values.encodeIfPresent(keyPassword, forKey: "keyPassword")
    try values.encodeIfPresent(keystoreFilename, forKey: "keystoreFilename")
    try values.encodeIfPresent(keystoreEncoded, forKey: "keystoreEncoded")
  }
}
