// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Events: Codable {
  public var events: [Event]?
  /// The total count of events.
  public var total: Int64?
  /// The active device over this period.
  public var totalDevices: Int64?

  public struct Event: Codable, Identifiable {
    public var id: String?
    public var name: String?
    public var deviceCount: Int64?
    /// The device count of previous time range of the event.
    public var previousDeviceCount: Int64?
    public var count: Int64?
    /// The event count of previous time range of the event.
    public var previousCount: Int64?
    public var countPerDevice: Double?
    public var countPerSession: Double?

    public init(id: String? = nil, name: String? = nil, deviceCount: Int64? = nil, previousDeviceCount: Int64? = nil, count: Int64? = nil, previousCount: Int64? = nil, countPerDevice: Double? = nil, countPerSession: Double? = nil) {
      self.id = id
      self.name = name
      self.deviceCount = deviceCount
      self.previousDeviceCount = previousDeviceCount
      self.count = count
      self.previousCount = previousCount
      self.countPerDevice = countPerDevice
      self.countPerSession = countPerSession
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.id = try values.decodeIfPresent(String.self, forKey: "id")
      self.name = try values.decodeIfPresent(String.self, forKey: "name")
      self.deviceCount = try values.decodeIfPresent(Int64.self, forKey: "device_count")
      self.previousDeviceCount = try values.decodeIfPresent(Int64.self, forKey: "previous_device_count")
      self.count = try values.decodeIfPresent(Int64.self, forKey: "count")
      self.previousCount = try values.decodeIfPresent(Int64.self, forKey: "previous_count")
      self.countPerDevice = try values.decodeIfPresent(Double.self, forKey: "count_per_device")
      self.countPerSession = try values.decodeIfPresent(Double.self, forKey: "count_per_session")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(id, forKey: "id")
      try values.encodeIfPresent(name, forKey: "name")
      try values.encodeIfPresent(deviceCount, forKey: "device_count")
      try values.encodeIfPresent(previousDeviceCount, forKey: "previous_device_count")
      try values.encodeIfPresent(count, forKey: "count")
      try values.encodeIfPresent(previousCount, forKey: "previous_count")
      try values.encodeIfPresent(countPerDevice, forKey: "count_per_device")
      try values.encodeIfPresent(countPerSession, forKey: "count_per_session")
    }
  }

  public init(events: [Event]? = nil, total: Int64? = nil, totalDevices: Int64? = nil) {
    self.events = events
    self.total = total
    self.totalDevices = totalDevices
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.events = try values.decodeIfPresent([Event].self, forKey: "events")
    self.total = try values.decodeIfPresent(Int64.self, forKey: "total")
    self.totalDevices = try values.decodeIfPresent(Int64.self, forKey: "total_devices")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(events, forKey: "events")
    try values.encodeIfPresent(total, forKey: "total")
    try values.encodeIfPresent(totalDevices, forKey: "total_devices")
  }
}
