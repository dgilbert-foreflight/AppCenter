// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct DateTimeDownloadReleaseCounts: Codable {
  public var total: Int64?
  public var unique: Int64?
  /// Release counts per day.
  public var counts: [Count]?

  public struct Count: Codable {
    /// The ISO 8601 datetime.
    public var datetime: String?
    public var total: Int64?
    public var unique: Int64?

    public init(datetime: String? = nil, total: Int64? = nil, unique: Int64? = nil) {
      self.datetime = datetime
      self.total = total
      self.unique = unique
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.datetime = try values.decodeIfPresent(String.self, forKey: "datetime")
      self.total = try values.decodeIfPresent(Int64.self, forKey: "total")
      self.unique = try values.decodeIfPresent(Int64.self, forKey: "unique")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(datetime, forKey: "datetime")
      try values.encodeIfPresent(total, forKey: "total")
      try values.encodeIfPresent(unique, forKey: "unique")
    }
  }

  public init(total: Int64? = nil, unique: Int64? = nil, counts: [Count]? = nil) {
    self.total = total
    self.unique = unique
    self.counts = counts
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.total = try values.decodeIfPresent(Int64.self, forKey: "total")
    self.unique = try values.decodeIfPresent(Int64.self, forKey: "unique")
    self.counts = try values.decodeIfPresent([Count].self, forKey: "counts")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(total, forKey: "total")
    try values.encodeIfPresent(unique, forKey: "unique")
    try values.encodeIfPresent(counts, forKey: "counts")
  }
}
