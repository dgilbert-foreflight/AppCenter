// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Repostiory object
public struct AlertBugTrackerRepo: Codable, Identifiable {
  public var name: String
  public var url: String
  public var id: String
  public var description: String?
  public var isPrivate: Bool?
  /// Repository owner object
  public var owner: Owner?

  /// Repository owner object
  public struct Owner: Codable, Identifiable {
    public var name: String?
    public var id: String?
    public var login: String?

    public init(name: String? = nil, id: String? = nil, login: String? = nil) {
      self.name = name
      self.id = id
      self.login = login
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.name = try values.decodeIfPresent(String.self, forKey: "name")
      self.id = try values.decodeIfPresent(String.self, forKey: "id")
      self.login = try values.decodeIfPresent(String.self, forKey: "login")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(name, forKey: "name")
      try values.encodeIfPresent(id, forKey: "id")
      try values.encodeIfPresent(login, forKey: "login")
    }
  }

  public init(name: String, url: String, id: String, description: String? = nil, isPrivate: Bool? = nil, owner: Owner? = nil) {
    self.name = name
    self.url = url
    self.id = id
    self.description = description
    self.isPrivate = isPrivate
    self.owner = owner
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.name = try values.decode(String.self, forKey: "name")
    self.url = try values.decode(String.self, forKey: "url")
    self.id = try values.decode(String.self, forKey: "id")
    self.description = try values.decodeIfPresent(String.self, forKey: "description")
    self.isPrivate = try values.decodeIfPresent(Bool.self, forKey: "private")
    self.owner = try values.decodeIfPresent(Owner.self, forKey: "owner")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(name, forKey: "name")
    try values.encode(url, forKey: "url")
    try values.encode(id, forKey: "id")
    try values.encodeIfPresent(description, forKey: "description")
    try values.encodeIfPresent(isPrivate, forKey: "private")
    try values.encodeIfPresent(owner, forKey: "owner")
  }
}
