// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GetReleaseStatusResponse: Codable, Identifiable {
  /// The ID for the upload.
  public var id: UUID
  /// The current upload status.
  public var uploadStatus: UploadStatus
  /// Details describing what went wrong processing the upload. Will only be set if status = 'error'.
  public var errorDetails: String?
  /// The distinct ID of the release. Will only be set when the status = 'readyToBePublished'.
  public var releaseDistinctID: Double?
  /// The URL of the release. Will only be set when the status = 'readyToBePublished'.
  public var releaseURL: [String: AnyJSON]?

  /// The current upload status.
  public enum UploadStatus: String, Codable, CaseIterable {
    case uploadStarted
    case uploadFinished
    case readyToBePublished
    case malwareDetected
    case error
  }

  public init(id: UUID, uploadStatus: UploadStatus, errorDetails: String? = nil, releaseDistinctID: Double? = nil, releaseURL: [String: AnyJSON]? = nil) {
    self.id = id
    self.uploadStatus = uploadStatus
    self.errorDetails = errorDetails
    self.releaseDistinctID = releaseDistinctID
    self.releaseURL = releaseURL
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.id = try values.decode(UUID.self, forKey: "id")
    self.uploadStatus = try values.decode(UploadStatus.self, forKey: "upload_status")
    self.errorDetails = try values.decodeIfPresent(String.self, forKey: "error_details")
    self.releaseDistinctID = try values.decodeIfPresent(Double.self, forKey: "release_distinct_id")
    self.releaseURL = try values.decodeIfPresent([String: AnyJSON].self, forKey: "release_url")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encode(id, forKey: "id")
    try values.encode(uploadStatus, forKey: "upload_status")
    try values.encodeIfPresent(errorDetails, forKey: "error_details")
    try values.encodeIfPresent(releaseDistinctID, forKey: "release_distinct_id")
    try values.encodeIfPresent(releaseURL, forKey: "release_url")
  }
}
