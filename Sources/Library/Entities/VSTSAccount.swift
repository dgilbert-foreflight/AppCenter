// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// VSTS account with projects list and user info
public struct VSTSAccount: Codable {
  /// Account id
  public var accountID: String?
  /// Account uri
  public var accountUri: String?
  /// Account name
  public var accountName: String?
  /// Account type
  public var accountType: String?
  /// Account status
  public var accountStatus: String?
  /// VSTS user profile
  public var user: User?
  /// Account projects
  public var projects: [Project]?

  /// VSTS user profile
  public struct User: Codable, Identifiable {
    /// Profile id
    public var id: String?
    /// Profile display name
    public var displayName: String?
    /// Profile alias
    public var publicAlias: String?
    /// Profile email
    public var emailAddress: String?

    public init(id: String? = nil, displayName: String? = nil, publicAlias: String? = nil, emailAddress: String? = nil) {
      self.id = id
      self.displayName = displayName
      self.publicAlias = publicAlias
      self.emailAddress = emailAddress
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.id = try values.decodeIfPresent(String.self, forKey: "id")
      self.displayName = try values.decodeIfPresent(String.self, forKey: "displayName")
      self.publicAlias = try values.decodeIfPresent(String.self, forKey: "publicAlias")
      self.emailAddress = try values.decodeIfPresent(String.self, forKey: "emailAddress")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(id, forKey: "id")
      try values.encodeIfPresent(displayName, forKey: "displayName")
      try values.encodeIfPresent(publicAlias, forKey: "publicAlias")
      try values.encodeIfPresent(emailAddress, forKey: "emailAddress")
    }
  }

  /// VSTS project
  public struct Project: Codable, Identifiable {
    /// Project id
    public var id: String?
    /// Project name
    public var name: String?
    /// Project description
    public var description: String?
    /// Project URL
    public var url: String?
    /// Project state
    public var state: String?
    /// Project visibility
    public var visibility: String?

    public init(id: String? = nil, name: String? = nil, description: String? = nil, url: String? = nil, state: String? = nil, visibility: String? = nil) {
      self.id = id
      self.name = name
      self.description = description
      self.url = url
      self.state = state
      self.visibility = visibility
    }

    public init(from decoder: Decoder) throws {
      let values = try decoder.container(keyedBy: StringCodingKey.self)
      self.id = try values.decodeIfPresent(String.self, forKey: "id")
      self.name = try values.decodeIfPresent(String.self, forKey: "name")
      self.description = try values.decodeIfPresent(String.self, forKey: "description")
      self.url = try values.decodeIfPresent(String.self, forKey: "url")
      self.state = try values.decodeIfPresent(String.self, forKey: "state")
      self.visibility = try values.decodeIfPresent(String.self, forKey: "visibility")
    }

    public func encode(to encoder: Encoder) throws {
      var values = encoder.container(keyedBy: StringCodingKey.self)
      try values.encodeIfPresent(id, forKey: "id")
      try values.encodeIfPresent(name, forKey: "name")
      try values.encodeIfPresent(description, forKey: "description")
      try values.encodeIfPresent(url, forKey: "url")
      try values.encodeIfPresent(state, forKey: "state")
      try values.encodeIfPresent(visibility, forKey: "visibility")
    }
  }

  public init(accountID: String? = nil, accountUri: String? = nil, accountName: String? = nil, accountType: String? = nil, accountStatus: String? = nil, user: User? = nil, projects: [Project]? = nil) {
    self.accountID = accountID
    self.accountUri = accountUri
    self.accountName = accountName
    self.accountType = accountType
    self.accountStatus = accountStatus
    self.user = user
    self.projects = projects
  }

  public init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: StringCodingKey.self)
    self.accountID = try values.decodeIfPresent(String.self, forKey: "accountId")
    self.accountUri = try values.decodeIfPresent(String.self, forKey: "accountUri")
    self.accountName = try values.decodeIfPresent(String.self, forKey: "accountName")
    self.accountType = try values.decodeIfPresent(String.self, forKey: "accountType")
    self.accountStatus = try values.decodeIfPresent(String.self, forKey: "accountStatus")
    self.user = try values.decodeIfPresent(User.self, forKey: "user")
    self.projects = try values.decodeIfPresent([Project].self, forKey: "projects")
  }

  public func encode(to encoder: Encoder) throws {
    var values = encoder.container(keyedBy: StringCodingKey.self)
    try values.encodeIfPresent(accountID, forKey: "accountId")
    try values.encodeIfPresent(accountUri, forKey: "accountUri")
    try values.encodeIfPresent(accountName, forKey: "accountName")
    try values.encodeIfPresent(accountType, forKey: "accountType")
    try values.encodeIfPresent(accountStatus, forKey: "accountStatus")
    try values.encodeIfPresent(user, forKey: "user")
    try values.encodeIfPresent(projects, forKey: "projects")
  }
}
