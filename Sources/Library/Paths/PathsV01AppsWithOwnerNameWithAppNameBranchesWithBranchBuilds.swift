// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Branches.WithBranch {
  public var builds: Builds {
    Builds(path: path + "/builds")
  }

  public struct Builds {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds`
    public let path: String

    /// Returns the list of builds for the branch
    public var get: Request<[GetResponseItem]> {
      Request(method: "GET", url: path, id: "builds_listByBranch")
    }

    public struct GetResponseItem: Decodable, Identifiable {
      /// The build ID
      public var id: Int
      /// The build number
      public var buildNumber: String
      /// The time the build was queued
      public var queueTime: String
      /// The time the build was started
      public var startTime: String?
      /// The time the build was finished
      public var finishTime: String?
      /// The time the build status was last changed
      public var lastChangedDate: String?
      /// The build status
      public var status: String
      /// The build result
      public var result: String
      /// The source branch name
      public var sourceBranch: String
      /// The source SHA
      public var sourceVersion: String

      public init(id: Int, buildNumber: String, queueTime: String, startTime: String? = nil, finishTime: String? = nil, lastChangedDate: String? = nil, status: String, result: String, sourceBranch: String, sourceVersion: String) {
        self.id = id
        self.buildNumber = buildNumber
        self.queueTime = queueTime
        self.startTime = startTime
        self.finishTime = finishTime
        self.lastChangedDate = lastChangedDate
        self.status = status
        self.result = result
        self.sourceBranch = sourceBranch
        self.sourceVersion = sourceVersion
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.buildNumber = try values.decode(String.self, forKey: "buildNumber")
        self.queueTime = try values.decode(String.self, forKey: "queueTime")
        self.startTime = try values.decodeIfPresent(String.self, forKey: "startTime")
        self.finishTime = try values.decodeIfPresent(String.self, forKey: "finishTime")
        self.lastChangedDate = try values.decodeIfPresent(String.self, forKey: "lastChangedDate")
        self.status = try values.decode(String.self, forKey: "status")
        self.result = try values.decode(String.self, forKey: "result")
        self.sourceBranch = try values.decode(String.self, forKey: "sourceBranch")
        self.sourceVersion = try values.decode(String.self, forKey: "sourceVersion")
      }
    }

    /// Create a build
    public func post(_ body: PostRequest? = nil) -> Request<[String: AnyJSON]> {
      Request(method: "POST", url: path, body: body, id: "builds_create")
    }

    public struct PostRequest: Encodable {
      /// Version to build which represents the full Git commit reference
      public var sourceVersion: String?
      /// Run build in debug mode
      public var isDebug: Bool?

      public init(sourceVersion: String? = nil, isDebug: Bool? = nil) {
        self.sourceVersion = sourceVersion
        self.isDebug = isDebug
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(sourceVersion, forKey: "sourceVersion")
        try values.encodeIfPresent(isDebug, forKey: "debug")
      }
    }
  }
}
