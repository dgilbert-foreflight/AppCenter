// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Analytics.Events.WithEventName.Properties.WithEventPropertyName {
  public var counts: Counts {
    Counts(path: path + "/counts")
  }

  public struct Counts {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts`
    public let path: String

    /// Event properties value counts during the time range in descending order.
    public func get(parameters: GetParameters) -> Request<GetResponse> {
      Request(method: "GET", url: path, query: parameters.asQuery, id: "Analytics_EventPropertyCounts")
    }

    /// Event property value counts during the time range in descending order.
    public struct GetResponse: Decodable {
      /// The total property value counts.
      public var total: Int64?
      /// The event property values.
      public var values: [Value]?

      /// An event property value with counts.
      public struct Value: Decodable {
        /// The event property value name.
        public var name: String?
        /// The count of the the event property value.
        public var count: Int64?
        /// The count of previous time range of the event property value.
        public var previousCount: Int64?

        public init(name: String? = nil, count: Int64? = nil, previousCount: Int64? = nil) {
          self.name = name
          self.count = count
          self.previousCount = previousCount
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.name = try values.decodeIfPresent(String.self, forKey: "name")
          self.count = try values.decodeIfPresent(Int64.self, forKey: "count")
          self.previousCount = try values.decodeIfPresent(Int64.self, forKey: "previous_count")
        }
      }

      public init(total: Int64? = nil, values: [Value]? = nil) {
        self.total = total
        self.values = values
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.total = try values.decodeIfPresent(Int64.self, forKey: "total")
        self.values = try values.decodeIfPresent([Value].self, forKey: "values")
      }
    }

    public struct GetParameters {
      public var start: Date
      public var end: Date?
      public var versions: [String]?
      public var top: Int64?

      public init(start: Date, end: Date? = nil, versions: [String]? = nil, top: Int64? = nil) {
        self.start = start
        self.end = end
        self.versions = versions
        self.top = top
      }

      public var asQuery: [(String, String?)] {
        let encoder = URLQueryEncoder()
        encoder.encode(start, forKey: "start")
        encoder.encode(end, forKey: "end")
        encoder.encode(versions, forKey: "versions", explode: false, delimiter: "|")
        encoder.encode(top, forKey: "$top")
        return encoder.items
      }
    }
  }
}
