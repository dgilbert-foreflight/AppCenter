// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName {
  public func appName(_ appName: String) -> WithAppName {
    WithAppName(path: "\(path)/\(appName)")
  }

  public struct WithAppName {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}`
    public let path: String

    /// Return a specific app with the given app name which belongs to the given owner.
    public var get: Request<[String: AnyJSON]> {
      Request(method: "GET", url: path, id: "apps_get")
    }

    /// Partially updates a single app
    public func patch(_ body: PatchRequest? = nil) -> Request<[String: AnyJSON]> {
      Request(method: "PATCH", url: path, body: body, id: "apps_update")
    }

    public struct PatchRequest: Encodable {
      /// A short text describing the app
      public var description: String?
      /// The display name of the app
      public var displayName: String?
      /// A one-word descriptive release type value that starts with a capital letter but is otherwise lowercase
      public var releaseType: String?
      /// The name of the app used in URLs
      public var name: String?
      /// The string representation of the URL pointing to the app's icon
      public var iconURL: String?
      /// The uuid for the icon's asset id from ACFUS
      public var iconAssetID: UUID?

      public init(description: String? = nil, displayName: String? = nil, releaseType: String? = nil, name: String? = nil, iconURL: String? = nil, iconAssetID: UUID? = nil) {
        self.description = description
        self.displayName = displayName
        self.releaseType = releaseType
        self.name = name
        self.iconURL = iconURL
        self.iconAssetID = iconAssetID
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(displayName, forKey: "display_name")
        try values.encodeIfPresent(releaseType, forKey: "release_type")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(iconURL, forKey: "icon_url")
        try values.encodeIfPresent(iconAssetID, forKey: "icon_asset_id")
      }
    }

    /// Delete an app
    public var delete: Request<Void> {
      Request(method: "DELETE", url: path, id: "apps_delete")
    }
  }
}
