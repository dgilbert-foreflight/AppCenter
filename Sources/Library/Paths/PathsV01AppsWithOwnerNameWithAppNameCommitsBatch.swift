// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Commits {
  public var batch: Batch {
    Batch(path: path + "/batch")
  }

  public struct Batch {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/commits/batch`
    public let path: String

    /// Returns commit information for a batch of shas
    public func get(hashes: [String]) -> Request<[GetResponseItem]> {
      Request(method: "GET", url: path, query: makeGetQuery(hashes), id: "commits_listByShaList")
    }

    public struct GetResponseItem: Decodable {
      /// The commit SHA
      public var sha: String?
      /// The URL to the commit
      public var url: String?
      public var commit: Commit?

      public struct Commit: Decodable {
        /// Commit message
        public var message: String?
        public var author: Author?

        public struct Author: Decodable {
          /// Date and time of the commit
          public var date: String?
          /// Author name
          public var name: String?
          /// Author's email
          public var email: String?

          public init(date: String? = nil, name: String? = nil, email: String? = nil) {
            self.date = date
            self.name = name
            self.email = email
          }

          public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.date = try values.decodeIfPresent(String.self, forKey: "date")
            self.name = try values.decodeIfPresent(String.self, forKey: "name")
            self.email = try values.decodeIfPresent(String.self, forKey: "email")
          }
        }

        public init(message: String? = nil, author: Author? = nil) {
          self.message = message
          self.author = author
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.message = try values.decodeIfPresent(String.self, forKey: "message")
          self.author = try values.decodeIfPresent(Author.self, forKey: "author")
        }
      }

      public init(sha: String? = nil, url: String? = nil, commit: Commit? = nil) {
        self.sha = sha
        self.url = url
        self.commit = commit
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.sha = try values.decodeIfPresent(String.self, forKey: "sha")
        self.url = try values.decodeIfPresent(String.self, forKey: "url")
        self.commit = try values.decodeIfPresent(Commit.self, forKey: "commit")
      }
    }

    private func makeGetQuery(_ hashes: [String]) -> [(String, String?)] {
      let encoder = URLQueryEncoder()
      encoder.encode(hashes, forKey: "hashes", explode: false)
      return encoder.items
    }
  }
}
