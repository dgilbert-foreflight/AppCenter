// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Errors.ErrorGroups.WithErrorGroupID {
  public var errors: Errors {
    Errors(path: path + "/errors")
  }

  public struct Errors {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors`
    public let path: String

    /// Get all errors for group
    public func get(parameters: GetParameters) -> Request<GetResponse> {
      Request(method: "GET", url: path, query: parameters.asQuery, id: "Errors_ListForGroup")
    }

    public struct GetResponse: Decodable {
      public var nextLink: String?
      /// Errors list.
      public var errors: [Error]?

      public struct Error: Decodable {
        public var errorID: String?
        public var timestamp: Date?
        public var deviceName: String?
        public var osVersion: String?
        public var osType: String?
        public var country: String?
        public var language: String?
        public var userID: String?
        public var hasBreadcrumbs: Bool?
        public var hasAttachments: Bool?

        public init(errorID: String? = nil, timestamp: Date? = nil, deviceName: String? = nil, osVersion: String? = nil, osType: String? = nil, country: String? = nil, language: String? = nil, userID: String? = nil, hasBreadcrumbs: Bool? = nil, hasAttachments: Bool? = nil) {
          self.errorID = errorID
          self.timestamp = timestamp
          self.deviceName = deviceName
          self.osVersion = osVersion
          self.osType = osType
          self.country = country
          self.language = language
          self.userID = userID
          self.hasBreadcrumbs = hasBreadcrumbs
          self.hasAttachments = hasAttachments
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.errorID = try values.decodeIfPresent(String.self, forKey: "errorId")
          self.timestamp = try values.decodeIfPresent(Date.self, forKey: "timestamp")
          self.deviceName = try values.decodeIfPresent(String.self, forKey: "deviceName")
          self.osVersion = try values.decodeIfPresent(String.self, forKey: "osVersion")
          self.osType = try values.decodeIfPresent(String.self, forKey: "osType")
          self.country = try values.decodeIfPresent(String.self, forKey: "country")
          self.language = try values.decodeIfPresent(String.self, forKey: "language")
          self.userID = try values.decodeIfPresent(String.self, forKey: "userId")
          self.hasBreadcrumbs = try values.decodeIfPresent(Bool.self, forKey: "hasBreadcrumbs")
          self.hasAttachments = try values.decodeIfPresent(Bool.self, forKey: "hasAttachments")
        }
      }

      public init(nextLink: String? = nil, errors: [Error]? = nil) {
        self.nextLink = nextLink
        self.errors = errors
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.nextLink = try values.decodeIfPresent(String.self, forKey: "nextLink")
        self.errors = try values.decodeIfPresent([Error].self, forKey: "errors")
      }
    }

    public struct GetParameters {
      public var start: Date
      public var end: Date?
      public var top: Int64?
      public var model: String?
      public var os: String?

      public init(start: Date, end: Date? = nil, top: Int64? = nil, model: String? = nil, os: String? = nil) {
        self.start = start
        self.end = end
        self.top = top
        self.model = model
        self.os = os
      }

      public var asQuery: [(String, String?)] {
        let encoder = URLQueryEncoder()
        encoder.encode(start, forKey: "start")
        encoder.encode(end, forKey: "end")
        encoder.encode(top, forKey: "$top")
        encoder.encode(model, forKey: "model")
        encoder.encode(os, forKey: "os")
        return encoder.items
      }
    }
  }
}
