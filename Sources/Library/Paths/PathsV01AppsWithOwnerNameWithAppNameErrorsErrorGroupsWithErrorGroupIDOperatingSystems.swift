// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Errors.ErrorGroups.WithErrorGroupID {
  public var operatingSystems: OperatingSystems {
    OperatingSystems(path: path + "/operatingSystems")
  }

  public struct OperatingSystems {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems`
    public let path: String

    /// Top OSes of the selected error group.
    public func get(top: Int64? = nil) -> Request<GetResponse> {
      Request(method: "GET", url: path, query: makeGetQuery(top), id: "Errors_GroupOperatingSystemCounts")
    }

    public struct GetResponse: Decodable {
      public var errorCount: Int64?
      public var operatingSystems: [OperatingSystem]?

      public struct OperatingSystem: Decodable {
        /// OS name
        public var operatingSystemName: String?
        /// Count of OS
        public var errorCount: Int64?

        public init(operatingSystemName: String? = nil, errorCount: Int64? = nil) {
          self.operatingSystemName = operatingSystemName
          self.errorCount = errorCount
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.operatingSystemName = try values.decodeIfPresent(String.self, forKey: "operatingSystemName")
          self.errorCount = try values.decodeIfPresent(Int64.self, forKey: "errorCount")
        }
      }

      public init(errorCount: Int64? = nil, operatingSystems: [OperatingSystem]? = nil) {
        self.errorCount = errorCount
        self.operatingSystems = operatingSystems
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.errorCount = try values.decodeIfPresent(Int64.self, forKey: "errorCount")
        self.operatingSystems = try values.decodeIfPresent([OperatingSystem].self, forKey: "operatingSystems")
      }
    }

    private func makeGetQuery(_ top: Int64?) -> [(String, String?)] {
      let encoder = URLQueryEncoder()
      encoder.encode(top, forKey: "$top")
      return encoder.items
    }
  }
}
