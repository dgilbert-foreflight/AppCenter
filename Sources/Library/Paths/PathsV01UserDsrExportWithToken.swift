// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.User.Dsr.Export {
  public func token(_ token: String) -> WithToken {
    WithToken(path: "\(path)/\(token)")
  }

  public struct WithToken {
    /// Path: `/v0.1/user/dsr/export/{token}`
    public let path: String

    public var get: Request<GetResponse> {
      Request(method: "GET", url: path, id: "DataSubjectRight_ExportStatusRequest")
    }

    public struct GetResponse: Decodable {
      /// Azure Storage shared access signature (SAS) URL for exported user data.
      public var sasURL: String?
      /// Whether Azure Storage shared access signature (SAS) URL has expired or not.
      public var isSasURLExpired: Bool?
      /// Status of data subject right request
      public var status: Status
      /// Explanation message of the status
      public var message: String

      /// Status of data subject right request
      public enum Status: String, Codable, CaseIterable {
        case `none` = "None"
        case created = "Created"
        case queued = "Queued"
        case inProgress = "InProgress"
        case completed = "Completed"
        case failed = "Failed"
      }

      public init(sasURL: String? = nil, isSasURLExpired: Bool? = nil, status: Status, message: String) {
        self.sasURL = sasURL
        self.isSasURLExpired = isSasURLExpired
        self.status = status
        self.message = message
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.sasURL = try values.decodeIfPresent(String.self, forKey: "sasUrl")
        self.isSasURLExpired = try values.decodeIfPresent(Bool.self, forKey: "sasUrlExpired")
        self.status = try values.decode(Status.self, forKey: "status")
        self.message = try values.decode(String.self, forKey: "message")
      }
    }
  }
}
