// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Branches.WithBranch {
  public var config: Config {
    Config(path: path + "/config")
  }

  public struct Config {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config`
    public let path: String

    /// Gets the branch configuration
    public var get: Request<GetResponse> {
      Request(method: "GET", url: path, id: "branchConfigurations_get")
    }

    public struct GetResponse: Decodable, Identifiable {
      public var id: Int

      public init(id: Int) {
        self.id = id
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
      }
    }

    /// Configures the branch for build
    public func post(_ body: [String: PostRequestItem]) -> Request<PostResponse> {
      Request(method: "POST", url: path, body: body, id: "branchConfigurations_create")
    }

    public struct PostResponse: Decodable, Identifiable {
      public var id: Int

      public init(id: Int) {
        self.id = id
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
      }
    }

    /// The branch build core properties
    public struct PostRequestItem: Encodable {
      public var branch: Branch?
      public var isEnabled: Bool?

      public struct Branch: Encodable {
        /// The branch name
        public var name: String
        public var commit: Commit

        public struct Commit: Encodable {
          /// The commit SHA
          public var sha: String?
          /// The URL to the commit
          public var url: String?

          public init(sha: String? = nil, url: String? = nil) {
            self.sha = sha
            self.url = url
          }

          public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(sha, forKey: "sha")
            try values.encodeIfPresent(url, forKey: "url")
          }
        }

        public init(name: String, commit: Commit) {
          self.name = name
          self.commit = commit
        }

        public func encode(to encoder: Encoder) throws {
          var values = encoder.container(keyedBy: StringCodingKey.self)
          try values.encode(name, forKey: "name")
          try values.encode(commit, forKey: "commit")
        }
      }

      public init(branch: Branch? = nil, isEnabled: Bool? = nil) {
        self.branch = branch
        self.isEnabled = isEnabled
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(branch, forKey: "branch")
        try values.encodeIfPresent(isEnabled, forKey: "enabled")
      }
    }

    /// Reconfigures the branch for build
    public func put(_ body: [String: PutRequestItem]) -> Request<PutResponse> {
      Request(method: "PUT", url: path, body: body, id: "branchConfigurations_update")
    }

    public struct PutResponse: Decodable, Identifiable {
      public var id: Int

      public init(id: Int) {
        self.id = id
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
      }
    }

    /// The branch build core properties
    public struct PutRequestItem: Encodable {
      public var branch: Branch?
      public var isEnabled: Bool?

      public struct Branch: Encodable {
        /// The branch name
        public var name: String
        public var commit: Commit

        public struct Commit: Encodable {
          /// The commit SHA
          public var sha: String?
          /// The URL to the commit
          public var url: String?

          public init(sha: String? = nil, url: String? = nil) {
            self.sha = sha
            self.url = url
          }

          public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(sha, forKey: "sha")
            try values.encodeIfPresent(url, forKey: "url")
          }
        }

        public init(name: String, commit: Commit) {
          self.name = name
          self.commit = commit
        }

        public func encode(to encoder: Encoder) throws {
          var values = encoder.container(keyedBy: StringCodingKey.self)
          try values.encode(name, forKey: "name")
          try values.encode(commit, forKey: "commit")
        }
      }

      public init(branch: Branch? = nil, isEnabled: Bool? = nil) {
        self.branch = branch
        self.isEnabled = isEnabled
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(branch, forKey: "branch")
        try values.encodeIfPresent(isEnabled, forKey: "enabled")
      }
    }

    /// Deletes the branch build configuration
    public func delete(_ body: [String: AnyJSON]? = nil) -> Request<[String: AnyJSON]> {
      Request(method: "DELETE", url: path, body: body, id: "branchConfigurations_delete")
    }
  }
}
