// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Users.WithUserID.Devices {
  public var register: Register {
    Register(path: path + "/register")
  }

  public struct Register {
    /// Path: `/v0.1/users/{user_id}/devices/register`
    public let path: String

    /// Registers a user for an existing device
    public func post(_ body: PostRequest) -> Request<[String: AnyJSON]> {
      Request(method: "POST", url: path, body: body, id: "devices_registerUserForDevice")
    }

    /// The information for a single iOS device
    public struct PostRequest: Encodable {
      /// The Unique Device IDentifier of the device
      public var udid: String
      /// The model identifier of the device, in the format iDeviceM,N
      public var model: String
      /// The build number of the last known OS version running on the device
      public var osBuild: String?
      /// The last known OS version running on the device
      public var osVersion: String?
      /// The device's serial number. Always empty or undefined at present.
      public var serial: String?
      /// The device's International Mobile Equipment Identity number. Always empty or undefined at present.
      public var imei: String?
      /// The user ID of the device owner.
      public var ownerID: String?

      public init(udid: String, model: String, osBuild: String? = nil, osVersion: String? = nil, serial: String? = nil, imei: String? = nil, ownerID: String? = nil) {
        self.udid = udid
        self.model = model
        self.osBuild = osBuild
        self.osVersion = osVersion
        self.serial = serial
        self.imei = imei
        self.ownerID = ownerID
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(udid, forKey: "udid")
        try values.encode(model, forKey: "model")
        try values.encodeIfPresent(osBuild, forKey: "os_build")
        try values.encodeIfPresent(osVersion, forKey: "os_version")
        try values.encodeIfPresent(serial, forKey: "serial")
        try values.encodeIfPresent(imei, forKey: "imei")
        try values.encodeIfPresent(ownerID, forKey: "owner_id")
      }
    }
  }
}
