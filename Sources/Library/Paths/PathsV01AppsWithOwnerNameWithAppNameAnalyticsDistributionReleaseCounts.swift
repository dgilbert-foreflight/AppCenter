// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Analytics.Distribution {
  public var releaseCounts: ReleaseCounts {
    ReleaseCounts(path: path + "/release_counts")
  }

  public struct ReleaseCounts {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts`
    public let path: String

    /// Count of total downloads for the provided distribution releases.
    public func post(releases: [PostRequest.Release]) -> Request<PostResponse> {
      Request(method: "POST", url: path, body: PostRequest(releases: releases), id: "Analytics_DistributionReleaseCounts")
    }

    public struct PostResponse: Decodable {
      public var total: Int64?
      public var counts: [Count]

      public struct Count: Decodable {
        public var releaseID: String
        /// Distribution group queried.
        public var distributionGroup: String?
        /// Count of unique downloads against user id.
        public var uniqueCount: Int64
        /// Total count of downloads.
        public var totalCount: Int64

        public init(releaseID: String, distributionGroup: String? = nil, uniqueCount: Int64, totalCount: Int64) {
          self.releaseID = releaseID
          self.distributionGroup = distributionGroup
          self.uniqueCount = uniqueCount
          self.totalCount = totalCount
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.releaseID = try values.decode(String.self, forKey: "release_id")
          self.distributionGroup = try values.decodeIfPresent(String.self, forKey: "distribution_group")
          self.uniqueCount = try values.decode(Int64.self, forKey: "unique_count")
          self.totalCount = try values.decode(Int64.self, forKey: "total_count")
        }
      }

      public init(total: Int64? = nil, counts: [Count]) {
        self.total = total
        self.counts = counts
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.total = try values.decodeIfPresent(Int64.self, forKey: "total")
        self.counts = try values.decode([Count].self, forKey: "counts")
      }
    }

    public struct PostRequest: Encodable {
      public var releases: [Release]

      public struct Release: Encodable {
        /// Distribution group Id.
        public var distributionGroup: String?

        public init(distributionGroup: String? = nil) {
          self.distributionGroup = distributionGroup
        }

        public func encode(to encoder: Encoder) throws {
          var values = encoder.container(keyedBy: StringCodingKey.self)
          try values.encodeIfPresent(distributionGroup, forKey: "distribution_group")
        }
      }

      public init(releases: [Release]) {
        self.releases = releases
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(releases, forKey: "releases")
      }
    }
  }
}
