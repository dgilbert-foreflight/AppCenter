// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Errors {
  public var availableVersions: AvailableVersions {
    AvailableVersions(path: path + "/available_versions")
  }

  public struct AvailableVersions {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/errors/available_versions`
    public let path: String

    /// Get all available versions in the time range.
    public func get(parameters: GetParameters) -> Request<GetResponse> {
      Request(method: "GET", url: path, query: parameters.asQuery, id: "Errors_AvailableVersions")
    }

    public struct GetResponse: Decodable {
      /// List of available versions.
      public var versions: [String]?
      /// The full number of versions across all pages.
      public var totalCount: Int64?

      public init(versions: [String]? = nil, totalCount: Int64? = nil) {
        self.versions = versions
        self.totalCount = totalCount
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.versions = try values.decodeIfPresent([String].self, forKey: "versions")
        self.totalCount = try values.decodeIfPresent(Int64.self, forKey: "total_count")
      }
    }

    public struct GetParameters {
      public var start: Date
      public var end: Date?
      public var top: Int64?
      public var skip: Int64?
      public var filter: String?
      public var inlinecount: Inlinecount?
      public var errorType: ErrorType?

      public enum Inlinecount: String, Codable, CaseIterable {
        case allpages
        case `none`
      }

      public enum ErrorType: String, Codable, CaseIterable {
        case all
        case unhandledError
        case handledError
      }

      public init(start: Date, end: Date? = nil, top: Int64? = nil, skip: Int64? = nil, filter: String? = nil, inlinecount: Inlinecount? = nil, errorType: ErrorType? = nil) {
        self.start = start
        self.end = end
        self.top = top
        self.skip = skip
        self.filter = filter
        self.inlinecount = inlinecount
        self.errorType = errorType
      }

      public var asQuery: [(String, String?)] {
        let encoder = URLQueryEncoder()
        encoder.encode(start, forKey: "start")
        encoder.encode(end, forKey: "end")
        encoder.encode(top, forKey: "$top")
        encoder.encode(skip, forKey: "$skip")
        encoder.encode(filter, forKey: "$filter")
        encoder.encode(inlinecount, forKey: "$inlinecount")
        encoder.encode(errorType, forKey: "errorType")
        return encoder.items
      }
    }
  }
}
