// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Orgs.WithOrgName {
  public var teams: Teams {
    Teams(path: path + "/teams")
  }

  public struct Teams {
    /// Path: `/v0.1/orgs/{org_name}/teams`
    public let path: String

    /// Returns the list of all teams in this org
    public var get: Request<[GetResponseItem]> {
      Request(method: "GET", url: path, id: "teams_listAll")
    }

    public struct GetResponseItem: Decodable, Identifiable {
      /// The internal unique id (UUID) of the team.
      public var id: UUID
      /// The name of the team
      public var name: String
      /// The display name of the team
      public var displayName: String
      /// The description of the team
      public var description: String?

      public init(id: UUID, name: String, displayName: String, description: String? = nil) {
        self.id = id
        self.name = name
        self.displayName = displayName
        self.description = description
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(UUID.self, forKey: "id")
        self.name = try values.decode(String.self, forKey: "name")
        self.displayName = try values.decode(String.self, forKey: "display_name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
      }
    }

    /// Creates a team and returns it
    public func post(_ body: PostRequest) -> Request<[PostResponseItem]> {
      Request(method: "POST", url: path, body: body, id: "teams_createTeam")
    }

    public struct PostResponseItem: Decodable, Identifiable {
      /// The internal unique id (UUID) of the team.
      public var id: UUID
      /// The name of the team
      public var name: String
      /// The display name of the team
      public var displayName: String
      /// The description of the team
      public var description: String?

      public init(id: UUID, name: String, displayName: String, description: String? = nil) {
        self.id = id
        self.name = name
        self.displayName = displayName
        self.description = description
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(UUID.self, forKey: "id")
        self.name = try values.decode(String.self, forKey: "name")
        self.displayName = try values.decode(String.self, forKey: "display_name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
      }
    }

    public struct PostRequest: Encodable {
      /// The display name of the team
      public var displayName: String
      /// The name of the team
      public var name: String?
      /// The description of the team
      public var description: String?

      public init(displayName: String, name: String? = nil, description: String? = nil) {
        self.displayName = displayName
        self.name = name
        self.description = description
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(displayName, forKey: "display_name")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
      }
    }
  }
}
