// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Invitations {
  public func userEmail(_ userEmail: String) -> WithUserEmail {
    WithUserEmail(path: "\(path)/\(userEmail)")
  }

  public struct WithUserEmail {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}`
    public let path: String

    /// Invites a new or existing user to an app
    @available(*, deprecated, message: "Deprecated")
    public func post(role: PostRequest.Role? = nil) -> Request<Void> {
      Request(method: "POST", url: path, body: PostRequest(role: role), id: "appInvitations_createByEmail")
    }

    public struct PostRequest: Encodable {
      /// The role of the user to be added
      public var role: Role?

      /// The role of the user to be added
      public enum Role: String, Codable, CaseIterable {
        case admin
        case collaborator
        case member
      }

      public init(role: Role? = nil) {
        self.role = role
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(role, forKey: "role")
      }
    }

    /// Update pending invitation permission
    public func patch(permissions: [PatchRequest.Permission]) -> Request<Void> {
      Request(method: "PATCH", url: path, body: PatchRequest(permissions: permissions), id: "appInvitations_updatePermissions")
    }

    public struct PatchRequest: Encodable {
      /// The permissions the user has for the app in the invitation
      public var permissions: [Permission]

      public enum Permission: String, Codable, CaseIterable {
        case manager
        case developer
        case viewer
      }

      public init(permissions: [Permission]) {
        self.permissions = permissions
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(permissions, forKey: "permissions")
      }
    }

    /// Removes a user's invitation to an app
    public var delete: Request<Void> {
      Request(method: "DELETE", url: path, id: "appInvitations_delete")
    }
  }
}
