// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API {
  public static var administeredOrgs: AdministeredOrgs {
    AdministeredOrgs(path: "/v0.1/administeredOrgs")
  }

  public struct AdministeredOrgs {
    /// Path: `/v0.1/administeredOrgs`
    public let path: String

    /// Returns a list organizations in which the requesting user is an admin
    public var get: Request<GetResponse> {
      Request(method: "GET", url: path, id: "organizations_listAdministered")
    }

    public struct GetResponse: Decodable {
      public var organizations: Organizations

      public struct Organizations: Decodable, Identifiable {
        /// The internal unique id (UUID) of the organization.
        public var id: UUID
        /// The display name of the organization
        public var displayName: String
        /// The slug name of the organization
        public var name: String
        /// The URL to a user-uploaded Avatar image
        public var avatarURL: String?
        /// The creation origin of this organization
        public var origin: Origin
        /// The creation date of this organization
        public var createdAt: String
        /// The date the organization was last updated at
        public var updatedAt: String

        /// The creation origin of this organization
        public enum Origin: String, Codable, CaseIterable {
          case appcenter
          case hockeyapp
        }

        public init(id: UUID, displayName: String, name: String, avatarURL: String? = nil, origin: Origin, createdAt: String, updatedAt: String) {
          self.id = id
          self.displayName = displayName
          self.name = name
          self.avatarURL = avatarURL
          self.origin = origin
          self.createdAt = createdAt
          self.updatedAt = updatedAt
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.id = try values.decode(UUID.self, forKey: "id")
          self.displayName = try values.decode(String.self, forKey: "display_name")
          self.name = try values.decode(String.self, forKey: "name")
          self.avatarURL = try values.decodeIfPresent(String.self, forKey: "avatar_url")
          self.origin = try values.decode(Origin.self, forKey: "origin")
          self.createdAt = try values.decode(String.self, forKey: "created_at")
          self.updatedAt = try values.decode(String.self, forKey: "updated_at")
        }
      }

      public init(organizations: Organizations) {
        self.organizations = organizations
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.organizations = try values.decode(Organizations.self, forKey: "organizations")
      }
    }
  }
}
