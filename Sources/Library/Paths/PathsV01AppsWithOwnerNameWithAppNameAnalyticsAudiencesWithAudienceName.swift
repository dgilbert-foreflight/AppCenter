// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Analytics.Audiences {
  public func audienceName(_ audienceName: String) -> WithAudienceName {
    WithAudienceName(path: "\(path)/\(audienceName)")
  }

  public struct WithAudienceName {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}`
    public let path: String

    /// Gets audience definition.
    public var get: Request<[String: AnyJSON]> {
      Request(method: "GET", url: path, id: "Analytics_GetAudience")
    }

    /// Creates or updates audience definition.
    public func put(_ body: PutRequest) -> Request<[String: AnyJSON]> {
      Request(method: "PUT", url: path, body: body, id: "Analytics_CreateOrUpdateAudience")
    }

    /// Audience definition.
    public struct PutRequest: Encodable {
      /// Audience description.
      public var description: String?
      /// Audience definition in OData format.
      public var definition: String
      public var isEnabled: Bool
      /// Custom properties used in the definition.
      public var customProperties: [String: CustomProperty]?

      public enum CustomProperty: String, Codable, CaseIterable {
        case string
        case number
        case boolean
        case dateTime = "date_time"
      }

      public init(description: String? = nil, definition: String, isEnabled: Bool? = nil, customProperties: [String: CustomProperty]? = nil) {
        self.description = description
        self.definition = definition
        self.isEnabled = isEnabled ?? true
        self.customProperties = customProperties
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(description, forKey: "description")
        try values.encode(definition, forKey: "definition")
        try values.encodeIfPresent(isEnabled, forKey: "enabled")
        try values.encodeIfPresent(customProperties, forKey: "custom_properties")
      }
    }

    /// Deletes audience definition.
    public var delete: Request<Void> {
      Request(method: "DELETE", url: path, id: "Analytics_DeleteAudience")
    }

    /// Returns whether audience definition exists.
    public var head: Request<Void> {
      Request(method: "HEAD", url: path, id: "Analytics_AudienceNameExists")
    }
  }
}
