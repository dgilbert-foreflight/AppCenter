// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Uploads.Releases {
  public func uploadID(_ uploadID: String) -> WithUploadID {
    WithUploadID(path: "\(path)/\(uploadID)")
  }

  public struct WithUploadID {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}`
    public let path: String

    /// Get the current status of the release upload.
    public var get: Request<[String: AnyJSON]> {
      Request(method: "GET", url: path, id: "releases_getReleaseUploadStatus")
    }

    /// Update the current status of the release upload.
    public func patch(isExtract: Bool? = nil, uploadStatus: PatchRequest.UploadStatus) -> Request<[String: AnyJSON]> {
      Request(method: "PATCH", url: path, query: makePatchQuery(isExtract), body: PatchRequest(uploadStatus: uploadStatus), id: "releases_updateReleaseUploadStatus")
    }

    private func makePatchQuery(_ isExtract: Bool?) -> [(String, String?)] {
      let encoder = URLQueryEncoder()
      encoder.encode(isExtract, forKey: "extract")
      return encoder.items
    }

    public struct PatchRequest: Encodable {
      /// The new status of the release upload
      public var uploadStatus: UploadStatus

      /// The new status of the release upload
      public enum UploadStatus: String, Codable, CaseIterable {
        case uploadFinished
        case uploadCanceled
      }

      public init(uploadStatus: UploadStatus) {
        self.uploadStatus = uploadStatus
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(uploadStatus, forKey: "upload_status")
      }
    }
  }
}
