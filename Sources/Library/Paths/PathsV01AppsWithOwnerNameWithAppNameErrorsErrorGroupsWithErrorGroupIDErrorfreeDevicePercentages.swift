// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Errors.ErrorGroups.WithErrorGroupID {
  public var errorfreeDevicePercentages: ErrorfreeDevicePercentages {
    ErrorfreeDevicePercentages(path: path + "/errorfreeDevicePercentages")
  }

  public struct ErrorfreeDevicePercentages {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages`
    public let path: String

    /// Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
    public func get(start: Date, end: Date? = nil) -> Request<GetResponse> {
      Request(method: "GET", url: path, query: makeGetQuery(start, end), id: "Errors_GroupErrorFreeDevicePercentages")
    }

    public struct GetResponse: Decodable {
      /// Average percentage
      public var averagePercentage: Double?
      /// The error-free percentage per day.
      public var dailyPercentages: [DailyPercentage]?

      public struct DailyPercentage: Decodable {
        /// The ISO 8601 datetime
        public var datetime: String?
        /// Percentage of the object
        public var percentage: Double?

        public init(datetime: String? = nil, percentage: Double? = nil) {
          self.datetime = datetime
          self.percentage = percentage
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.datetime = try values.decodeIfPresent(String.self, forKey: "datetime")
          self.percentage = try values.decodeIfPresent(Double.self, forKey: "percentage")
        }
      }

      public init(averagePercentage: Double? = nil, dailyPercentages: [DailyPercentage]? = nil) {
        self.averagePercentage = averagePercentage
        self.dailyPercentages = dailyPercentages
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.averagePercentage = try values.decodeIfPresent(Double.self, forKey: "averagePercentage")
        self.dailyPercentages = try values.decodeIfPresent([DailyPercentage].self, forKey: "dailyPercentages")
      }
    }

    private func makeGetQuery(_ start: Date, _ end: Date?) -> [(String, String?)] {
      let encoder = URLQueryEncoder()
      encoder.encode(start, forKey: "start")
      encoder.encode(end, forKey: "end")
      return encoder.items
    }
  }
}
