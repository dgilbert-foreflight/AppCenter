// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Public.Apps.WithOwnerName.WithAppName {
  public var installAnalytics: InstallAnalytics {
    InstallAnalytics(path: path + "/install_analytics")
  }

  public struct InstallAnalytics {
    /// Path: `/v0.1/public/apps/{owner_name}/{app_name}/install_analytics`
    public let path: String

    /// Notify download(s) for the provided distribution release(s).
    public func post(releases: [PostRequest.Release]? = nil) -> Request<Void> {
      Request(method: "POST", url: path, body: PostRequest(releases: releases), id: "distibutionReleases_installAnalytics")
    }

    public struct PostRequest: Encodable {
      public var releases: [Release]?

      public struct Release: Encodable {
        /// Release id
        public var releaseID: Int
        /// Distribution group id
        public var distributionGroupID: String
        /// User id
        public var userID: UUID

        public init(releaseID: Int, distributionGroupID: String, userID: UUID) {
          self.releaseID = releaseID
          self.distributionGroupID = distributionGroupID
          self.userID = userID
        }

        public func encode(to encoder: Encoder) throws {
          var values = encoder.container(keyedBy: StringCodingKey.self)
          try values.encode(releaseID, forKey: "release_id")
          try values.encode(distributionGroupID, forKey: "distribution_group_id")
          try values.encode(userID, forKey: "user_id")
        }
      }

      public init(releases: [Release]? = nil) {
        self.releases = releases
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(releases, forKey: "releases")
      }
    }
  }
}
