// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName {
  public var distributionGroups: DistributionGroups {
    DistributionGroups(path: path + "/distribution_groups")
  }

  public struct DistributionGroups {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/distribution_groups`
    public let path: String

    /// Returns a list of distribution groups in the app specified
    public var get: Request<[GetResponseItem]> {
      Request(method: "GET", url: path, id: "distributionGroups_list")
    }

    public struct GetResponseItem: Decodable, Identifiable {
      /// The unique ID of the distribution group
      public var id: UUID
      /// The name of the distribution group used in URLs
      public var name: String
      /// The name of the distribution group
      public var displayName: String?
      /// The creation origin of this distribution group
      public var origin: Origin
      /// Whether the distribution group is public
      public var isPublic: Bool

      /// The creation origin of this distribution group
      public enum Origin: String, Codable, CaseIterable {
        case appcenter
        case hockeyapp
      }

      public init(id: UUID, name: String, displayName: String? = nil, origin: Origin, isPublic: Bool) {
        self.id = id
        self.name = name
        self.displayName = displayName
        self.origin = origin
        self.isPublic = isPublic
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(UUID.self, forKey: "id")
        self.name = try values.decode(String.self, forKey: "name")
        self.displayName = try values.decodeIfPresent(String.self, forKey: "display_name")
        self.origin = try values.decode(Origin.self, forKey: "origin")
        self.isPublic = try values.decode(Bool.self, forKey: "is_public")
      }
    }

    /// Creates a new distribution group and returns it to the caller
    public func post(_ body: PostRequest) -> Request<[String: AnyJSON]> {
      Request(method: "POST", url: path, body: body, id: "distributionGroups_create")
    }

    public struct PostRequest: Encodable {
      /// The name of the distribution group
      public var name: String
      /// The display name of the distribution group. If not specified, the name will be used.
      public var displayName: String?

      public init(name: String, displayName: String? = nil) {
        self.name = name
        self.displayName = displayName
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(displayName, forKey: "display_name")
      }
    }
  }
}
