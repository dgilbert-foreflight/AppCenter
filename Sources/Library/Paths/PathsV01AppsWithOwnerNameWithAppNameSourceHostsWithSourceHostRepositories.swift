// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.SourceHosts.WithSourceHost {
  public var repositories: Repositories {
    Repositories(path: path + "/repositories")
  }

  public struct Repositories {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/source_hosts/{source_host}/repositories`
    public let path: String

    /// Gets the repositories available from the source code host
    public func get(parameters: GetParameters? = nil) -> Request<[GetResponseItem]> {
      Request(method: "GET", url: path, query: parameters?.asQuery, id: "repositories_list")
    }

    /// The source repository
    public struct GetResponseItem: Decodable {
      /// The repository name
      public var name: String?
      /// URL used to clone the repository
      public var cloneURL: String?

      public init(name: String? = nil, cloneURL: String? = nil) {
        self.name = name
        self.cloneURL = cloneURL
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.cloneURL = try values.decodeIfPresent(String.self, forKey: "clone_url")
      }
    }

    public struct GetParameters {
      public var vstsAccountName: String?
      public var vstsProjectID: String?
      public var serviceConnectionID: String?
      public var form: Form?

      public enum Form: String, Codable, CaseIterable {
        case lite
        case full
      }

      public init(vstsAccountName: String? = nil, vstsProjectID: String? = nil, serviceConnectionID: String? = nil, form: Form? = nil) {
        self.vstsAccountName = vstsAccountName
        self.vstsProjectID = vstsProjectID
        self.serviceConnectionID = serviceConnectionID
        self.form = form
      }

      public var asQuery: [(String, String?)] {
        let encoder = URLQueryEncoder()
        encoder.encode(vstsAccountName, forKey: "vstsAccountName")
        encoder.encode(vstsProjectID, forKey: "vstsProjectId")
        encoder.encode(serviceConnectionID, forKey: "service_connection_id")
        encoder.encode(form, forKey: "form")
        return encoder.items
      }
    }
  }
}
