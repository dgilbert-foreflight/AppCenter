// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Errors {
  public var availableAppBuilds: AvailableAppBuilds {
    AvailableAppBuilds(path: path + "/availableAppBuilds")
  }

  public struct AvailableAppBuilds {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds`
    public let path: String

    /// List of app builds
    public func get(parameters: GetParameters) -> Request<GetResponse> {
      Request(method: "GET", url: path, query: parameters.asQuery, id: "Errors_AppBuildsList")
    }

    public struct GetResponse: Decodable {
      public var appBuilds: [String]?

      public init(appBuilds: [String]? = nil) {
        self.appBuilds = appBuilds
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.appBuilds = try values.decodeIfPresent([String].self, forKey: "appBuilds")
      }
    }

    public struct GetParameters {
      public var version: String
      public var start: Date
      public var end: Date?
      public var top: Int64?
      public var errorType: ErrorType?

      public enum ErrorType: String, Codable, CaseIterable {
        case all
        case unhandledError
        case handledError
      }

      public init(version: String, start: Date, end: Date? = nil, top: Int64? = nil, errorType: ErrorType? = nil) {
        self.version = version
        self.start = start
        self.end = end
        self.top = top
        self.errorType = errorType
      }

      public var asQuery: [(String, String?)] {
        let encoder = URLQueryEncoder()
        encoder.encode(version, forKey: "version")
        encoder.encode(start, forKey: "start")
        encoder.encode(end, forKey: "end")
        encoder.encode(top, forKey: "$top")
        encoder.encode(errorType, forKey: "errorType")
        return encoder.items
      }
    }
  }
}
