// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Analytics {
  public var sessionDurationsDistribution: SessionDurationsDistribution {
    SessionDurationsDistribution(path: path + "/session_durations_distribution")
  }

  public struct SessionDurationsDistribution {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution`
    public let path: String

    /// Gets session duration.
    public func get(parameters: GetParameters) -> Request<GetResponse> {
      Request(method: "GET", url: path, query: parameters.asQuery, id: "Analytics_SessionDurationsDistribution")
    }

    public struct GetResponse: Decodable {
      /// The count of sessions in these buckets.
      public var distribution: [DistributionItem]?
      /// The previous average session duration for previous time range.
      public var previousAverageDuration: String?
      /// The average session duration for current time range.
      public var averageDuration: String?

      public struct DistributionItem: Decodable {
        /// The bucket name.
        public var bucket: String?
        /// The count of sessions in current bucket.
        public var count: Int64?

        public init(bucket: String? = nil, count: Int64? = nil) {
          self.bucket = bucket
          self.count = count
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.bucket = try values.decodeIfPresent(String.self, forKey: "bucket")
          self.count = try values.decodeIfPresent(Int64.self, forKey: "count")
        }
      }

      public init(distribution: [DistributionItem]? = nil, previousAverageDuration: String? = nil, averageDuration: String? = nil) {
        self.distribution = distribution
        self.previousAverageDuration = previousAverageDuration
        self.averageDuration = averageDuration
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.distribution = try values.decodeIfPresent([DistributionItem].self, forKey: "distribution")
        self.previousAverageDuration = try values.decodeIfPresent(String.self, forKey: "previous_average_duration")
        self.averageDuration = try values.decodeIfPresent(String.self, forKey: "average_duration")
      }
    }

    public struct GetParameters {
      public var start: Date
      public var end: Date?
      public var versions: [String]?

      public init(start: Date, end: Date? = nil, versions: [String]? = nil) {
        self.start = start
        self.end = end
        self.versions = versions
      }

      public var asQuery: [(String, String?)] {
        let encoder = URLQueryEncoder()
        encoder.encode(start, forKey: "start")
        encoder.encode(end, forKey: "end")
        encoder.encode(versions, forKey: "versions", explode: false, delimiter: "|")
        return encoder.items
      }
    }
  }
}
