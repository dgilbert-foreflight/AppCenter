// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Deployments.WithDeploymentName.PromoteRelease {
  public func promoteDeploymentName(_ promoteDeploymentName: String) -> WithPromoteDeploymentName {
    WithPromoteDeploymentName(path: "\(path)/\(promoteDeploymentName)")
  }

  public struct WithPromoteDeploymentName {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}`
    public let path: String

    /// Promote one release (default latest one) from one deployment to another
    public func post(_ body: PostRequest? = nil) -> Request<[String: AnyJSON]> {
      Request(method: "POST", url: path, body: body, id: "codePushDeployments_promote")
    }

    public struct PostRequest: Encodable {
      public var targetBinaryRange: String?
      public var description: String?
      public var isDisabled: Bool?
      public var isMandatory: Bool?
      public var rollout: Int?
      public var label: String?

      public init(targetBinaryRange: String? = nil, description: String? = nil, isDisabled: Bool? = nil, isMandatory: Bool? = nil, rollout: Int? = nil, label: String? = nil) {
        self.targetBinaryRange = targetBinaryRange
        self.description = description
        self.isDisabled = isDisabled
        self.isMandatory = isMandatory
        self.rollout = rollout
        self.label = label
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(targetBinaryRange, forKey: "target_binary_range")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(isDisabled, forKey: "is_disabled")
        try values.encodeIfPresent(isMandatory, forKey: "is_mandatory")
        try values.encodeIfPresent(rollout, forKey: "rollout")
        try values.encodeIfPresent(label, forKey: "label")
      }
    }
  }
}
