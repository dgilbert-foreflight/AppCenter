// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Builds.WithBuildID {
  public var distribute: Distribute {
    Distribute(path: path + "/distribute")
  }

  public struct Distribute {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/distribute`
    public let path: String

    /// Distribute a build
    public func post(_ body: PostRequest) -> Request<[String: AnyJSON]> {
      Request(method: "POST", url: path, body: body, id: "builds_distribute")
    }

    public struct PostRequest: Encodable {
      /// Array of objects {id:string, type:string} with "id" being the distribution group ID, store ID, or tester email, and "type" being "group", "store", or "tester"
      public var destinations: [Destination]?
      /// The release notes
      public var releaseNotes: String?
      public var isMandatoryUpdate: Bool?
      public var isNotifyTesters: Bool

      /// Destination details for distributing build releases
      public struct Destination: Encodable, Identifiable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
          case store
          case group
          case tester
        }

        public init(id: String, type: `Type`) {
          self.id = id
          self.type = type
        }

        public func encode(to encoder: Encoder) throws {
          var values = encoder.container(keyedBy: StringCodingKey.self)
          try values.encode(id, forKey: "id")
          try values.encode(type, forKey: "type")
        }
      }

      public init(destinations: [Destination]? = nil, releaseNotes: String? = nil, isMandatoryUpdate: Bool? = nil, isNotifyTesters: Bool? = nil) {
        self.destinations = destinations
        self.releaseNotes = releaseNotes
        self.isMandatoryUpdate = isMandatoryUpdate
        self.isNotifyTesters = isNotifyTesters ?? true
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(destinations, forKey: "destinations")
        try values.encodeIfPresent(releaseNotes, forKey: "releaseNotes")
        try values.encodeIfPresent(isMandatoryUpdate, forKey: "mandatoryUpdate")
        try values.encodeIfPresent(isNotifyTesters, forKey: "notifyTesters")
      }
    }
  }
}
