// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Errors.ErrorGroups {
  public func errorGroupID(_ errorGroupID: String) -> WithErrorGroupID {
    WithErrorGroupID(path: "\(path)/\(errorGroupID)")
  }

  public struct WithErrorGroupID {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}`
    public let path: String

    /// Error group details
    public var get: Request<GetResponse> {
      Request(method: "GET", url: path, id: "Errors_GroupDetails")
    }

    public struct GetResponse: Decodable {
      public var annotation: String?
      public var state: State

      public enum State: String, Codable, CaseIterable {
        case `open`
        case closed
        case ignored
      }

      public init(annotation: String? = nil, state: State) {
        self.annotation = annotation
        self.state = state
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.annotation = try values.decodeIfPresent(String.self, forKey: "annotation")
        self.state = try values.decode(State.self, forKey: "state")
      }
    }

    /// Update error group state
    public func patch(_ body: PatchRequest) -> Request<PatchResponse> {
      Request(method: "PATCH", url: path, body: body, id: "Errors_UpdateState")
    }

    public struct PatchResponse: Decodable {
      public var annotation: String?
      public var state: State

      public enum State: String, Codable, CaseIterable {
        case `open`
        case closed
        case ignored
      }

      public init(annotation: String? = nil, state: State) {
        self.annotation = annotation
        self.state = state
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.annotation = try values.decodeIfPresent(String.self, forKey: "annotation")
        self.state = try values.decode(State.self, forKey: "state")
      }
    }

    public struct PatchRequest: Encodable {
      public var state: State
      public var annotation: String?

      public enum State: String, Codable, CaseIterable {
        case `open`
        case closed
        case ignored
      }

      public init(state: State, annotation: String? = nil) {
        self.state = state
        self.annotation = annotation
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(state, forKey: "state")
        try values.encodeIfPresent(annotation, forKey: "annotation")
      }
    }
  }
}
