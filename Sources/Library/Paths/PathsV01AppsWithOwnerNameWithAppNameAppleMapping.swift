// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName {
  public var appleMapping: AppleMapping {
    AppleMapping(path: path + "/apple_mapping")
  }

  public struct AppleMapping {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/apple_mapping`
    public let path: String

    /// Get mapping of apple app to an existing app in apple store.
    public var get: Request<[String: AnyJSON]> {
      Request(method: "GET", url: path, id: "appleMapping_get")
    }

    /// Create a mapping for an existing app in apple store for the specified application.
    public func post(_ body: PostRequest) -> Request<[String: AnyJSON]> {
      Request(method: "POST", url: path, body: body, id: "appleMapping_create")
    }

    /// Apple Mapping Request Type
    public struct PostRequest: Encodable {
      /// Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.
      public var serviceConnectionID: String
      /// ID of the apple application in apple store, takes precedence over bundle_identifier when both are provided
      public var appleID: String?
      /// Bundle Identifier of the apple package
      public var bundleIdentifier: String?
      /// ID of the Team associated with the app in apple store
      public var teamIdentifier: String

      public init(serviceConnectionID: String, appleID: String? = nil, bundleIdentifier: String? = nil, teamIdentifier: String) {
        self.serviceConnectionID = serviceConnectionID
        self.appleID = appleID
        self.bundleIdentifier = bundleIdentifier
        self.teamIdentifier = teamIdentifier
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(serviceConnectionID, forKey: "service_connection_id")
        try values.encodeIfPresent(appleID, forKey: "apple_id")
        try values.encodeIfPresent(bundleIdentifier, forKey: "bundle_identifier")
        try values.encode(teamIdentifier, forKey: "team_identifier")
      }
    }

    /// Delete mapping of apple app to an existing app in apple store.
    public func delete(_ body: String? = nil) -> Request<Void> {
      Request(method: "DELETE", url: path, body: body, id: "appleMapping_delete")
    }
  }
}
