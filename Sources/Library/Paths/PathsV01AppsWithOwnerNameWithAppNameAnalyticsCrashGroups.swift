// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Analytics {
  public var crashGroups: CrashGroups {
    CrashGroups(path: path + "/crash_groups")
  }

  public struct CrashGroups {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups`
    public let path: String

    /// Overall crashes and affected users count of the selected crash groups with selected versions.
    public func post(crashGroups: [PostRequest.CrashGroup]) -> Request<[PostResponseItem]> {
      Request(method: "POST", url: path, body: PostRequest(crashGroups: crashGroups), id: "Analytics_CrashGroupsTotals")
    }

    public struct PostResponseItem: Decodable {
      public var crashGroupID: String?
      public var appVersion: String?
      public var overall: Overall?

      public struct Overall: Decodable {
        public var crashCount: Int64?
        public var deviceCount: Int64?

        public init(crashCount: Int64? = nil, deviceCount: Int64? = nil) {
          self.crashCount = crashCount
          self.deviceCount = deviceCount
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.crashCount = try values.decodeIfPresent(Int64.self, forKey: "crash_count")
          self.deviceCount = try values.decodeIfPresent(Int64.self, forKey: "device_count")
        }
      }

      public init(crashGroupID: String? = nil, appVersion: String? = nil, overall: Overall? = nil) {
        self.crashGroupID = crashGroupID
        self.appVersion = appVersion
        self.overall = overall
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.crashGroupID = try values.decodeIfPresent(String.self, forKey: "crash_group_id")
        self.appVersion = try values.decodeIfPresent(String.self, forKey: "app_version")
        self.overall = try values.decodeIfPresent(Overall.self, forKey: "overall")
      }
    }

    public struct PostRequest: Encodable {
      public var crashGroups: [CrashGroup]

      public struct CrashGroup: Encodable {
        public var crashGroupID: String?
        public var appVersion: String?

        public init(crashGroupID: String? = nil, appVersion: String? = nil) {
          self.crashGroupID = crashGroupID
          self.appVersion = appVersion
        }

        public func encode(to encoder: Encoder) throws {
          var values = encoder.container(keyedBy: StringCodingKey.self)
          try values.encodeIfPresent(crashGroupID, forKey: "crash_group_id")
          try values.encodeIfPresent(appVersion, forKey: "app_version")
        }
      }

      public init(crashGroups: [CrashGroup]) {
        self.crashGroups = crashGroups
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(crashGroups, forKey: "crash_groups")
      }
    }
  }
}
