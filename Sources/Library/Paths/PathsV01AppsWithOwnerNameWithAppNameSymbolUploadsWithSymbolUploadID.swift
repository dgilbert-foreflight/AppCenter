// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.SymbolUploads {
  public func symbolUploadID(_ symbolUploadID: String) -> WithSymbolUploadID {
    WithSymbolUploadID(path: "\(path)/\(symbolUploadID)")
  }

  public struct WithSymbolUploadID {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}`
    public let path: String

    /// Gets a symbol upload by id for the specified application
    public var get: Request<[String: AnyJSON]> {
      Request(method: "GET", url: path, id: "symbolUploads_get")
    }

    /// Commits or aborts the symbol upload process for a new set of symbols for the specified application
    public func patch(status: PatchRequest.Status) -> Request<[String: AnyJSON]> {
      Request(method: "PATCH", url: path, body: PatchRequest(status: status), id: "symbolUploads_complete")
    }

    /// A request containing information pertaining to completing a symbol upload process
    public struct PatchRequest: Encodable {
      /// The desired operation for the symbol upload
      public var status: Status

      /// The desired operation for the symbol upload
      public enum Status: String, Codable, CaseIterable {
        case committed
        case aborted
      }

      public init(status: Status) {
        self.status = status
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(status, forKey: "status")
      }
    }

    /// Deletes a symbol upload by id for the specified application
    public var delete: Request<[String: AnyJSON]> {
      Request(method: "DELETE", url: path, id: "symbolUploads_delete")
    }
  }
}
