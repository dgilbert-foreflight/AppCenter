// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName {
  public var crashesInfo: CrashesInfo {
    CrashesInfo(path: path + "/crashes_info")
  }

  public struct CrashesInfo {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/crashes_info`
    public let path: String

    /// Gets whether the application has any crashes.
    @available(*, deprecated, message: "Deprecated")
    public var get: Request<GetResponse> {
      Request(method: "GET", url: path, id: "crashes_getAppCrashesInfo")
    }

    public struct GetResponse: Decodable {
      public var hasCrashes: Bool
      public var features: Features

      public struct Features: Decodable {
        /// App supports modification of crashgroup status
        public var isCrashgroupModifyStatus: Bool?
        /// App supports modification of crashgroup annotation
        public var isCrashgroupModifyAnnotation: Bool?
        /// App supports search API
        public var isSearch: Bool?
        /// App supports the 'crash free user' metric
        public var isCrashgroupAnalyticsCrashfreeusers: Bool?
        /// App supports the 'impacted users' metric
        public var isCrashgroupAnalyticsImpactedusers: Bool?
        /// App supports download of raw crashes
        public var isCrashDownloadRaw: Bool?

        public init(isCrashgroupModifyStatus: Bool? = nil, isCrashgroupModifyAnnotation: Bool? = nil, isSearch: Bool? = nil, isCrashgroupAnalyticsCrashfreeusers: Bool? = nil, isCrashgroupAnalyticsImpactedusers: Bool? = nil, isCrashDownloadRaw: Bool? = nil) {
          self.isCrashgroupModifyStatus = isCrashgroupModifyStatus
          self.isCrashgroupModifyAnnotation = isCrashgroupModifyAnnotation
          self.isSearch = isSearch
          self.isCrashgroupAnalyticsCrashfreeusers = isCrashgroupAnalyticsCrashfreeusers
          self.isCrashgroupAnalyticsImpactedusers = isCrashgroupAnalyticsImpactedusers
          self.isCrashDownloadRaw = isCrashDownloadRaw
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.isCrashgroupModifyStatus = try values.decodeIfPresent(Bool.self, forKey: "crashgroup_modify_status")
          self.isCrashgroupModifyAnnotation = try values.decodeIfPresent(Bool.self, forKey: "crashgroup_modify_annotation")
          self.isSearch = try values.decodeIfPresent(Bool.self, forKey: "search")
          self.isCrashgroupAnalyticsCrashfreeusers = try values.decodeIfPresent(Bool.self, forKey: "crashgroup_analytics_crashfreeusers")
          self.isCrashgroupAnalyticsImpactedusers = try values.decodeIfPresent(Bool.self, forKey: "crashgroup_analytics_impactedusers")
          self.isCrashDownloadRaw = try values.decodeIfPresent(Bool.self, forKey: "crash_download_raw")
        }
      }

      public init(hasCrashes: Bool, features: Features) {
        self.hasCrashes = hasCrashes
        self.features = features
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.hasCrashes = try values.decode(Bool.self, forKey: "has_crashes")
        self.features = try values.decode(Features.self, forKey: "features")
      }
    }
  }
}
