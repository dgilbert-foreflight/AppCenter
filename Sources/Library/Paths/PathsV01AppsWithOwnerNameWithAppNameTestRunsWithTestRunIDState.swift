// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.TestRuns.WithTestRunID {
  public var state: State {
    State(path: path + "/state")
  }

  public struct State {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state`
    public let path: String

    /// Gets state of the test run
    public var get: Request<GetResponse> {
      Request(method: "GET", url: path, id: "test_getTestRunState")
    }

    /// Test Run State
    ///
    /// Current status of a test run
    public struct GetResponse: Decodable {
      /// Multi-line message that describes the status
      public var message: [String]?
      /// Time (in seconds) that the client should wait for before checking the status again
      public var waitTime: Int?
      /// The exit code that the client should use when exiting. Used for indicating status to the caller of the client.
      /// 0: test run completes with no failing tests
      /// 1: test run completes with at least one failing test
      /// 2: test run failed to complete. Status for test run is unknown
      public var exitCode: Int?

      public init(message: [String]? = nil, waitTime: Int? = nil, exitCode: Int? = nil) {
        self.message = message
        self.waitTime = waitTime
        self.exitCode = exitCode
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.message = try values.decodeIfPresent([String].self, forKey: "message")
        self.waitTime = try values.decodeIfPresent(Int.self, forKey: "wait_time")
        self.exitCode = try values.decodeIfPresent(Int.self, forKey: "exit_code")
      }
    }
  }
}
