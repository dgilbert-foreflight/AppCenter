// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Analytics {
  public var crashfreeDevicePercentages: CrashfreeDevicePercentages {
    CrashfreeDevicePercentages(path: path + "/crashfree_device_percentages")
  }

  public struct CrashfreeDevicePercentages {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages`
    public let path: String

    /// Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
    @available(*, deprecated, message: "Deprecated")
    public func get(parameters: GetParameters) -> Request<GetResponse> {
      Request(method: "GET", url: path, query: parameters.asQuery, id: "Analytics_CrashFreeDevicePercentages")
    }

    public struct GetResponse: Decodable {
      /// Average percentage.
      public var averagePercentage: Double?
      /// The crash-free percentage per day.
      public var dailyPercentages: [DailyPercentage]?

      public struct DailyPercentage: Decodable {
        /// The ISO 8601 datetime.
        public var datetime: String?
        /// Percentage of the object.
        public var percentage: Double?

        public init(datetime: String? = nil, percentage: Double? = nil) {
          self.datetime = datetime
          self.percentage = percentage
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.datetime = try values.decodeIfPresent(String.self, forKey: "datetime")
          self.percentage = try values.decodeIfPresent(Double.self, forKey: "percentage")
        }
      }

      public init(averagePercentage: Double? = nil, dailyPercentages: [DailyPercentage]? = nil) {
        self.averagePercentage = averagePercentage
        self.dailyPercentages = dailyPercentages
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.averagePercentage = try values.decodeIfPresent(Double.self, forKey: "average_percentage")
        self.dailyPercentages = try values.decodeIfPresent([DailyPercentage].self, forKey: "daily_percentages")
      }
    }

    public struct GetParameters {
      public var start: Date
      public var end: Date?
      public var version: String

      public init(start: Date, end: Date? = nil, version: String) {
        self.start = start
        self.end = end
        self.version = version
      }

      public var asQuery: [(String, String?)] {
        let encoder = URLQueryEncoder()
        encoder.encode(start, forKey: "start")
        encoder.encode(end, forKey: "end")
        encoder.encode(version, forKey: "version")
        return encoder.items
      }
    }
  }
}
