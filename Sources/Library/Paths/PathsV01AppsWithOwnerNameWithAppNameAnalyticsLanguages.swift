// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Analytics {
  public var languages: Languages {
    Languages(path: path + "/languages")
  }

  public struct Languages {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/analytics/languages`
    public let path: String

    /// Languages in the time range.
    public func get(parameters: GetParameters) -> Request<GetResponse> {
      Request(method: "GET", url: path, query: parameters.asQuery, id: "Analytics_LanguageCounts")
    }

    public struct GetResponse: Decodable {
      public var total: Int64?
      public var languages: [Language]?

      public struct Language: Decodable {
        /// Language's name.
        public var languageName: String?
        /// Count current of language.
        public var count: Int64?
        /// Count of previous lanugage.
        public var previousCount: Int64?

        public init(languageName: String? = nil, count: Int64? = nil, previousCount: Int64? = nil) {
          self.languageName = languageName
          self.count = count
          self.previousCount = previousCount
        }

        public init(from decoder: Decoder) throws {
          let values = try decoder.container(keyedBy: StringCodingKey.self)
          self.languageName = try values.decodeIfPresent(String.self, forKey: "language_name")
          self.count = try values.decodeIfPresent(Int64.self, forKey: "count")
          self.previousCount = try values.decodeIfPresent(Int64.self, forKey: "previous_count")
        }
      }

      public init(total: Int64? = nil, languages: [Language]? = nil) {
        self.total = total
        self.languages = languages
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.total = try values.decodeIfPresent(Int64.self, forKey: "total")
        self.languages = try values.decodeIfPresent([Language].self, forKey: "languages")
      }
    }

    public struct GetParameters {
      public var start: Date
      public var end: Date?
      public var top: Int64?
      public var versions: [String]?

      public init(start: Date, end: Date? = nil, top: Int64? = nil, versions: [String]? = nil) {
        self.start = start
        self.end = end
        self.top = top
        self.versions = versions
      }

      public var asQuery: [(String, String?)] {
        let encoder = URLQueryEncoder()
        encoder.encode(start, forKey: "start")
        encoder.encode(end, forKey: "end")
        encoder.encode(top, forKey: "$top")
        encoder.encode(versions, forKey: "versions", explode: false, delimiter: "|")
        return encoder.items
      }
    }
  }
}
