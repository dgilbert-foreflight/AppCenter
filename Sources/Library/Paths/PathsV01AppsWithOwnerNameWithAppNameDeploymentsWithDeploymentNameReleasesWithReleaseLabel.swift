// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Deployments.WithDeploymentName.Releases {
  public func releaseLabel(_ releaseLabel: String) -> WithReleaseLabel {
    WithReleaseLabel(path: "\(path)/\(releaseLabel)")
  }

  public struct WithReleaseLabel {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}`
    public let path: String

    /// Modifies a CodePush release metadata under the given Deployment
    public func patch(_ body: PatchRequest) -> Request<[String: AnyJSON]> {
      Request(method: "PATCH", url: path, body: body, id: "deploymentReleases_update")
    }

    public struct PatchRequest: Encodable {
      public var targetBinaryRange: String?
      public var description: String?
      public var isDisabled: Bool?
      public var isMandatory: Bool?
      public var rollout: Int?

      public init(targetBinaryRange: String? = nil, description: String? = nil, isDisabled: Bool? = nil, isMandatory: Bool? = nil, rollout: Int? = nil) {
        self.targetBinaryRange = targetBinaryRange
        self.description = description
        self.isDisabled = isDisabled
        self.isMandatory = isMandatory
        self.rollout = rollout
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(targetBinaryRange, forKey: "target_binary_range")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(isDisabled, forKey: "is_disabled")
        try values.encodeIfPresent(isMandatory, forKey: "is_mandatory")
        try values.encodeIfPresent(rollout, forKey: "rollout")
      }
    }
  }
}
