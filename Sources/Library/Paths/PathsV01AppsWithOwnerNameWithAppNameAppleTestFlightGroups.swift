// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName {
  public var appleTestFlightGroups: AppleTestFlightGroups {
    AppleTestFlightGroups(path: path + "/apple_test_flight_groups")
  }

  public struct AppleTestFlightGroups {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/apple_test_flight_groups`
    public let path: String

    /// Fetch all apple test flight groups
    @available(*, deprecated, message: "Deprecated")
    public var get: Request<[GetResponseItem]> {
      Request(method: "GET", url: path, id: "appleMapping_TestFlightGroups")
    }

    /// Apple Test Flight Groups Response Type
    public struct GetResponseItem: Decodable, Identifiable {
      /// Id of the group.
      public var id: String?
      /// Provider id of the group.
      public var providerID: Double?
      /// Apple id of the group.
      public var appleID: Double?
      /// Name of the group.
      public var name: String?

      public init(id: String? = nil, providerID: Double? = nil, appleID: Double? = nil, name: String? = nil) {
        self.id = id
        self.providerID = providerID
        self.appleID = appleID
        self.name = name
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.providerID = try values.decodeIfPresent(Double.self, forKey: "providerId")
        self.appleID = try values.decodeIfPresent(Double.self, forKey: "appleId")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
      }
    }
  }
}
