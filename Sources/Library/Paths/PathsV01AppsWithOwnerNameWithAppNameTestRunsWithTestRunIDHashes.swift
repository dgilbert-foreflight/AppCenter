// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.TestRuns.WithTestRunID {
  public var hashes: Hashes {
    Hashes(path: path + "/hashes")
  }

  public struct Hashes {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes`
    public let path: String

    /// Adds file with the given hash to a test run
    public func post(_ body: PostRequest) -> Request<Void> {
      Request(method: "POST", url: path, body: body, id: "test_uploadHash")
    }

    /// Test Cloud File Hash
    ///
    /// Hash, type, path and byte range of a file that is required in test run
    public struct PostRequest: Encodable {
      /// Type of the file
      public var fileType: FileType
      /// SHA256 hash of the file
      public var checksum: String
      /// Relative path of the file
      public var relativePath: String
      /// Range of bytes required to verify ownership of the file
      public var byteRange: String?

      /// Type of the file
      public enum FileType: String, Codable, CaseIterable {
        case dsymFile = "dsym-file"
        case appFile = "app-file"
        case testFile = "test-file"
      }

      public init(fileType: FileType, checksum: String, relativePath: String, byteRange: String? = nil) {
        self.fileType = fileType
        self.checksum = checksum
        self.relativePath = relativePath
        self.byteRange = byteRange
      }

      public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(fileType, forKey: "file_type")
        try values.encode(checksum, forKey: "checksum")
        try values.encode(relativePath, forKey: "relative_path")
        try values.encodeIfPresent(byteRange, forKey: "byte_range")
      }
    }
  }
}
