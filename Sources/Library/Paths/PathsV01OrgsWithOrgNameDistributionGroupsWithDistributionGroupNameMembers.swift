// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Orgs.WithOrgName.DistributionGroups.WithDistributionGroupName {
  public var members: Members {
    Members(path: path + "/members")
  }

  public struct Members {
    /// Path: `/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members`
    public let path: String

    /// Returns a list of member in the distribution group specified
    public var get: Request<[GetResponseItem]> {
      Request(method: "GET", url: path, id: "distributionGroups_listUsersForOrg")
    }

    public struct GetResponseItem: Decodable, Identifiable {
      /// The unique id (UUID) of the user
      public var id: UUID?
      /// The avatar URL of the user
      public var avatarURL: String?
      /// User is required to send an old password in order to change the password.
      public var canChangePassword: Bool?
      /// The full name of the user. Might for example be first and last name
      public var displayName: String?
      /// The email address of the user
      public var email: String
      /// Whether the has accepted the invite. Available when an invite is pending, and the value will be "true".
      public var isInvitePending: Bool?
      /// The unique name that is used to identify the user.
      public var name: String?

      public init(id: UUID? = nil, avatarURL: String? = nil, canChangePassword: Bool? = nil, displayName: String? = nil, email: String, isInvitePending: Bool? = nil, name: String? = nil) {
        self.id = id
        self.avatarURL = avatarURL
        self.canChangePassword = canChangePassword
        self.displayName = displayName
        self.email = email
        self.isInvitePending = isInvitePending
        self.name = name
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(UUID.self, forKey: "id")
        self.avatarURL = try values.decodeIfPresent(String.self, forKey: "avatar_url")
        self.canChangePassword = try values.decodeIfPresent(Bool.self, forKey: "can_change_password")
        self.displayName = try values.decodeIfPresent(String.self, forKey: "display_name")
        self.email = try values.decode(String.self, forKey: "email")
        self.isInvitePending = try values.decodeIfPresent(Bool.self, forKey: "invite_pending")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
      }
    }

    /// Accepts an array of user email addresses to get added to the specified group
    public func post(userEmails: [String]? = nil) -> Request<[PostResponseItem]> {
      Request(method: "POST", url: path, body: ["user_emails": userEmails], id: "distributionGroups_addUsersForOrg")
    }

    public struct PostResponseItem: Decodable {
      /// The code of the result
      public var code: String?
      /// Whether the has accepted the invite. Available when an invite is pending, and the value will be "true".
      public var isInvitePending: Bool?
      /// The message of the result
      public var message: String?
      /// The status code of the result
      public var status: Int
      /// The email of the user
      public var userEmail: String?

      public init(code: String? = nil, isInvitePending: Bool? = nil, message: String? = nil, status: Int, userEmail: String? = nil) {
        self.code = code
        self.isInvitePending = isInvitePending
        self.message = message
        self.status = status
        self.userEmail = userEmail
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.code = try values.decodeIfPresent(String.self, forKey: "code")
        self.isInvitePending = try values.decodeIfPresent(Bool.self, forKey: "invite_pending")
        self.message = try values.decodeIfPresent(String.self, forKey: "message")
        self.status = try values.decode(Int.self, forKey: "status")
        self.userEmail = try values.decodeIfPresent(String.self, forKey: "user_email")
      }
    }
  }
}
