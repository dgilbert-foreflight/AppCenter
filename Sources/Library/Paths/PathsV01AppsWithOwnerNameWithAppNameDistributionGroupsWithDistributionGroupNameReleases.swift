// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.DistributionGroups.WithDistributionGroupName {
  public var releases: Releases {
    Releases(path: path + "/releases")
  }

  public struct Releases {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases`
    public let path: String

    /// Return basic information about distributed releases in a given distribution group.
    public var get: Request<[GetResponseItem]> {
      Request(method: "GET", url: path, id: "releases_listByDistributionGroup")
    }

    /// Response for getting a list of releases in a distribution group
    public struct GetResponseItem: Decodable, Identifiable {
      /// ID identifying this unique release.
      public var id: Int
      /// The release's version.<br>
      /// For iOS: CFBundleVersion from info.plist.<br>
      /// For Android: android:versionCode from AppManifest.xml.
      public var version: String
      /// The release's origin
      public var origin: Origin?
      /// The release's short version.<br>
      /// For iOS: CFBundleShortVersionString from info.plist.<br>
      /// For Android: android:versionName from AppManifest.xml.
      public var shortVersion: String
      /// A boolean which determines whether the release is a mandatory update or not.
      public var isMandatoryUpdate: Bool
      /// UTC time in ISO 8601 format of the uploaded time.
      public var uploadedAt: String
      /// This value determines the whether a release currently is enabled or disabled.
      public var isEnabled: Bool
      /// This value determines if a release is external or not.
      public var isExternalBuild: Bool?

      /// The release's origin
      public enum Origin: String, Codable, CaseIterable {
        case hockeyapp
        case appcenter
      }

      public init(id: Int, version: String, origin: Origin? = nil, shortVersion: String, isMandatoryUpdate: Bool, uploadedAt: String, isEnabled: Bool, isExternalBuild: Bool? = nil) {
        self.id = id
        self.version = version
        self.origin = origin
        self.shortVersion = shortVersion
        self.isMandatoryUpdate = isMandatoryUpdate
        self.uploadedAt = uploadedAt
        self.isEnabled = isEnabled
        self.isExternalBuild = isExternalBuild
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.version = try values.decode(String.self, forKey: "version")
        self.origin = try values.decodeIfPresent(Origin.self, forKey: "origin")
        self.shortVersion = try values.decode(String.self, forKey: "short_version")
        self.isMandatoryUpdate = try values.decode(Bool.self, forKey: "mandatory_update")
        self.uploadedAt = try values.decode(String.self, forKey: "uploaded_at")
        self.isEnabled = try values.decode(Bool.self, forKey: "enabled")
        self.isExternalBuild = try values.decodeIfPresent(Bool.self, forKey: "is_external_build")
      }
    }
  }
}
