// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName {
  public var teams: Teams {
    Teams(path: path + "/teams")
  }

  public struct Teams {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/teams`
    public let path: String

    /// Returns the details of all teams that have access to the app.
    public var get: Request<[GetResponseItem]> {
      Request(method: "GET", url: path, id: "apps_getTeams")
    }

    public struct GetResponseItem: Decodable, Identifiable {
      /// The internal unique id (UUID) of the team.
      public var id: UUID
      /// The name of the team
      public var name: String
      /// The display name of the team
      public var displayName: String
      /// The description of the team
      public var description: String?
      /// The permissions the team has for the app
      public var permissions: [Permission]?

      public enum Permission: String, Codable, CaseIterable {
        case manager
        case developer
        case viewer
        case tester
      }

      public init(id: UUID, name: String, displayName: String, description: String? = nil, permissions: [Permission]? = nil) {
        self.id = id
        self.name = name
        self.displayName = displayName
        self.description = description
        self.permissions = permissions
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(UUID.self, forKey: "id")
        self.name = try values.decode(String.self, forKey: "name")
        self.displayName = try values.decode(String.self, forKey: "display_name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.permissions = try values.decodeIfPresent([Permission].self, forKey: "permissions")
      }
    }
  }
}
