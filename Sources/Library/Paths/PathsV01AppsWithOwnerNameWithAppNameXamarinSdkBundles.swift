// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName {
  public var xamarinSdkBundles: XamarinSdkBundles {
    XamarinSdkBundles(path: path + "/xamarin_sdk_bundles")
  }

  public struct XamarinSdkBundles {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/xamarin_sdk_bundles`
    public let path: String

    /// Gets the Xamarin SDK bundles available to this app
    @available(*, deprecated, message: "Deprecated")
    public var get: Request<[GetResponseItem]> {
      Request(method: "GET", url: path, id: "builds_listXamarinSDKBundles")
    }

    /// The Xamarin SDK bundle
    public struct GetResponseItem: Decodable {
      /// The Mono version
      public var monoVersion: String?
      /// The Xamarin SDK version
      public var sdkBundle: String?
      /// If the SDK is latest stable
      public var isCurrent: Bool?
      /// If the SDK is stable
      public var isStable: Bool?
      /// Specific for iOS SDK. A list of Xcode versions supported by current SDK version
      public var xcodeVersions: [String]?

      public init(monoVersion: String? = nil, sdkBundle: String? = nil, isCurrent: Bool? = nil, isStable: Bool? = nil, xcodeVersions: [String]? = nil) {
        self.monoVersion = monoVersion
        self.sdkBundle = sdkBundle
        self.isCurrent = isCurrent
        self.isStable = isStable
        self.xcodeVersions = xcodeVersions
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.monoVersion = try values.decodeIfPresent(String.self, forKey: "monoVersion")
        self.sdkBundle = try values.decodeIfPresent(String.self, forKey: "sdkBundle")
        self.isCurrent = try values.decodeIfPresent(Bool.self, forKey: "current")
        self.isStable = try values.decodeIfPresent(Bool.self, forKey: "stable")
        self.xcodeVersions = try values.decodeIfPresent([String].self, forKey: "xcodeVersions")
      }
    }
  }
}
