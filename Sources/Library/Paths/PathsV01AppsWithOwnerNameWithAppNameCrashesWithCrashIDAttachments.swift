// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension API.Apps.WithOwnerName.WithAppName.Crashes.WithCrashID {
  public var attachments: Attachments {
    Attachments(path: path + "/attachments")
  }

  public struct Attachments {
    /// Path: `/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments`
    public let path: String

    /// Gets all attachments for a specific crash.
    @available(*, deprecated, message: "Deprecated")
    public var get: Request<[GetResponseItem]> {
      Request(method: "GET", url: path, id: "crashes_listAttachments")
    }

    public struct GetResponseItem: Decodable {
      public var appID: String
      public var attachmentID: String
      public var crashID: String
      public var blobLocation: String
      public var contentType: String
      public var fileName: String
      public var createdTime: Date
      public var size: Double

      public init(appID: String, attachmentID: String, crashID: String, blobLocation: String, contentType: String, fileName: String, createdTime: Date, size: Double) {
        self.appID = appID
        self.attachmentID = attachmentID
        self.crashID = crashID
        self.blobLocation = blobLocation
        self.contentType = contentType
        self.fileName = fileName
        self.createdTime = createdTime
        self.size = size
      }

      public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.appID = try values.decode(String.self, forKey: "app_id")
        self.attachmentID = try values.decode(String.self, forKey: "attachment_id")
        self.crashID = try values.decode(String.self, forKey: "crash_id")
        self.blobLocation = try values.decode(String.self, forKey: "blob_location")
        self.contentType = try values.decode(String.self, forKey: "content_type")
        self.fileName = try values.decode(String.self, forKey: "file_name")
        self.createdTime = try values.decode(Date.self, forKey: "created_time")
        self.size = try values.decode(Double.self, forKey: "size")
      }
    }
  }
}
